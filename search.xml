<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Java八股-计网篇</title>
      <link href="/posts/52880.html"/>
      <url>/posts/52880.html</url>
      
        <content type="html"><![CDATA[<h1 id="java八股-计网篇"><a class="markdownIt-Anchor" href="#java八股-计网篇"></a> Java八股-计网篇</h1><h2 id="基础篇"><a class="markdownIt-Anchor" href="#基础篇"></a> 基础篇</h2><h3 id="osi七层模型和tcpip网络模型"><a class="markdownIt-Anchor" href="#osi七层模型和tcpip网络模型"></a> OSI七层模型和TCP/IP网络模型</h3><img src="https://gitee.com/qingy735/blogimg/raw/master/img/weixin-mianznxjsjwllsewswztwxxssc-11ecdc9c-5a06-4429-bfc4-115793749000.jpg" alt="三分恶面渣逆袭：三种网络体系结构" style="zoom:50%;" /><h4 id="每一层对应协议"><a class="markdownIt-Anchor" href="#每一层对应协议"></a> 每一层对应协议</h4><img src="https://gitee.com/qingy735/blogimg/raw/master/img/weixin-mianznxjsjwllsewswztwxxssc-ad64bbac-e0d5-4286-9b77-d008e8c8d419.jpg" alt="各层网络对应的网络协议" style="zoom:50%;" /><h3 id="输入网址到网页发生了什么"><a class="markdownIt-Anchor" href="#输入网址到网页发生了什么"></a> 输入网址到网页，发生了什么</h3><ol><li><p>浏览器对输入的URL进行解析</p></li><li><p>浏览器根据输入域名进行域名解析，获取到对应的IP地址</p><p>浏览器首先查询自身缓存中是否有这个域名对应的IP地址，如果有直接返回；没有则查询本地缓存中是否有该域名记录，如果有则直接返回；没有则查询hosts文件，有则返回；没有则查询本地DNS服务器（由网络接入服务器商提供，比如中国移动），有则返回；没有则本地DNS服务器向根域名服务器请求，根域名服务器可以直出接下来要向谁查询并告诉本地DNS，最终本地DNS查询到域名对应的IP地址，然后返回给浏览器</p></li><li><p>浏览器获取到请求的域名对应的IP后首先进行TCP连接，通过三次握手建立连接，之后发送HTTP请求，HTTP请求有请求行、请求头、空行、请求数据组成；如果使用的HTTP协议是HTTP1.1及以后将开启HTTP长连接，不需要每次发送HTTP请求都要从新建立连接；如果使用了HTTPS协议，则需要进行非对称加密来传递服务器公钥并根据一定算法生成此次连接要使用的密钥，随后使用生成的回话密钥进行对称加密。</p></li><li><p>服务器接收到客户端发送的请求后对其做出相应，将对应的请求资源发送给浏览器</p></li><li><p>浏览器根据接收到的响应报文渲染页面</p></li><li><p>连接结束：浏览器进行四次挥手释放TCP连接</p></li></ol><h2 id="http"><a class="markdownIt-Anchor" href="#http"></a> HTTP</h2><h3 id="http状态码"><a class="markdownIt-Anchor" href="#http状态码"></a> HTTP状态码</h3><img src="https://gitee.com/qingy735/blogimg/raw/master/img/6-五大类HTTP状态码.webp" alt="6-五大类HTTP状态码" style="zoom:50%;" /><p><code>301</code>表示永久移动，请求的资源已被永久移动到新位置。服务器返回此响应时，会返回新的资源地址</p><p><code>302</code>表示临时性移动，服务器从另外的地址响应资源，但是客户端还应该使用这个地址</p><p><code>304</code>表示资源未修改，重定向已存在的缓冲文件，也称缓存重定向，也就是告诉客户端可以继续使用缓存资源，用于缓存控制</p><h3 id="http常见字段"><a class="markdownIt-Anchor" href="#http常见字段"></a> HTTP常见字段</h3><ul><li><p><em>Host</em></p><p>客户端发送请求时，用来指定服务器的域名</p></li><li><p><em>Content-Length</em></p><p>服务器返回数据时，会有该字段，表示本次响应数据的长度。<strong>由于是基于TCP进行通信，所以存在粘包问题，HTTP协议通过设置回车符、换行符作为HTTP Header的边界，通过Content-Length字段作为Http Body的边界</strong></p></li><li><p><em>Connection</em></p><p>客户端要求服务器使用<strong>HTTP 长连接机制</strong></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">Connection: Keep-Alive<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><em>Content-Type</em></p><p>服务器响应时返回给客户端，表示本次数据是什么格式</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">Content-Type: text/html; Charset=utf-8<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><em>Accept</em></p><p>客户端告诉服务器自己能接受哪些数据格式</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">Accept: */*<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><em>Content-Encoding</em></p><p>说明数据的压缩方式，表示服务器返回的数据使用了什么压缩格式</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">Content-Encoding: gzip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><em>Accept-Encoding</em></p><p>客户端告诉服务器自己可以接受哪写压缩方式</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">Accept-Encoding: gzip, deflate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h3 id="get和post"><a class="markdownIt-Anchor" href="#get和post"></a> GET和POST</h3><ul><li>GET方法将请求信息放在URL中，而POST将请求信息放在请求体中；由于浏览器对URL长度有限制，所以使用GTE的请求的URL长度有限制；GET将请求信息直接暴露在URL中不安全</li><li>由于GET从定义上是从服务器上获取资源，所以每次请求都不会影响到服务器而且每次的结果都是相同的即是幂等的。而POST定义是新增或提交数据，会修改服务器上的资源，是不安全的，同时每次提交数据都会创建多个资源所以不是幂等的。</li><li>GET请求能够被缓存</li></ul><h3 id="http缓存技术"><a class="markdownIt-Anchor" href="#http缓存技术"></a> HTTP缓存技术</h3><p>对于一些具有重复性的HTTP请求，比如每次请求得到的数据都是一样的，就可以将数据缓存在本地。HTTP缓存有两种实现方式：<strong>强制缓存</strong>和<strong>协商缓存</strong></p><h4 id="强制缓存"><a class="markdownIt-Anchor" href="#强制缓存"></a> 强制缓存</h4><p>强缓存指的是只要浏览器判断缓存没有过期，则直接使用浏览器的本地缓存，决定是否使用缓存的主动性在浏览器。强缓存利用以下两个HTTP响应头字段实现，表示资源在客户端缓存的有效期：</p><ul><li>Cache-Control：相对时间</li><li>Expires：绝对时间</li></ul><p>如果同时包含，Cache-Control优先级高于Expires。</p><ol><li>当浏览器第一次请求服务器资源时，服务器在返回该资源时会在响应报文头部加上Cache-Control，Cache-Control中设置了过期时间</li><li>浏览器再次请求访问服务器中的该资源时，会通过请求资源的时间和过期时间判断资源是否过期，如果没有则使用该缓存，否则重新请求</li><li>服务器再次收到请求后，更新响应头中的Cache-Control</li></ol><h4 id="协商缓存"><a class="markdownIt-Anchor" href="#协商缓存"></a> 协商缓存</h4><p>当一些请求的响应码为<code>304</code>时，表示服务器告诉浏览器可以使用本地缓存资源，通常这种通过服务端告知客户端是否可以使用缓存的方式被称为协商缓存。</p><p>使用<code>ETag</code>字段实现协商缓存：</p><ol><li>当浏览器第一次请求访问服务器资源时，服务器在返回这个资源的同时在响应头中加上ETag唯一标识（由当前请求的资源生成）</li><li>当浏览器再次请求该资源时，首先检查强制缓存是否过期，没有过期则直接使用本地缓存，否则在请求头上加<code>If-None-Match</code>字段，值为<code>ETag</code>唯一标识</li><li>服务器再次接收到请求后，会根据请求中的<code>If-None-Match</code>值与当前请求资源生成的唯一标识进行比较，相等则返回<code>304</code>，不相等则返回资源并在响应头上加上新的<code>ETag</code>值</li><li>如果收到<code>304</code>请求响应状态码，直接本地加载资源，否则更新资源</li></ol><img src="https://gitee.com/qingy735/blogimg/raw/master/img/http缓存.webp" alt="http缓存" style="zoom:50%;" /><h3 id="http报文结构"><a class="markdownIt-Anchor" href="#http报文结构"></a> HTTP报文结构</h3><h4 id="请求报文"><a class="markdownIt-Anchor" href="#请求报文"></a> 请求报文</h4><ul><li><p>请求行</p><p>请求方法、请求URL和HTTP协议版本</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">GET /index.html HTTP/1.1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>请求头</p><p>包含请求的附加信息，如客户端想要接收的内容类型、浏览器类型等</p></li><li><p>空行</p><p>请求头部和消息正文之间有一个空行，表示请求头部结束</p></li><li><p>请求体</p><p>请求的具体内容，如 POST 请求中的表单数据；GET 请求中没有消息正文</p></li></ul><h4 id="响应报文"><a class="markdownIt-Anchor" href="#响应报文"></a> 响应报文</h4><ul><li><p>状态行</p><p>HTTP协议版本、状态码、状态消息</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">HTTP/1.0 200 OK<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>响应头</p><p>包含响应的附加信息，如服务器类型、内容类型、内容长度等</p></li><li><p>空行</p><p>表示响应头部结束</p></li><li><p>响应体</p><p>响应的具体内容，如 HTML 页面。不是所有的响应都有消息正文，如 204 No Content 状态码的响应</p></li></ul><h3 id="http和https"><a class="markdownIt-Anchor" href="#http和https"></a> HTTP和HTTPS</h3><ul><li>HTTP是超文本超文本传输协议，信息是明文传输，存在安全风险问题。HTTPS解决HTTP不安全的缺陷，在TCP和HTTP网络层之间加入了SSL/TLS安全协议，使得报文能够加密传输</li><li>HTTP连接建立简单，在TCP三次握手之后便可以进行HTTP报文传输；而HTTPS在TCP三次握手后还需要进行SSL/TLS的握手过程才可以进行加密报文传输</li><li>HTTPS协议需要向CA（证书权威机构）申请数字证书，来保证服务器的身份是可信的</li></ul><h4 id="http三大风险"><a class="markdownIt-Anchor" href="#http三大风险"></a> HTTP三大风险</h4><ul><li><p>窃听风险</p><p>混合加密实现信息的机密性，解决窃听风险</p></li><li><p>篡改风险</p><p>摘要算法实现完整性，根据数据生成唯一的<strong>指纹</strong>，该指纹用于校验数据的完整性，解决了篡改风险</p></li><li><p>冒充风险</p><p>将服务器公钥放在数字证书中，解决了冒充的风险</p></li></ul><h5 id="混合加密"><a class="markdownIt-Anchor" href="#混合加密"></a> 混合加密</h5><p>使用非对称加密和对称加密实现混合加密。</p><ol><li>在通信建立前采用非对称加密方式交换<strong>会话密钥</strong>，后续使用对称加密</li><li>在通信过程中全部使用非对称加密得到的会话密钥进行对称加密，对明文数据进行加密</li></ol><h5 id="摘要算法数字签名"><a class="markdownIt-Anchor" href="#摘要算法数字签名"></a> 摘要算法+数字签名</h5><p>为了保证传输的内容不被篡改，针对传输的内容计算出一个<strong>指纹</strong>，然后一起传输给对方。对方收到报文后首先对内容也计算出一个指纹，然后将其与发送方的指纹进行对比，如果相同则说明没有被篡改，不同则被篡改了。在计算机里会<strong>用摘要算法（哈希函数）来计算出内容的哈希值</strong>，也就是内容的「指纹」，这个<strong>哈希值是唯一的，且无法通过哈希值推导出内容</strong></p><p>但是这样并不能保证内容和哈希值不会都被替换，所以使用非对称加密对内容的哈希值进行加密形成<strong>数字签名</strong>，将内容和数字签名一同发送给服务器，服务器对内容计算哈希值后将其与公钥解密的数字签名比较</p><h5 id="数字证书"><a class="markdownIt-Anchor" href="#数字证书"></a> 数字证书</h5><p>虽然上述可以实现对内容的可靠加密，但是不能保证服务器公钥的合法性（使用伪造的公钥和私钥）。</p><p>于是存在一个CA机构，将服务器的<strong>个人信息+公钥</strong>等用自己的私钥打包成一个数字证书，服务器不仅会使用私钥对内容进行签名还会将数字证书发送给接收方。客户端接收到数字证书后首先使用CA的公钥对数字证书进行解密验证合法性，判断合法后客户端就获得了服务器的公钥，之后就可以进行非对称加密来传输生成会话密钥的准备数据。</p><h4 id="https-建立连接"><a class="markdownIt-Anchor" href="#https-建立连接"></a> HTTPS 建立连接</h4><ul><li>客户端向服务器索要并验证服务器公钥</li><li>双方协商生成会话密钥</li><li>双方采用会话密钥进行加密通信</li></ul><ol><li><p>客户端向服务器发起加密通信请求（客户端支持TLS协议版本、客户端生成的随机数A、客户端支持的密码套件）</p></li><li><p>服务器收到客户端请求后对客户端发起响应（确认TLS协议版本、服务器生成的随机数B、确认密码套件、服务器的数字证书）</p><blockquote><p>数字证书为由CA用他自己的私钥对服务器公钥进行非对称加密得到的</p></blockquote></li><li><p>客户端收到服务器回应后，使用浏览器或者系统中的CA公钥对服务器发送过来的数字证书进行解密确认证书的合法性和真实性。如果证书没有问题，此时客户端就获取到了服务器的公钥，随后使用它加密报文，并且向服务器发送消息（随机数C、加密通信算法改变通知，表示随后信息都将会用会话密钥加密通信、客户端握手结束通知，同时将之前内容做摘要供服务器校验）</p><blockquote><p>服务器和客户端都有了三个随机数，接着使用协商好的加密算法各自生成本次通信的会话密钥</p></blockquote></li><li><p>服务器计算出会话密钥并向客户端发送最后信息（加密算法改变通知、服务器握手结束通知，同时将之前内容做摘要供客户端校验）</p></li></ol><h5 id="中间人伪造数字证书并作为中间人转发消息"><a class="markdownIt-Anchor" href="#中间人伪造数字证书并作为中间人转发消息"></a> 中间人伪造数字证书并作为中间人转发消息</h5><img src="https://gitee.com/qingy735/blogimg/raw/master/img/https中间人.drawio.webp" alt="https中间人.drawio" style="zoom: 50%;" /><p>伪造的证书会被浏览器认定是非法的，此时用户不接受该证书就不会发生安全问题，接受了则存在安全风险。</p><h3 id="http10112030"><a class="markdownIt-Anchor" href="#http10112030"></a> HTTP1.0，1.1，2.0，3.0</h3>]]></content>
      
      
      <categories>
          
          <category> 八股 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java八股-并发编程篇</title>
      <link href="/posts/27654.html"/>
      <url>/posts/27654.html</url>
      
        <content type="html"><![CDATA[<h1 id="java八股-并发编程篇"><a class="markdownIt-Anchor" href="#java八股-并发编程篇"></a> Java八股-并发编程篇</h1><h2 id="基础"><a class="markdownIt-Anchor" href="#基础"></a> 基础</h2><h3 id="并行和并发区别"><a class="markdownIt-Anchor" href="#并行和并发区别"></a> 并行和并发区别</h3><p>并行是指多个处理器同时执行多个任务，同一时间多个任务同时进行</p><p>并发是指在单处理器上一个时间段内多个任务同时执行，但是某一时刻只有一个任务执行</p><h3 id="进程和线程"><a class="markdownIt-Anchor" href="#进程和线程"></a> 进程和线程</h3><ul><li>进程是CPU资源分配的最小单位，线程是CPU调度的最小单位</li><li>进程执行在线程中，一个进程可以拥有多个线程</li><li>进程之间的切换是耗时的，同一个进程间的线程进行切换很快</li><li>同一个进程内的线程共享进程中的资源</li><li>不同进程间的资源相互独立</li></ul><h2 id="线程创建方式"><a class="markdownIt-Anchor" href="#线程创建方式"></a> 线程创建方式</h2><ul><li>继承Thread类</li></ul><blockquote><p>Java不支持多继承，如果已经继承了其他类则不能使用该方法</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">ThreadExam</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"继承Thread创建线程..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ThreadExam</span> exam <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadExam</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        exam<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>实现Runnable接口</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">RunnableExam</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"实现Runnable接口创建线程..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">RunnableExam</span> exam <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RunnableExam</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>exam<span class="token punctuation">)</span><span class="token punctuation">;</span>        thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>实现Callable接口</li></ul><blockquote><p>可以结合FutureTask，通过get方法获取执行结果</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">CallableExam</span> <span class="token keyword">implements</span> <span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"实现Callable接口创建线程..."</span>"<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ExecutionException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">CallableExam</span> exam <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CallableExam</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">FutureTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> futureTask <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FutureTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>exam<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>futureTask<span class="token punctuation">)</span><span class="token punctuation">;</span>        thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>futureTask<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="为什么不直接调用线程的run方法而去执行start"><a class="markdownIt-Anchor" href="#为什么不直接调用线程的run方法而去执行start"></a> 为什么不直接调用线程的<strong>run()<strong>方法而去执行</strong>start()</strong></h3><p>通过调用**start()<strong>方法来告知JVM需要创建新的线程并准备好需要的资源，然后在新建线程中执行</strong>run()<strong>方法，直接调用</strong>run()**方法相当于只是调用了Thread中的一个普通方法，执行还是在主线程中。</p><h3 id="线程常用调度方法"><a class="markdownIt-Anchor" href="#线程常用调度方法"></a> 线程常用调度方法</h3><ul><li><p>wait()</p><p>A线程调用该方法将被阻塞挂起直到其他线程调用notify（notifyAll）或调用A线程的interrupt方法。其使用前提必须是在同步代码块中，并且当前线程拥有该对象的锁</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">synchronized</span> <span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token generics"><span class="token punctuation">&lt;</span>condition does not hold<span class="token punctuation">></span></span><span class="token punctuation">)</span>obj<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token comment">// Perform action appropriate to condition</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>wait(long timeout)</p><p>相比于wait方法，在指定时间超时后会自动返回</p></li><li><p>notify()</p><p>A线程调用该方法将随机唤醒阻塞在当前加锁变量上的一个线程，直到当前线程放弃当前锁，唤醒的线程可以正常地争抢该锁。使用前提也必须是在同步代码块中，并且由加锁对象执行调用。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">synchronized</span> <span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token generics"><span class="token punctuation">&lt;</span>condition does not hold<span class="token punctuation">></span></span><span class="token punctuation">)</span>obj<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token comment">// Perform action appropriate to condition</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>notifyAll()</p><p>相比于notify，该方法将唤醒所有阻塞在当前锁上的对象，使用条件相同</p></li><li><p>sleep(long millis)</p><p>暂时让出执行时间的执行权，但是获取的锁仍然保持，等到时间到了会继续获取CPU资源，然后正常运行。</p></li><li><p>yield()</p><p>Thread类的静态方法，一个线程调用yield后，表示当前线程请求让出CPU**（注意：不会释放锁，只是从运行状态转移到就绪状态）**</p></li><li><p>join()</p><p>A、B线程，B线程调用A.join()，此时B线程会进入阻塞队列，直到线程A运行结束或线程B中断。join方法会释放锁</p></li></ul><h3 id="线程状态"><a class="markdownIt-Anchor" href="#线程状态"></a> 线程状态</h3><table><thead><tr><th style="text-align:center">状态</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">NEW</td><td style="text-align:center">初始状态：线程被创建，但还没有调用 start()方法</td></tr><tr><td style="text-align:center">RUNNABLE</td><td style="text-align:center">运行状态：Java 线程将操作系统中的就绪和运行两种状态笼统的称作“运行”</td></tr><tr><td style="text-align:center">BLOCKED</td><td style="text-align:center">阻塞状态：表示线程阻塞于锁</td></tr><tr><td style="text-align:center">WAITING</td><td style="text-align:center">等待状态：表示线程进入等待状态，进入该状态表示当前线程需要等待其他线程做出一些特定动作（通知或中断）</td></tr><tr><td style="text-align:center">TIME_WAITING</td><td style="text-align:center">超时等待状态：该状态不同于 WAITIND，它是可以在指定的时间自行返回的</td></tr><tr><td style="text-align:center">TERMINATED</td><td style="text-align:center">终止状态：表示当前线程已经执行完毕</td></tr></tbody></table><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/javathread-7.png" alt="Java线程状态变化" /></p><h3 id="线程间通信方式"><a class="markdownIt-Anchor" href="#线程间通信方式"></a> 线程间通信方式</h3><ul><li>volatile和synchronized</li><li>等待/通知机制（wait、notify等）</li><li>管道输入/输出流</li><li>Thread.join()</li><li>ThreadLocal</li></ul><h2 id="threadlocal"><a class="markdownIt-Anchor" href="#threadlocal"></a> ThreadLocal</h2><h3 id="实现原理"><a class="markdownIt-Anchor" href="#实现原理"></a> 实现原理</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span><span class="token keyword">class</span> <span class="token class-name">Thread</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token class-name">ThreadLocal<span class="token punctuation">.</span>ThreadLocalMap</span> inheritableThreadLocals <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="set方法"><a class="markdownIt-Anchor" href="#set方法"></a> set方法</h4><p>每个线程都有一个ThreadLocalMap对象，在使用set方法时首先通过<strong>Thread.currentThread()<strong>获取当前线程，然后调用内部方法获取到当前线程的ThreadLocalMap对象，判断是否为空，为空则调用</strong>createMap</strong>方法直接创建并赋值；不为空则以当前ThreadLocal对象为key存储。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">T</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">Thread</span> t <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ThreadLocalMap</span> map <span class="token operator">=</span> <span class="token function">getMap</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>map <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token function">createMap</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ThreadLocalMap</span> <span class="token function">getMap</span><span class="token punctuation">(</span><span class="token class-name">Thread</span> t<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> t<span class="token punctuation">.</span>threadLocals<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">createMap</span><span class="token punctuation">(</span><span class="token class-name">Thread</span> t<span class="token punctuation">,</span> <span class="token class-name">T</span> firstValue<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>t<span class="token punctuation">.</span>threadLocals <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadLocalMap</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> firstValue<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="get方法"><a class="markdownIt-Anchor" href="#get方法"></a> get方法</h4><p>同样首先获取当前线程，然后获得线程中的ThreadLocalMap对象，判断是否为空，为空直接调用<strong>setInitialValue</strong>方法（与set方法相同，仅将value修改为null）；不为空则通过当前ThreadLocal对象获取value并返回。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Thread</span> t <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">ThreadLocalMap</span> map <span class="token operator">=</span> <span class="token function">getMap</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>map <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ThreadLocalMap<span class="token punctuation">.</span>Entry</span> e <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">getEntry</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>            <span class="token class-name">T</span> result <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span>e<span class="token punctuation">.</span>value<span class="token punctuation">;</span>            <span class="token keyword">return</span> result<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token function">setInitialValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="remove方法"><a class="markdownIt-Anchor" href="#remove方法"></a> remove方法</h4><p>通过<strong>getMap</strong>方法获取当前线程的ThreadLocalMap对象，非空则执行ThreadLocalMap内部<strong>remove</strong>方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token class-name">ThreadLocalMap</span> m <span class="token operator">=</span> <span class="token function">getMap</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>         m<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="threadlocalmap"><a class="markdownIt-Anchor" href="#threadlocalmap"></a> ThreadLocalMap</h3><p>ThreadLocalMap是ThreadLocal类的静态内部类，它是一个定制的哈希表，专门用于保存每个线程中的线程局部变量。</p><h4 id="entry"><a class="markdownIt-Anchor" href="#entry"></a> Entry</h4><p>Entry继承了弱引用<strong>WeakReference&lt;ThreadLocal&lt;?&gt;&gt;</strong>，value用于存储与特定ThreadLocal对象关联的值。因为Entry的key为弱引用，所以当ThreadLocal外部的强引用被置为null，则根据可达性分析，ThreadLocal将会在下次GC中被回收，此时ThreadLocalMap就会出现key为null的Entry，如果线程不结束则key为null的value会一直存在一条强引用链，导致无法回收造成内存泄漏。<strong>Thread Ref -&gt; Thread -&gt; ThreaLocalMap -&gt; Entry -&gt; value</strong></p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/ThreadLocal-01.png" alt="ThreadLocal各引用间的关系" /></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Entry</span> <span class="token keyword">extends</span> <span class="token class-name">WeakReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ThreadLocal</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Object</span> value<span class="token punctuation">;</span>    <span class="token class-name">Entry</span><span class="token punctuation">(</span><span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> k<span class="token punctuation">,</span> <span class="token class-name">Object</span> v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>        value <span class="token operator">=</span> v<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="set方法-2"><a class="markdownIt-Anchor" href="#set方法-2"></a> set方法</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> key<span class="token punctuation">,</span> <span class="token class-name">Object</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Entry</span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab <span class="token operator">=</span> table<span class="token punctuation">;</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token comment">// 获取当前key的hash值</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> key<span class="token punctuation">.</span>threadLocalHashCode <span class="token operator">&amp;</span> <span class="token punctuation">(</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 防止地址冲突</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Entry</span> e <span class="token operator">=</span> tab<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>         e <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>         e <span class="token operator">=</span> tab<span class="token punctuation">[</span>i <span class="token operator">=</span> <span class="token function">nextIndex</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 获取当前hash对应的Entry中的ThreadLocal对象</span>        <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> k <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 为当前key则直接更新</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">==</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token comment">// 为空则替换掉当前槽位的key，防止空值key导致的内存泄漏</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">replaceStaleEntry</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token comment">// 当前位置未被初始化过</span>    tab<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Entry</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> sz <span class="token operator">=</span> <span class="token operator">++</span>size<span class="token punctuation">;</span>    <span class="token comment">// 插入后再次清除一些key为null的“脏”entry,如果大于阈值就需要扩容</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">cleanSomeSlots</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> sz<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> sz <span class="token operator">>=</span> threshold<span class="token punctuation">)</span>        <span class="token function">rehash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="扩容"><a class="markdownIt-Anchor" href="#扩容"></a> 扩容</h4><p>ThreadLocalMap默认大小为16，阈值为2/3，超过阈值则准备扩容，首先会将key为null的entry的value设置为null便于垃圾回收，然后判断当前长度是否大于阈值的3/4，如果大于则进行扩容。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">INITIAL_CAPACITY</span> <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span><span class="token class-name">ThreadLocalMap</span><span class="token punctuation">(</span><span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> firstKey<span class="token punctuation">,</span> <span class="token class-name">Object</span> firstValue<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    table <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Entry</span><span class="token punctuation">[</span><span class="token constant">INITIAL_CAPACITY</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> firstKey<span class="token punctuation">.</span>threadLocalHashCode <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token constant">INITIAL_CAPACITY</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    table<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Entry</span><span class="token punctuation">(</span>firstKey<span class="token punctuation">,</span> firstValue<span class="token punctuation">)</span><span class="token punctuation">;</span>    size <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">setThreshold</span><span class="token punctuation">(</span><span class="token constant">INITIAL_CAPACITY</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">setThreshold</span><span class="token punctuation">(</span><span class="token keyword">int</span> len<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    threshold <span class="token operator">=</span> len <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">rehash</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">expungeStaleEntries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 清理完key为null的Entry后长度仍大于阈值的3/4则进行扩容</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">>=</span> threshold <span class="token operator">-</span> threshold <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">)</span>        <span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="remove方法-2"><a class="markdownIt-Anchor" href="#remove方法-2"></a> remove方法</h4><p>首先获取当前ThreadLocal对应的key，然后执行clear方法，然后向后清理脏Entry数据</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Entry</span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab <span class="token operator">=</span> table<span class="token punctuation">;</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> key<span class="token punctuation">.</span>threadLocalHashCode <span class="token operator">&amp;</span> <span class="token punctuation">(</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Entry</span> e <span class="token operator">=</span> tab<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>         e <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>         <span class="token comment">// 哈希碰撞</span>         e <span class="token operator">=</span> tab<span class="token punctuation">[</span>i <span class="token operator">=</span> <span class="token function">nextIndex</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 从该hash值对应索引向后开始查询，因为与当前索引发生碰撞后只会向后赋值</span>            <span class="token comment">// 清除掉当前key后向后查询已有的key是否是通过rehash得到的，判断获取到的ThreadLocal是否为null，如果是则清除，</span>            <span class="token comment">// 不是则重新进行hash计算并赋值，直到下一个槽位为null</span>            <span class="token function">expungeStaleEntry</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 发生哈希碰撞，线性向后查询</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">nextIndex</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> len<span class="token punctuation">)</span> <span class="token operator">?</span> i <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> threadLocalHashCode <span class="token operator">=</span> <span class="token function">nextHashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 初始为0</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">AtomicInteger</span> nextHashCode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 增长步长</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">HASH_INCREMENT</span> <span class="token operator">=</span> <span class="token number">0x61c88647</span><span class="token punctuation">;</span><span class="token comment">// 获取下一个hash值</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">nextHashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> nextHashCode<span class="token punctuation">.</span><span class="token function">getAndAdd</span><span class="token punctuation">(</span><span class="token constant">HASH_INCREMENT</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="java内存模型"><a class="markdownIt-Anchor" href="#java内存模型"></a> Java内存模型</h2><p>线程之间的共享变量存储在<code>主内存</code>（Main Memory）中，每个线程都有一个私有的<code>本地内存</code>（Local Memory），本地内存中存储了共享变量的副本，用来进行线程内部的读写操作。</p><ul><li>当一个线程更改了本地内存中共享变量的副本后，它需要将这些更改刷新到主内存中，以确保其他线程可以看到这些更改</li><li>当一个线程需要读取共享变量时，它可能首先从本地内存中读取。如果本地内存中的副本是过时的，线程将从主内存中重新加载共享变量的最新值到本地内存中</li></ul><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/jmm-f02219aa-e762-4df0-ac08-6f4cceb535c2.jpg" alt="深入浅出 Java 多线程：Java内存模型" /></p><h3 id="原子性-可见性-有序性"><a class="markdownIt-Anchor" href="#原子性-可见性-有序性"></a> 原子性、可见性、有序性</h3><blockquote><p>JMM通过内存屏障来实现内存的可见性以及禁止重排序</p></blockquote><p>指令重排序规则：</p><ul><li><p>happens-before</p></li><li><p>as-if-serial</p></li></ul><h3 id="synchronized"><a class="markdownIt-Anchor" href="#synchronized"></a> synchronized</h3><blockquote><p>synchronized可以修饰<code>普通方法</code>（相当于对当前对象加锁）、<code>静态方法</code>（相当于对当前类加锁）、<code>代码块</code>（显式的指定对谁加锁）</p></blockquote><h4 id="synchronized特性"><a class="markdownIt-Anchor" href="#synchronized特性"></a> synchronized特性</h4><ul><li><p>互斥</p></li><li><p>刷新内存（和volatile类似）</p></li><li><p>可重入</p></li><li><p>非公平锁</p></li></ul><h4 id="synchronized原理"><a class="markdownIt-Anchor" href="#synchronized原理"></a> synchronized原理</h4><p>1、synchronized修饰代码块时，JVM采用<code>monitorenter</code>、<code>monitorexit</code>两个指令来实现同步，<code>monitorenter</code>指令指向同步代码块的开始位置，<code>monitorexit</code>指令指向同步代码块的结束位置。</p><p>2、synchronized 修饰同步方法时，JVM 采用<code>ACC_SYNCHRONIZED</code>标记符来实现同步，这个标识指明了该方法是一个同步方法。</p><p>monitorenter、monitorexit 或者 ACC_SYNCHRONIZED 都是<strong>基于 Monitor 实现</strong>的。在 Java 虚拟机（HotSpot）中，Monitor 是由<strong>ObjectMonitor 实现</strong>的，可以叫做内部锁，或者 Monitor 锁。</p><p>ObjectMonitor：</p><ul><li>两个队列_WaitSet、_EntryList，分别用来保存wait状态和block状态线程</li><li>_owner，获取到Monitor对象的线程进入_owner区时，_count+1，线程调用wait方法则会释放Monitor对象，_owner 恢复为空， _count - 1。同时该等待线程进入 _WaitSet 中，等待被唤醒。同时每进入一次_count都会加一，从而实现了synchronized的可重入特性。</li></ul><h4 id="锁级别"><a class="markdownIt-Anchor" href="#锁级别"></a> 锁级别</h4><table><thead><tr><th>锁</th><th>优点</th><th>缺点</th><th>使用场景</th></tr></thead><tbody><tr><td>偏向锁</td><td>加锁和解锁不需要额外的消耗，和执行非同步方法比仅存在纳秒级的差距。</td><td>如果线程间存在锁竞争，会带来额外的锁撤销的消耗。</td><td>适用于只有一个线程访问同步块场景。</td></tr><tr><td>轻量级锁</td><td>竞争的线程不会阻塞，提高了程序的响应速度。</td><td>如果始终得不到锁竞争的线程使用自旋会消耗 CPU。</td><td>追求响应时间。同步块执行速度非常快。</td></tr><tr><td>重量级锁</td><td>线程竞争不使用自旋，不会消耗 CPU。</td><td>线程阻塞，响应时间缓慢。</td><td>追求吞吐量。同步块执行时间较长。</td></tr></tbody></table><h4 id="偏向锁"><a class="markdownIt-Anchor" href="#偏向锁"></a> 偏向锁</h4><p>线程第一次进入同步块时，会在对象头和栈帧中的锁记录里存储锁偏向的线程 ID。当下次该线程进入这个同步块时，会去检查锁的 Mark Word 里面是不是放的自己的线程 ID。</p><p>如果是，表明该线程已经获得锁了，以后该线程在进入和退出同步代码块时不需要花费CAS操作来加锁和解锁</p><p>如果不是，就代表有另一个线程来竞争这个偏向锁。这个时候会尝试使用 CAS 来替换 Mark Word 里面的线程 ID 为新线程的 ID。</p><ul><li>成功：表示之前的线程不存在了， Mark Word 里面的线程 ID 为新线程的 ID，锁不会升级，仍然为偏向锁；</li><li>失败：表示之前的线程仍然存在，那么暂停之前的线程，设置偏向锁标识为 0，并设置锁标志位为 00，升级为轻量级锁，会按照轻量级锁的方式进行竞争锁。</li></ul><h4 id="轻量级锁"><a class="markdownIt-Anchor" href="#轻量级锁"></a> 轻量级锁</h4><p>多个线程在不同时间段获取同一把锁，不存在锁竞争的情况，也就没有线程阻塞。针对这种情况，JVM 采用轻量级锁来避免线程的阻塞与唤醒。</p><h4 id="重量级锁"><a class="markdownIt-Anchor" href="#重量级锁"></a> 重量级锁</h4><p>重量级锁依赖于操作系统的互斥锁（mutex，用于保证任何给定时间内，只有一个线程可以执行某一段特定的代码段） 实现，而操作系统中线程间状态的转换需要相对较长的时间，所以重量级锁效率很低，但被阻塞的线程不会消耗 CPU。</p><h4 id="锁升级过程"><a class="markdownIt-Anchor" href="#锁升级过程"></a> 锁升级过程</h4><ul><li>检查MarkWord中存放的是不是自己的ThreadId，如果是则表示当前线程处于偏向锁状态</li><li>如果不是自己的ThreadId，锁升级，此时通过CAS来执行切换，新的线程根据MarkWord里现有的ThreadId，通知之前线程暂停，之前线程将MarkWord中的内容置空</li><li>两个线程都把锁对象的 HashCode 复制到自己新建的用于存储锁的记录空间，接着开始通过 CAS 操作，把锁对象的 MarkWord 的内容修改为自己新建的记录空间的地址的方式竞争 MarkWord</li><li>成功执行 CAS 的获得资源，失败的则进入自旋</li><li>自旋的线程在自旋过程中，成功获得资源(即之前获的资源的线程执行完成并释放了共享资源)，则整个状态依然处于轻量级锁的状态，如果自旋失败</li><li>进入重量级锁的状态，这个时候，自旋的线程进行阻塞，等待之前线程执行完成并唤醒自己</li></ul><blockquote><p>注：一个对象在调用原生<code>hashCode</code>方法后（<code>来自Object的，未被重写过的</code>），<strong>该对象将无法进入偏向锁状态，起步就会是轻量级锁</strong>。若<code>hashCode</code>方法的调用是在对象已经处于偏向锁]状态时调用，<strong>它的偏向状态会被立即撤销，并且锁会升级为重量级锁。</strong></p></blockquote><h4 id="synchronized锁对象"><a class="markdownIt-Anchor" href="#synchronized锁对象"></a> synchronized锁对象</h4><blockquote><p>synchronized锁住的是对象，如果锁住的这个对象在多线程中相同，那么这些线程访问synchronized修饰的代码块时总是互斥的。但是如果锁住的这个对象在多线程中是不同的，那么这些线程访问synchronized修饰的代码块时不会互斥的。</p></blockquote><ul><li><p>对象锁</p><p>如果时同一个实例，就会按照顺序访问，如果时不同实例，就可以同时访问</p><ul><li>锁非静态变量</li><li>锁this对象</li><li>锁非静态方法</li></ul></li><li><p>类锁</p><p>所有实例按照顺序访问</p><ul><li>锁静态变量</li><li>锁类的class</li><li>锁静态方法</li></ul></li></ul><h3 id="volatile"><a class="markdownIt-Anchor" href="#volatile"></a> volatile</h3><blockquote><p>volatile可以保证可见性但是不保证原子性</p></blockquote><ul><li>当写一个<code>volatile</code>变量时，JMM会把该线程在本地内存中的变量强制刷新到主内存中</li><li>这个写操作会导致其他线程中的<code>volatile</code>变量缓存无效</li></ul><p><code>volatile</code>会禁止指令重排，当使用<code>volatile</code>修饰变量时，JMM会插入内存屏障来确保以下两点：</p><ul><li>写屏障（Write Barrier）：当一个 volatile 变量被写入时，写屏障确保在该屏障之前的所有变量的写入操作都提交到主内存</li><li>读屏障（Read Barrier）：当读取一个 volatile 变量时，读屏障确保在该屏障之后的所有读操作都从主内存中读取</li></ul><h3 id="reentrantlock"><a class="markdownIt-Anchor" href="#reentrantlock"></a> ReentrantLock</h3><blockquote><p><code>ReentrantLock</code>是可重入的独占锁，只能由一个线程可以获取该锁，其他获取该锁的线程会被阻塞。</p></blockquote><p>ReentrantLock加锁和解锁过程：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 创建非公平锁（默认创建的是非公平锁，传入参数true创建公平锁）</span><span class="token class-name">ReentrantLock</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获取锁操作</span>lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 执行代码逻辑</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// ...</span><span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 解锁操作</span>    lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="公平锁和非公平锁"><a class="markdownIt-Anchor" href="#公平锁和非公平锁"></a> 公平锁和非公平锁</h4><ul><li>公平锁意味着在多个线程竞争锁时，获取锁的顺序与线程请求的顺序相同，即先来先服务（FIFO）。虽然能保证锁的顺序，但是需要额外维护一个有序队列</li><li>非公平锁不保证线程获取锁的顺序，当锁被释放时，任何请求锁的线程都有机会获取锁，而不是按照请求的顺序。</li></ul><h4 id="synchronized和reentrantlock"><a class="markdownIt-Anchor" href="#synchronized和reentrantlock"></a> synchronized和ReentrantLock</h4><p>synchronized是一个关键字，而Lock属于一个接口</p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/javathread-38.png" alt="三分恶面渣逆袭：synchronized和ReentrantLock的区别" /></p><ul><li><p>使用方式不同</p><p>synchronized可以直接在方法上加锁，也可以在代码块上加锁（不需要手动释放锁，锁会自动释放），而ReentrantLock必须手动声明来加锁和释放锁</p></li><li><p>功能特点不同</p><p>如果需要更细粒度的控制（如可中断的锁操作、尝试非阻塞获取锁、超时获取锁或者使用公平锁等），可以使用 Lock</p></li></ul><h3 id="aqs"><a class="markdownIt-Anchor" href="#aqs"></a> AQS</h3><blockquote><p>AQS，全称是 AbstractQueuedSynchronizer，中文意思是抽象队列同步器。AQS 的思想是，如果被请求的共享资源空闲，则当前线程能够成功获取资源；否则，它将进入一个等待队列，当有其他线程释放资源时，系统会挑选等待队列中的一个线程，赋予其资源。</p></blockquote><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/javathread-39.png" alt="三分恶面渣逆袭：AQS抽象队列同步器" /></p><ul><li><p>同步状态state由volatile修饰，保证多线程之间的可见性</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">int</span> state<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>同步队列时通过内部定义的Node类来实现的，每个Node包含等待状态、前后节点、线程的引用等</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 表示该结点（对应的线程）已被取消</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">CANCELLED</span> <span class="token operator">=</span>  <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment">// 表示后继结点（对应的线程）需要被唤醒</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">SIGNAL</span>    <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment">// 表示该结点（对应的线程）在等待某一条件</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">CONDITION</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span>    <span class="token comment">// 表示有资源可用，新head结点需要继续唤醒后继结点</span>    <span class="token comment">// （共享模式下，多线程并发释放资源，而head唤醒其后继结点后，需要把多出来的资源留给后面的结点；</span>    <span class="token comment">// 设置新的head结点时，会继续唤醒其后继结点）</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">PROPAGATE</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">;</span>    <span class="token keyword">volatile</span> <span class="token class-name">Node</span> prev<span class="token punctuation">;</span>    <span class="token keyword">volatile</span> <span class="token class-name">Node</span> next<span class="token punctuation">;</span>    <span class="token keyword">volatile</span> <span class="token class-name">Thread</span> thread<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>两种同步方式</p><ul><li>独占模式（Exclusive）：资源是独占的，一次只能有一个线程获取，如ReentrantLock。</li><li>共享模式（Share）：同时可以被多个线程获取，具体的资源个数可以通过参数指定，如Semaphore、CountDownLatch</li></ul></li></ul><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/view" alt="preview" /></p><h4 id="加锁"><a class="markdownIt-Anchor" href="#加锁"></a> 加锁</h4><p><code>ReentrantLock.lock()</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    sync<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">abstract</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Sync</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractQueuedSynchronizer</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>sync是一个静态内部类，继承AQS，有两个实现NofairSync(非公平锁)，FailSync(公平锁)</p><p><code>NonfairSync.lock</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 通过cas操作来修改state状态，表示争抢锁的操作</span>      <span class="token function">setExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 设置当前获得锁状态的线程</span>    <span class="token keyword">else</span>      <span class="token function">acquire</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//尝试去获取锁</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>acquire</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">acquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">tryAcquire</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>        <span class="token function">acquireQueued</span><span class="token punctuation">(</span><span class="token function">addWaiter</span><span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token punctuation">.</span><span class="token constant">EXCLUSIVE</span><span class="token punctuation">)</span><span class="token punctuation">,</span> arg<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token function">selfInterrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于是非公平锁，所以调用lock方法时，先通过cas去抢占锁，如果抢占锁成功则保存获得锁成功的当前线程，否则调用acquire来走锁竞争逻辑。通过tryAcquire尝试获取独占锁，如果成功返回true，失败返回false，如果tryAcquire失败则会通过addWaiter方法将当前线程封装成Node添加到AQS队列尾部；acquireQueued将Node作为参数，通过自旋去尝试获取锁</p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/aqs-a0689bb2-9b18-419d-9617-6d292fbd439d.jpg" alt="acquire流程" /></p><h4 id="释放锁"><a class="markdownIt-Anchor" href="#释放锁"></a> 释放锁</h4><p><code>ReentrantLock.unlock</code></p><p>首先释放锁然后唤醒park的线程</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    sync<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">release</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">tryRelease</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Node</span> h <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>h <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> h<span class="token punctuation">.</span>waitStatus <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token function">unparkSuccessor</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="cas"><a class="markdownIt-Anchor" href="#cas"></a> CAS</h3><p>CAS（Compare-and-Swap）是一种乐观锁的实现方式，全称为“比较并交换”，是一种无锁的原子操作。</p><p>在CAS中有三个值：V（要更新的变量）、E（预期值）、N（新值），比较并交换的过程如下：判断V是否等于E，如果等于，将V的值设置为N；如果不等，说明已经有其他线程更新了V，于是当前线程放弃更新，什么也不做。</p><p>当多个线程同时使用CAS操作一个变量时，只有一个会胜出，并成功更新，其余均会失败，但失败的线程并不会被挂起，仅是被告知失败，并且允许再次尝试，当然也允许失败的线程放弃操作。</p><h4 id="cas三大问题"><a class="markdownIt-Anchor" href="#cas三大问题"></a> CAS三大问题</h4><ul><li><p>ABA问题</p><p>一个值原来是A，变成了B，又变回了A，这个时候CAS检查不出来。（栈顶元素判断）</p><p>追加版本号或时间戳</p></li><li><p>长时间自旋</p><p>CAS长时间自旋不成功会占用大量CPU资源</p></li><li><p>多个共享变量的原子操作</p><p>当对一个共享变量执行操作时，CAS 能够保证该变量的原子性。但是对于多个共享变量，CAS 就无法保证操作的原子性，这时通常有两种做法：</p><ol><li>使用<code>AtomicReference</code>类保证对象之间的原子性，把多个变量放到一个对象里面进行 CAS 操作；</li><li>使用锁。锁内的临界区代码可以保证只有当前线程能操作。</li></ol></li></ul><h3 id="线程死锁"><a class="markdownIt-Anchor" href="#线程死锁"></a> 线程死锁</h3><ul><li>互斥条件</li><li>请求并持有</li><li>不可剥夺条件</li><li>循环等待条件</li></ul><h3 id="线程同步"><a class="markdownIt-Anchor" href="#线程同步"></a> 线程同步</h3><ul><li>互斥量</li><li>读写锁</li><li>条件变量</li><li>自旋锁</li><li>信号量</li></ul><h2 id="线程池"><a class="markdownIt-Anchor" href="#线程池"></a> 线程池</h2><blockquote><p>线程池其实是一种池化的技术实现，池化技术的核心思想就是实现资源的复用，避免资源的重复创建和销毁带来的性能开销。线程池可以管理一堆线程，让线程执行完任务之后不进行销毁，而是继续去处理其它线程已经提交的任务。</p></blockquote><h3 id="线程池参数"><a class="markdownIt-Anchor" href="#线程池参数"></a> 线程池参数</h3><ul><li><p><strong>corePoolSize</strong>：核心线程数</p><p>线程池中核心线程数量，即使这些线程处于空闲状态也不会被回收。</p></li><li><p><strong>maximumPoolSize</strong>：最大线程数</p><p>线程池允许的最大线程数量。当工作队列满了之后，线程池会创建新线程来处理任务，直到线程数达到这个最大值。</p></li><li><p><strong>keepAliveTime</strong>：非核心线程存活时间</p><p>非核心线程的空闲存活时间。如果线程池中的线程数量超过了 corePoolSize，那么这些多余的线程在空闲时间超过 keepAliveTime 时会被终止。</p></li><li><p><strong>unit</strong>：非核心线程存活时间单位</p></li><li><p><strong>workQueue</strong>：等待队列</p><p>用于存放待处理任务的阻塞队列。当所有核心线程都忙时，新任务会被放在这个队列里等待执行。</p><ul><li>ArrayBlockingQueue：有界的先进先出的阻塞队列，底层是数组，适合固定大小的线程池</li><li>LinkedBlockingQueue：底层数据结构时链表，不指定大小默认是Integer.MAX_VALUE，相当于一个无界队列</li><li>PriorityBlockingQueue：支持优先队列排序的无界阻塞队列。任务按照其自然顺序或通过构造器给定的Comparator来排序</li><li>DelayQueue：由二叉堆实现的无界优先级阻塞队列</li><li>SynchronousQueue：实际上它不是一个真正的队列，因为没有容量。每个插入操作必须等待另一个线程的移除操作，同样任何一个移除操作都必须等待另一个线程的插入操作</li></ul></li><li><p><strong>threadFactory</strong>：创建线程使用工厂</p></li><li><p><strong>handler</strong>：饱和拒绝策略</p><p>定义了当线程池和工作队列都满了之后对新提交的任务的处理策略。</p><ul><li>AbortPolicy：默认拒绝策略。抛出异常</li><li>CallerRunsPolicy：不抛出异常，会让提交任务的线程自己来执行任务</li><li>DiscardOldestPolicy：丢弃队列中最老的一个任务（在队列中等待最久的任务）</li><li>DiscardPolicy：直接丢弃该任务</li></ul></li></ul><h3 id="常见线程池"><a class="markdownIt-Anchor" href="#常见线程池"></a> 常见线程池</h3><ul><li><p>newFixedThreadPool (固定数目线程的线程池)</p><p>核心线程数和最大线程数相同，阻塞队列为无界队列LinkedBlockingQueue，容易造成OOM</p></li><li><p>newCachedThreadPool (可缓存线程的线程池)</p><p>核心线程数为0，最大线程数为Integer.MAX_VALUE，可能无限创建线程导致OOM，阻塞队列为SynchronousQueue，非核心线程空闲存活时间为60秒</p></li><li><p>newSingleThreadExecutor (单线程的线程池)</p><p>核心线程数和最大线程数都为1，阻塞队列为无界队列LinkedBlockingQueue，可能导致OOM</p></li><li><p>newScheduledThreadPool (定时及周期执行的线程池)</p><p>最大线程数为Integer.MAX_VALUE，有OOM风险，阻塞队列为DelayedWorkQueue</p></li></ul><h3 id="动态调节参数"><a class="markdownIt-Anchor" href="#动态调节参数"></a> 动态调节参数</h3><ul><li>利用配置中心配置线程池参数，监听修改后通过对应的<strong>set方法</strong>重新配置线程池</li><li>自己实现线程池，监听参数变化，根据实际业务需求更改对应参数</li></ul><h2 id="并发容器"><a class="markdownIt-Anchor" href="#并发容器"></a> 并发容器</h2><h3 id="concurrenthashmap"><a class="markdownIt-Anchor" href="#concurrenthashmap"></a> ConcurrentHashMap</h3><p>在JDK7时采用分段锁机制（Segment Locking），整个Map被分为若干段，每个段都可以独立地加锁，因此不同线程可以同时操作不同的段从而实现并发访问。</p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/map-20230816155810.png" alt="初念初恋：JDK 7 ConcurrentHashMap" /></p><p>在 JDK 8 及以上版本中，ConcurrentHashMap 的实现进行了优化，不再使用分段锁，而是使用了一种更加精细化的锁——桶锁，以及 CAS 无锁算法。每个桶（Node 数组的每个元素）都可以独立地加锁，从而实现更高级别的并发访问。</p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/map-20230816155924.png" alt="初念初恋：JDK 8 ConcurrentHashMap" /></p><p>同时，对于读操作，通常不需要加锁，可以直接读取，因为 ConcurrentHashMap 内部使用了 volatile 变量来保证内存可见性。</p><p>对于写操作，ConcurrentHashMap 使用 CAS 操作来实现无锁的更新，这是一种乐观锁的实现，因为它假设没有冲突发生，在实际更新数据时才检查是否有其他线程在尝试修改数据，如果有，采用悲观的锁策略，如 synchronized 代码块来保证数据的一致性。</p><h3 id="hashtable"><a class="markdownIt-Anchor" href="#hashtable"></a> Hashtable</h3><p>Hashtable 在任何时刻只允许一个线程访问整个 Map，通过对整个 Map 加锁来实现线程安全。而 ConcurrentHashMap（尤其是在 JDK 8 及之后版本）通过锁分离和 CAS 操作实现更细粒度的锁定策略，允许更高的并发。</p><h3 id="copyonwritearraylist"><a class="markdownIt-Anchor" href="#copyonwritearraylist"></a> CopyOnWriteArrayList</h3><p>CopyOnWriteArrayList 是一个线程安全的 ArrayList，它遵循写时复制（Copy-On-Write）的原则，即在写操作时，会先复制一个新的数组，然后在新的数组上进行写操作，写完之后再将原数组引用指向新数组。</p>]]></content>
      
      
      <categories>
          
          <category> 八股 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 并发编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java八股-MySQL篇</title>
      <link href="/posts/43973.html"/>
      <url>/posts/43973.html</url>
      
        <content type="html"><![CDATA[<h1 id="java八股-mysql篇"><a class="markdownIt-Anchor" href="#java八股-mysql篇"></a> Java八股-MySQL篇</h1><h2 id="mysql优化"><a class="markdownIt-Anchor" href="#mysql优化"></a> MySQL优化</h2><h3 id="如何定位慢查询"><a class="markdownIt-Anchor" href="#如何定位慢查询"></a> 如何定位慢查询</h3><blockquote><p>聚合查询、多表查询、表数据量过大查询、深度分页查询</p></blockquote><ul><li>开源工具<ul><li>调试工具：Arthas</li><li>运维工具：Prometheus、Skywalking</li></ul></li><li>MySQL自带慢查询日志（slow_query_log、long_query_time）</li></ul><h3 id="如何分析慢查询"><a class="markdownIt-Anchor" href="#如何分析慢查询"></a> 如何分析慢查询</h3><p><strong>explain</strong>或者<strong>desc</strong>获取MySQL如何执行select语句的信息</p><ul><li>possible_keys：当前sql可能用到的索引</li><li>key：当前sql实际命中的索引</li><li>key_len：索引占用的大小</li><li>type：sql连接的类型，NULL、system、const、eq_ref、ref、range、index、all</li></ul><h3 id="什么是索引"><a class="markdownIt-Anchor" href="#什么是索引"></a> 什么是索引</h3><blockquote><p>索引是帮助MySQL高效获取数据的数据结构（有序）</p></blockquote><p>采用B+树作为数据结构存储索引</p><ul><li>阶数更多。路径更短</li><li>磁盘读写代价B+树更低，非叶子结点只存储指针，叶子结点存储数据</li><li>B+树便于扫库和区间查询，叶子结点是一个双向链表</li></ul><h3 id="聚簇索引非聚簇索引会回表查询覆盖索引"><a class="markdownIt-Anchor" href="#聚簇索引非聚簇索引会回表查询覆盖索引"></a> 聚簇索引？非聚簇索引？会回表查询？覆盖索引？</h3><ul><li>聚簇索引：数据和索引放一块，B+树的叶子结点保存整行数据，有且只有一个</li><li>非聚簇索引（二级索引）：数据和索引分开存储，B+树的叶子结点保存对应的主键，可以有多个</li><li>回表查询：通过二级索引找到对应的主键值，到聚簇索引中查找整行数据</li><li>覆盖索引：查询使用了索引，并且需要返回的列在该索引中已经全部能够找到</li></ul><h3 id="mysql超大分页处理"><a class="markdownIt-Anchor" href="#mysql超大分页处理"></a> MySQL超大分页处理</h3><blockquote><p>在数据量比较大时，如果进行limit分页查询，在查询时越往后分页查询效率越低</p></blockquote><p>优化思路：一般分页查询时，通过创建覆盖索引能够比较好地提升性能，可以通过覆盖索引加子查询形式优化。</p><p>超大分页一般都是在数据量比较大时，我们使用limit分页查询，并且需要对数据进行排序，这个时候效率就很低，我们可以采用覆盖索引+子查询来解决。</p><p>先分页查询数据id字段，确定了id之后又，再用子查询来过滤，只查询这个id列表中的数据就可以了，因为查询id的时候，走的覆盖索引，所以效率可以提升很多。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select * from User_table a,(select id from User_table order by id limit 1000000,10) b where a.id &#x3D; b.id<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="索引创建原则"><a class="markdownIt-Anchor" href="#索引创建原则"></a> 索引创建原则</h3><ul><li><strong>针对数据量较大，且查询比较频繁的表建立索引（10w）</strong></li><li><strong>针对常作为查询条件（where）、排序（order by）、分组（group by）操作的字段建立索引</strong></li><li>选择区分度高的列作为索引，尽量建立唯一索引，区分度越高，使用索引的效率越高</li><li>如果是字符串类型的字段，字段的长度较长，可以针对于字段的特点，建立前缀索引</li><li><strong>尽量使用联合索引，减少单列索引，查询时联合索引很多时候可以使用覆盖索引，节省存储空间，避免回表，提高查询效率</strong></li><li><strong>控制索引数量，影响增删改效率</strong></li><li>如果索引列不能存储NULL，创建表时使用NOT NULL约束，优化器知道每列是否包含NULL值时，可以更好地确定哪个索引更有效地用于查询</li></ul><h3 id="索引失效"><a class="markdownIt-Anchor" href="#索引失效"></a> 索引失效</h3><blockquote><p>联合索引：（a，b，c）</p></blockquote><ul><li><p>违反最左前缀法则</p><p>a=A，c=C时会只使用a索引</p></li><li><p>范围查询右边的列不能使用索引</p><p>a=A，b&gt;B时用不到c索引</p></li><li><p>索引列上进行运算操作</p><p>类似substring(a, 0, 2)，索引失效</p></li><li><p>字符串不加单引号</p><p>查询时，没有对字符串加单引号，MySQL的查询优化器会自动进行类型转换造成索引失效</p></li><li><p>模糊查询</p><p>%like会失效，like%不会</p></li></ul><h3 id="sql优化"><a class="markdownIt-Anchor" href="#sql优化"></a> sql优化</h3><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20240521161345554.png" alt="image-20240521161345554" /></p><h2 id="事务"><a class="markdownIt-Anchor" href="#事务"></a> 事务</h2><h3 id="事务特性"><a class="markdownIt-Anchor" href="#事务特性"></a> 事务特性</h3><blockquote><p>ACID；原子性、一致性、隔离性、持久性</p></blockquote><h3 id="并发事务带来了哪些问题"><a class="markdownIt-Anchor" href="#并发事务带来了哪些问题"></a> 并发事务带来了哪些问题</h3><blockquote><p>脏读：一个事务读到另一个事务还没提交的数据</p><p>不可重复度：一个事务先后读取同一条数据，但是两次读取数据不同</p><p>幻读：一个事务按照条件查询数据时，没有对应的数据行，但是插入数据时又发现这行数据已经存在</p></blockquote><h4 id="隔离级别"><a class="markdownIt-Anchor" href="#隔离级别"></a> 隔离级别：</h4><table><thead><tr><th style="text-align:center">隔离级别</th><th style="text-align:center">脏读</th><th style="text-align:center">不可重复读</th><th style="text-align:center">幻读</th></tr></thead><tbody><tr><td style="text-align:center">Read uncommitted 读未提交</td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center">√</td></tr><tr><td style="text-align:center">Read committed 读已提交</td><td style="text-align:center">×</td><td style="text-align:center">√</td><td style="text-align:center">√</td></tr><tr><td style="text-align:center">Repeatable Read 可重复度</td><td style="text-align:center">×</td><td style="text-align:center">×</td><td style="text-align:center">√</td></tr><tr><td style="text-align:center">Serializable 串行化</td><td style="text-align:center">×</td><td style="text-align:center">×</td><td style="text-align:center">×</td></tr></tbody></table><h3 id="undo-log和redo-log"><a class="markdownIt-Anchor" href="#undo-log和redo-log"></a> undo log和redo log</h3><ul><li>缓冲池（buffer pool）：主内存中的一个区域，里面可以缓存磁盘上经常操作的真实数据，增删改查时先操作缓冲池中的数据（没有就从磁盘上加载并缓存），以一定频率刷新到磁盘，从而减少磁盘IO，加快处理速度</li><li>数据页（page）：是InnoDB存储引擎磁盘管理的最小单元，每个页大小默认为16KB，页中存储的是行数据</li></ul><h4 id="redo-log"><a class="markdownIt-Anchor" href="#redo-log"></a> redo log</h4><p>重做日志，记录的是事务提交时数据页的物理修改，是<strong>用来实现事务的持久性</strong></p><p>该文件由两部分组成：重做日志缓冲（redo log buffer）以及重做日志文件（redo log file），前者在内存中，后者在磁盘中。当事务提交之后会把所有修改信息都存在该日志文件中，用于在刷新脏页到磁盘发生错误时进行数据恢复使用。</p><h4 id="undo-log"><a class="markdownIt-Anchor" href="#undo-log"></a> undo log</h4><p>回滚日志，用于记录数据被修改前的信息，作用包含两个：<strong>提供回滚</strong>和<strong>MVCC</strong>。undo log和redo log记录物理日志不一样，它是<strong>逻辑日志</strong>。</p><ul><li>delete一条记录时，undo log中会记录一条对应的insert记录，反之亦然</li><li>update一条数据时，记录一条相反的update记录</li></ul><p><strong>undo log可以实现事务的一致性和原子性</strong></p><h4 id="redo-log和undo-log区别"><a class="markdownIt-Anchor" href="#redo-log和undo-log区别"></a> redo log和undo log区别</h4><ul><li>redo log记录的是数据页的物理变化，服务器宕机可以用来同步数据</li><li>undo log记录的是逻辑日志，当事务回滚时通过逆操作恢复原来数据</li><li>redo log保证事务持久性，undo log保证事务原子性和一致性</li></ul><h3 id="mvcc多版本并发控制"><a class="markdownIt-Anchor" href="#mvcc多版本并发控制"></a> MVCC（多版本并发控制）</h3><h4 id="实现原理"><a class="markdownIt-Anchor" href="#实现原理"></a> 实现原理</h4><ul><li><p>记录中的隐藏字段</p><table><thead><tr><th style="text-align:center">隐藏字段</th><th style="text-align:center">含义</th></tr></thead><tbody><tr><td style="text-align:center">DB_TRX_ID</td><td style="text-align:center">最近一次修改事务ID，记录插入这条记录或最后一次修改该记录的事务ID</td></tr><tr><td style="text-align:center">DB_ROLL_PTR</td><td style="text-align:center">回滚指针，指向这条记录的上一个版本，用于配合undo log，指向上个版本</td></tr><tr><td style="text-align:center">DB_ROW_ID</td><td style="text-align:center">隐藏主键，如果表结构没有指定主键，将会生成该隐藏字段</td></tr></tbody></table></li><li><p>undo log</p><p>当insert时产生的undo log日志只在回滚时需要，在事务提交后可被立即删除</p><p>update、delete的时候产生的undo log日志不仅回滚时需要，mvcc版本访问时也需要，不会立即删除</p></li><li><p>undo log版本链</p><p>不同事务或相同事务对同一条记录进行修改，会导致该记录的undo log生成一条记录版本链表，链表的头部是最新的旧记录，链表尾部是最早的记录</p></li><li><p>readview</p><p>ReadView（视图读）是<strong>快照读</strong>SQL执行时MVCC提取数据的依赖，记录并维护系统当前活跃的事务（未提交）id</p><table><thead><tr><th style="text-align:center">字段</th><th style="text-align:center">含义</th></tr></thead><tbody><tr><td style="text-align:center">m_ids</td><td style="text-align:center">当前活跃的事务ID集合</td></tr><tr><td style="text-align:center">min_trx_id</td><td style="text-align:center">最小活跃事务ID</td></tr><tr><td style="text-align:center">max_trx_id</td><td style="text-align:center">预分配事务ID，当前最大事务ID+1</td></tr><tr><td style="text-align:center">creator_trx_id</td><td style="text-align:center">ReadView创建者的事务ID</td></tr></tbody></table><p><strong>RC隔离级别下，在事务中每一次执行快照读时生成ReadView</strong></p><p><strong>RR隔离级别下，仅在事务第一次执行快照读时生成ReadView，后续复用该ReadView</strong></p></li></ul><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20240521174453239.png" alt="image-20240521174453239" /></p><h3 id="mysql主从同步"><a class="markdownIt-Anchor" href="#mysql主从同步"></a> MySQL主从同步</h3><blockquote><p>二进制日志（binlog）记录了所有的DDL（数据定义语言 create drop等）语句和DML（数据操纵语言 update insert等），但不包括数据查询（select show）语句</p></blockquote><ul><li>Master主库在事务提交时会把数据变更记录在二进制日志文件Binlog中</li><li>从库读取主库的binlog文件，写入到从库的中继日志relay log</li><li>从库重做中继日志中的事件，实现主从同步</li></ul><h3 id="分库分表"><a class="markdownIt-Anchor" href="#分库分表"></a> 分库分表</h3><h3 id="垂直分库"><a class="markdownIt-Anchor" href="#垂直分库"></a> 垂直分库</h3><blockquote><p>以表为依据，根据业务将不同表拆分到不同库中</p></blockquote><p>特点：</p><ul><li>按业务对数据分级管理、维护、监控、扩展</li><li>在高并发下，提高磁盘IO和数据量连接数</li></ul><h3 id="垂直分表"><a class="markdownIt-Anchor" href="#垂直分表"></a> 垂直分表</h3><blockquote><p>以字段为依据，根据字段属性将不同字段拆分到不同表中；不常用的字段单独放一张表，把text、blob等大字段拆分出来放在附表中</p></blockquote><p>特点：</p><ul><li>冷热数据分离</li><li>减少IO过度争抢，两表互不影响</li></ul><h3 id="水平分库"><a class="markdownIt-Anchor" href="#水平分库"></a> 水平分库</h3><blockquote><p>将一个库的数据拆分到多个库中</p></blockquote><p>路由规则：</p><ul><li>根据id取模</li><li>按照id范围路由（1-100w）（100w-200w</li></ul><p>特点：</p><ul><li>解决了单库大数量、高并发的性能瓶颈问题</li><li>提高系统稳定性和可用性</li></ul><h3 id="水平分表"><a class="markdownIt-Anchor" href="#水平分表"></a> 水平分表</h3><blockquote><p>将一个表的数据拆分到多个表中（可以在同一个库中）</p></blockquote><p>特点：</p><ul><li>优化单表数据过大产生的性能问题</li><li>避免IO争抢并减少锁表的几率</li></ul>]]></content>
      
      
      <categories>
          
          <category> 八股 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java八股-Redis篇</title>
      <link href="/posts/45296.html"/>
      <url>/posts/45296.html</url>
      
        <content type="html"><![CDATA[<h1 id="java八股-redis篇"><a class="markdownIt-Anchor" href="#java八股-redis篇"></a> Java八股-Redis篇</h1><h2 id="使用场景"><a class="markdownIt-Anchor" href="#使用场景"></a> 使用场景</h2><h3 id="缓存"><a class="markdownIt-Anchor" href="#缓存"></a> 缓存</h3><h4 id="缓存穿透"><a class="markdownIt-Anchor" href="#缓存穿透"></a> 缓存穿透</h4><blockquote><p>查询一个不存在的数据，mysql查询不到数据也不会直接写入缓存，每次请求都会查数据库</p></blockquote><p>解决方案：</p><ul><li>缓存空数据，查询返回的数据为空，仍然把空结果进行缓存（简单、消耗内存，存在不一致问题）</li><li>布隆过滤器（缓存预热时初始化）<br />通过多个hash函数获取hash，将hash结果对应数组位置改为1</li></ul><h4 id="缓存击穿"><a class="markdownIt-Anchor" href="#缓存击穿"></a> 缓存击穿</h4><blockquote><p>当某一个key设置了过期时间，当key过期时，恰好有大量请求访问这个key，并发请求压垮数据库</p></blockquote><p>解决方案：</p><ul><li>互斥锁<br />保证数据强一致性，性能差</li><li>逻辑过期<br />热点key不设置过期时间。发现逻辑过期，获取互斥锁，重开线程进行缓存重建并更新过期时间。高可用、性能优，不保证数据绝对一致</li></ul><h4 id="缓存雪崩"><a class="markdownIt-Anchor" href="#缓存雪崩"></a> 缓存雪崩</h4><blockquote><p>同一个时间段内缓存key同时失效或者redis宕机，导致大量请求到达数据库</p></blockquote><p>解决方案：</p><ul><li>给不同的key的过期时间添加随机值（同时过期）</li><li>利用redis集群提高服务可用性</li><li>给缓存业务添加降级限流策略（保底策略；防止缓存穿透、击穿、雪崩）</li><li>给业务添加多级缓存</li></ul><h4 id="mysql数据如何和redis进行同步双写一致性"><a class="markdownIt-Anchor" href="#mysql数据如何和redis进行同步双写一致性"></a> mysql数据如何和redis进行同步（双写一致性）</h4><h5 id="保证强一致性先删除缓存还是数据库"><a class="markdownIt-Anchor" href="#保证强一致性先删除缓存还是数据库"></a> 保证强一致性，先删除缓存还是数据库</h5><blockquote><p>延迟双删（数据库主从同步时间，延时时间不好把控且延时过程中会出现脏数据）、redis读写锁</p></blockquote><ul><li><p>先删除缓存再删除数据库</p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20240517205825138.png" alt="image-20240517205825138" /></p></li><li><p>先删除数据库再删除缓存</p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20240517205950034.png" alt="image-20240517205950034" /></p></li></ul><h5 id="保证弱一致性"><a class="markdownIt-Anchor" href="#保证弱一致性"></a> 保证弱一致性</h5><p>异步通知，保证最终一致性（消息队列，Canal中间件）</p><h4 id="redis持久化"><a class="markdownIt-Anchor" href="#redis持久化"></a> redis持久化</h4><ul><li>RDB（文件小，恢复速度快，数据丢失多）</li></ul><blockquote><p>把内存中的所有数据都记录到磁盘中，redis故障重启后，从磁盘读取快照文件并恢复数据</p></blockquote><p>bgsave执行原理：<br />通过<strong>fork</strong>创建子进程复制页表信息，可以访问到磁盘数据。同时采用<strong>copy-on-write</strong> 技术，对磁盘数据进行<strong>read-only</strong> 设置，主进程写操作时拷贝数据副本进行改写，同时读取时也读取副本内容。</p><ul><li>AOF（追加文件，文件大小大，恢复速度慢，数据丢失少）</li></ul><blockquote><p>记录每次执行命令</p></blockquote><p>结合两者使用：首先使用RDB进行数据恢复，在使用AOF的增量数据进行数据恢复</p><h4 id="redis数据过期策略"><a class="markdownIt-Anchor" href="#redis数据过期策略"></a> redis数据过期策略</h4><ul><li><p>惰性删除（CPU友好，内存占用大）<br />设置key过期时间后不去管他，需要使用时检查是否过期，过期立马删除，否则返回</p></li><li><p>定期删除<br />每隔一段时间对一些key进行检查，删除里面过期的key</p></li></ul><p>redis删除策略：<strong>惰性删除</strong>+<strong>定期删除</strong></p><h4 id="redis数据淘汰策略"><a class="markdownIt-Anchor" href="#redis数据淘汰策略"></a> redis数据淘汰策略</h4><blockquote><p>内存不够时，继续添加新的key，redis会按照某种规则将内存中的数据删掉</p></blockquote><ul><li>noeviction（默认策略，不淘汰，禁止写入）</li><li>volatile-ttl（ttl越小越先淘汰）</li><li>allkeys-random（随机淘汰）</li><li>volatile-random（对设置了ttl的的key，随机淘汰）</li><li>allkeys-lru（所有key LRU）</li><li>volatile-lru（设置了ttl的key LRU）</li><li>allkeys-lfu（所有key LFU）</li><li>volatile-lfu（设置了ttl的key LFU）</li></ul><h3 id="分布式锁"><a class="markdownIt-Anchor" href="#分布式锁"></a> 分布式锁</h3><blockquote><p>分布式环境下synchronized锁无法实现加锁功能</p></blockquote><h4 id="setnx"><a class="markdownIt-Anchor" href="#setnx"></a> setnx</h4><h4 id="redissonlua脚本-原子性"><a class="markdownIt-Anchor" href="#redissonlua脚本-原子性"></a> redisson（lua脚本 原子性）</h4><p>加锁（成功），操作redis，另起一个线程（watch dog）每隔一段时间(默认10秒)做一次过期时间的续期<br />加锁（失败），watch dog执行while循环不断获取锁直到达到等待时间</p><blockquote><p>redisson加锁可重入，根据线程id，利用hash结构记录线程id和重入次数key-(&lt;threadId, count&gt;)；不能解决主从数据一致性问题</p></blockquote><h2 id="其他面试题"><a class="markdownIt-Anchor" href="#其他面试题"></a> 其他面试题</h2><h3 id="redis主从同步"><a class="markdownIt-Anchor" href="#redis主从同步"></a> redis主从同步</h3><h4 id="全量同步"><a class="markdownIt-Anchor" href="#全量同步"></a> 全量同步</h4><ul><li>从节点发送数据同步请求并附带replid和offset</li><li>主节点判断replid是否一致，不一致表示第一次同步，返回自身replid和offset至从节点；一致则直接将repl_backlog发送给从节点，从节点根据对比offset进行数据同步</li><li>replid不一致，从节点保存主节点回传的replid和offset，同时主节点执行bgsave生成RDB文件并发送，从节点清空本地数据加载RDB，最后执行主节点发送的repl_backlog文件中的命令</li></ul><h4 id="增量同步slave重启或后期数据变化"><a class="markdownIt-Anchor" href="#增量同步slave重启或后期数据变化"></a> 增量同步（slave重启或后期数据变化）</h4><blockquote><p>从节点发送请求，主节点判断是否第一次请求，不是则从repl_backlog中获取offset后的数据发送给从节点，从节点执行命令</p></blockquote><h3 id="哨兵模式"><a class="markdownIt-Anchor" href="#哨兵模式"></a> 哨兵模式</h3><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20240517222059017.png" alt="image-20240517222059017" /></p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20240517222128710.png" alt="image-20240517222128710" /></p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20240517222145269.png" alt="image-20240517222145269" /></p><h3 id="分片集群"><a class="markdownIt-Anchor" href="#分片集群"></a> 分片集群</h3><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20240517222522412.png" alt="image-20240517222522412" /></p><h3 id="redis单线程为什么这么快"><a class="markdownIt-Anchor" href="#redis单线程为什么这么快"></a> Redis单线程为什么这么快</h3><ul><li>Redis是纯内存操作，执行速度快</li><li>采用单线程，避免了不必要的上下文切换，多线程还要考虑线程安全问题</li><li>使用I/O多路复用模型，非阻塞IO</li></ul><p>​Redis性能瓶颈是<strong>网络延迟</strong></p>]]></content>
      
      
      <categories>
          
          <category> 八股 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM七连问</title>
      <link href="/posts/64965.html"/>
      <url>/posts/64965.html</url>
      
        <content type="html"><![CDATA[<h2 id="jvm七连问"><a class="markdownIt-Anchor" href="#jvm七连问"></a> JVM七连问</h2><blockquote><p>关于Object o = new Object()</p></blockquote><h3 id="1-请解释一下对象的创建过程半初始化"><a class="markdownIt-Anchor" href="#1-请解释一下对象的创建过程半初始化"></a> 1、请解释一下对象的创建过程（半初始化）</h3><blockquote><p>申请空间 - 初始化 - 引用</p></blockquote><p>JVM首先检查当前类是否被加载解析和初始化过，如果没有就先执行对应的类加载器；如果加载了就为新对象分配内存空间，并且将分配的内存空间初始化为零值（成员变量，数值类型是 0，布尔类型是 false，对象类型是 null），接下来设置对象头，最后JVM执行构造方法（<code>&lt;init&gt;</code> ），将成员变量赋值为预期的值。</p><h3 id="2-dcldouble-check-lock要不要加volatile问题指令重排"><a class="markdownIt-Anchor" href="#2-dcldouble-check-lock要不要加volatile问题指令重排"></a> 2、DCL（double check lock）要不要加volatile问题（指令重排）</h3><p><strong>synchronized</strong> 内部可以重排序，锁的外部可以访问到中间状态</p><p>必须要加 <strong>volatile</strong>(保证线程之间的可见性和禁止指令重排序（内存屏障）)</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingleObject</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">volatile</span> <span class="token class-name">SingleObject</span> <span class="token constant">INSTANCE</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">SingleObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">SingleObject</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">INSTANCE</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">SingleObject</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">INSTANCE</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                    <span class="token constant">INSTANCE</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SingleObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token constant">INSTANCE</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-对象在内存中的存储布局对象与数据的存储不同"><a class="markdownIt-Anchor" href="#3-对象在内存中的存储布局对象与数据的存储不同"></a> 3、对象在内存中的存储布局（对象与数据的存储不同）</h3><ul><li>Markword（64位机器8字节 32位机器4字节）</li><li>类型指针（4字节）</li><li>实例数据（String类型4字节）</li><li>对齐（被8整除）</li></ul><h3 id="4-对象头具体包括什么"><a class="markdownIt-Anchor" href="#4-对象头具体包括什么"></a> 4、对象头具体包括什么</h3><p><strong>markword</strong> 和 <strong>class pointer</strong></p><h4 id="markword"><a class="markdownIt-Anchor" href="#markword"></a> markword</h4><ul><li>锁信息</li><li>GC信息</li><li>hashcode</li></ul><h3 id="5-对象怎么定位"><a class="markdownIt-Anchor" href="#5-对象怎么定位"></a> 5、对象怎么定位</h3><p><strong>直接</strong> 和 <strong>间接</strong></p><ul><li><p>直接（默认）<br />直接指针，仅包含实例数据，实例数据中包含类型数据指针指向方法区中的T.class</p><p>速度快</p></li><li><p>间接<br />句柄方式，包含实例数据指针和类型数据指针</p><p>对象在内存中移动位置，地址不用变</p></li></ul><h3 id="6-对象怎么分配"><a class="markdownIt-Anchor" href="#6-对象怎么分配"></a> 6、对象怎么分配</h3><blockquote><p>栈上 - 线程本地 - Eden - Old</p></blockquote><ul><li>尝试分配到栈上（逃逸分析、标量替换）</li><li>足够大直接分配到老年代</li><li>TLAB（给每个线程在伊甸区的一个独立空间，线程同步）</li><li>分配到伊甸区</li></ul><h3 id="7-object-o-new-object在内存中占多少字节"><a class="markdownIt-Anchor" href="#7-object-o-new-object在内存中占多少字节"></a> 7、Object o = new Object()在内存中占多少字节</h3><p><strong>16字节</strong></p>]]></content>
      
      
      <categories>
          
          <category> 八股 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>24-04-18番茄小说一面</title>
      <link href="/posts/28786.html"/>
      <url>/posts/28786.html</url>
      
        <content type="html"><![CDATA[<h2 id="24-04-18番茄小说一面"><a class="markdownIt-Anchor" href="#24-04-18番茄小说一面"></a> 24-04-18番茄小说一面</h2><h3 id="问题"><a class="markdownIt-Anchor" href="#问题"></a> 问题：</h3><ul><li>拷打项目</li><li>项目中的分布式id生成器：id产生浪费、超过id段情况（超过直接返回null）、数据库交互</li><li>其他的id生成器（本地的那种）：UUID、雪花算法</li><li>数据库分库</li><li>主从数据库一致性怎么保证（binlog）</li><li>redis用过哪写数据结构（场景）string底层实现</li><li>mysql多表设计（关联关系、结构设计等）</li><li>场景题：电影售票系统（怎么设计表，表的字段）</li><li><strong>volatile</strong> 、<strong>synchronized</strong> 、<strong>ReentrantLock <strong>那个熟，说前两个，让讲一下</strong>volatile</strong></li><li>讲一下RockerMQ（原理）</li><li>Http和Https区别</li><li>https怎么加密，加密过程</li><li>mysql慢查询，怎么识别慢查询（<strong>explain</strong>）</li></ul><h3 id="算法"><a class="markdownIt-Anchor" href="#算法"></a> 算法：</h3><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20240421212628862.png" alt="image-20240421212628862" /></p>]]></content>
      
      
      <categories>
          
          <category> 面经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
            <tag> 字节 </tag>
            
            <tag> 番茄小说 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>24-04-15美团移动面2</title>
      <link href="/posts/29339.html"/>
      <url>/posts/29339.html</url>
      
        <content type="html"><![CDATA[<h2 id="24-04-15美团前端移动端面2"><a class="markdownIt-Anchor" href="#24-04-15美团前端移动端面2"></a> 24-04-15美团前端&amp;移动端面2</h2><blockquote><p>上次面了一次后估计是被刷了，简历又被捞起来了重新拷打！</p></blockquote><h3 id="问题"><a class="markdownIt-Anchor" href="#问题"></a> 问题：</h3><ul><li><p>线程和进程的区别</p></li><li><p>TCP三次握手</p></li><li><p>为什么要三次握手、两次不行吗</p></li><li><p><strong>get</strong> 和 <strong>post</strong> 请求区别</p></li><li><p><strong>String</strong>、<strong>StringBuilder</strong>、<strong>StringBuffer</strong>区别</p></li><li><p><strong>String</strong>为什么要设计成不可变的</p></li><li><p>Java泛型</p></li><li><p><strong>HashMap</strong> 实现原理</p></li><li><p>扩容算法</p></li><li><p><strong>ConCurrentHashMap</strong></p></li><li><p><strong>synchronized</strong> 和 <strong>volatile</strong> 区别</p></li><li><p><strong>synchronized</strong> 修饰哪写</p></li><li><p>保证线程安全有哪些方式</p></li><li><p><strong>notify</strong> 和 <strong>notifyAll</strong></p></li><li><p>使用场景（使用位置）要求</p></li><li><p>垃圾回收机制</p></li><li><p>怎么判断对象是否要被回收（可达性分析、引用计数）</p></li><li><p>有哪些可以被当做 <strong>GCRoots</strong></p><ul><li><p>JVM栈中的引用（方法参数、局部变量等）</p></li><li><p>本地方法栈中的JNI引用</p></li><li><p>类静态变量</p></li><li><p>运行时常量池中的常量（String、Class类型）</p></li></ul></li><li><p>强引用、软引用、弱引用、虚引用区别</p></li><li><p>说一下哪写技能会在职业领域反复使用（比较开放，技术、沟通、协作…）</p></li></ul><h3 id="算法"><a class="markdownIt-Anchor" href="#算法"></a> 算法:</h3><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20240421210237894.png" alt="image-20240421210237894" /></p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20240421210438785.png" alt="image-20240421210438785" /></p>]]></content>
      
      
      <categories>
          
          <category> 面经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
            <tag> 美团 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>24-04-10美团移动面</title>
      <link href="/posts/51273.html"/>
      <url>/posts/51273.html</url>
      
        <content type="html"><![CDATA[<h2 id="24-04-10美团前端移动端面"><a class="markdownIt-Anchor" href="#24-04-10美团前端移动端面"></a> 24-04-10美团前端&amp;移动端面</h2><h3 id="问题"><a class="markdownIt-Anchor" href="#问题"></a> 问题：</h3><ul><li><p><strong>安卓四大组件（不会直接问Java了）</strong></p></li><li><p><strong>说一下StringBuilder和StringBuffer区别</strong></p><p>StringBuilder与StringBuffer功能类似，但是StringBuffer是线程安全的，方法都添加了synchronized关键字。</p></li><li><p><strong>为什么不直接使用String而要用StringBuilder或者StringBuffer</strong></p><p>String类的对象是不可变的，一旦String对象被创建，所包含的字符串内容是不可改变的。每次对String对象进行修改操作都会生成一个新的String对象，导致大量的内存开销。而StringBuffer和StringBuilder的字符串修改操作都是直接在原有字符串对象的底层数组上进行的，而不会生成新的String对象。</p></li><li><p><strong>String内部成员变量、.length()方法时间复杂度多少</strong></p><p>以JDK8为例：包含final修饰的 <strong>char数组</strong> 和 <strong>hash</strong></p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20240410185212778.png" alt="image-20240410185212778" /></p><p>其中 <strong>.length()</strong> 方法调用的是 <strong>value</strong> 数组的 <strong>length</strong> 属性</p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20240410185423398.png" alt="image-20240410185423398" /></p></li><li><p><strong>如何将String设计成动态容量的</strong></p><p>问的是C++中string是可变的，能不能Java的String也实现动态长度？</p></li><li><p><strong>Map底层数据结构？？？如何保证key唯一</strong></p><p>回答的HashMap，说Map类似？不懂啥意思</p></li><li><p><strong>Java与C++区别</strong></p></li><li><p><strong>JVM、垃圾回收</strong></p><p><a href="https://blog.csdn.net/csdnliuxin123524/article/details/81303711">JVM原理最全、清晰、通俗讲解，五天40小时吐血整理_jvm原理讲解教程最全清晰通俗讲解-CSDN博客</a></p></li><li><p><strong>C++源文件如何到机器码？还是字节码如何到机器码</strong></p></li><li><p><strong>网页输入网址到显示内容发生了什么</strong></p><p>1、DNS解析：发送DNS请求（浏览器缓存、本地缓存、hosts文件），发送给本地DNS服务器（缓存有直接返回），没有询问根域名服务器，根据根域名的指示找到对应的DNS服务器得到IP地址</p><p>2、TCP连接 三次握手</p><p>3、发送HTTP请求给服务器</p><p>4、服务器处理请求并返回响应报文</p><p>5、浏览器解析渲染页面</p><p>6、结束连接 四次挥手</p></li><li><p><strong>不同局域网可能包含相同ip，顶端DNS如何将查询到的信息返还给请求主机</strong></p><p>不懂</p></li><li><p><strong>线程池、如何设计</strong></p><p>核心线程数、最大线程数、非核心线程存活时间、阻塞队列、拒绝策略、线程工厂</p></li><li><p>其他忘了。。。</p></li></ul><h3 id="算法"><a class="markdownIt-Anchor" href="#算法"></a> 算法：</h3><ul><li><p>树的最近祖先</p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/e3698b209adb05022f00c94a63c9485b.png" alt="e3698b209adb05022f00c94a63c9485b" /></p></li><li><p>最长合法括号序列</p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/5eb3f230d9be3dcbdd9a43ede7b36c8b.png" alt="5eb3f230d9be3dcbdd9a43ede7b36c8b" /></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 面经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
            <tag> 美团 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Lightweight Remote Sensing Change Detection With Progressive Feature Aggregation and Supervised Attention》笔记</title>
      <link href="/posts/38331.html"/>
      <url>/posts/38331.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文地址：<a href="https://ieeexplore.ieee.org/document/10034814">Lightweight Remote Sensing Change Detection With Progressive Feature Aggregation and Supervised Attention</a></p></blockquote><h2 id="摘要"><a class="markdownIt-Anchor" href="#摘要"></a> 摘要</h2><h3 id="问题"><a class="markdownIt-Anchor" href="#问题"></a> 问题</h3><p>尽管之前的基于CNN的方法能够取得不错的结果，但是模型的内存和计算成本太高，很难在实际中应用</p><h3 id="工作"><a class="markdownIt-Anchor" href="#工作"></a> 工作</h3><p>提出一种新颖的轻量级网络，它通过渐进式特征聚合和监督注意力，根据移动网络提取的特征识别变化</p><ul><li>设计了一个neighbor aggregation module（NAM）来融合主干网络邻近阶段的特征，用来增强时间特征的表示能力</li><li>提出progressive change identifying module（PCI）从双时相特征中提取时间差异信息</li><li>设计了supervised attention模块（SAM）来对特征重新加权，以有效地从高层到低层聚合多级特征</li></ul><h2 id="引言"><a class="markdownIt-Anchor" href="#引言"></a> 引言</h2><h3 id="先前方法缺点"><a class="markdownIt-Anchor" href="#先前方法缺点"></a> 先前方法缺点</h3><p>参数量和计算成本太大，不利于模型在真实世界的部署实现</p><h3 id="解决方法"><a class="markdownIt-Anchor" href="#解决方法"></a> 解决方法</h3><ol><li>使用轻量的特征提取网络（MobileNetV2），同时为了弥补特征表示能力的不足，构建NAM来增强特征表示能力</li><li>设计一个具有轻量化模块的decoder，PCI、SAM</li></ol><h3 id="主要贡献"><a class="markdownIt-Anchor" href="#主要贡献"></a> 主要贡献</h3><ol><li>提出轻量化模型A2Net（3.78 M parameters and 6.02 G FLOPs），并且取得了sota</li><li>提出NAM增强backbone特征表示能力</li><li>提出PCI逐步找到不同特征级别的时间变化信息以准确识别变化对象，并且使用SAM来重新加权特征以实现渐进的特征聚合</li></ol><h2 id="方法"><a class="markdownIt-Anchor" href="#方法"></a> 方法</h2><h3 id="网络结构"><a class="markdownIt-Anchor" href="#网络结构"></a> 网络结构</h3><p>首先通过骨干网络提取多尺度特征，然后经过<strong>NAM</strong>对特征进行增强，最后获得差分特征。后面先将差分特征输入<strong>PCIM</strong>中进行差异特征增强然后经过<strong>SAM</strong>对特征进行重新加权，输出预测图。</p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20230224103752830.png" alt="image-20230224103752830" /></p><h3 id="nam"><a class="markdownIt-Anchor" href="#nam"></a> NAM</h3><p>由于backbone采用的是移动网络MobileNetV2，所以提取到的特征表征能力较弱，于是提出<strong>NAM</strong>对特征进行增强。具体操作为：所提取特征上下阶段特征分别进行最大池化和上采样后经过卷积与当前阶段特征进行<strong>concat</strong>，而后当前特征通过1×1卷积构成一个残差网络，保持当前阶段特征的主要信息。</p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20230224113134285.png" alt="image-20230224113134285" /></p><h3 id="pcim"><a class="markdownIt-Anchor" href="#pcim"></a> PCIM</h3><p>PCIM主要是为了成分挖掘差异特征中的变化信息，输入特征从大感受野到小感受野逐步挖掘变化信息。</p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20230224113608045.png" alt="image-20230224113608045" /></p><h3 id="sam"><a class="markdownIt-Anchor" href="#sam"></a> SAM</h3><p>在上一步通过<strong>PCIM</strong>已经充分挖掘了变化信息，但是由于高级特征缺少上下文信息的指导，容易造成噪声等无关信息。所以<strong>SAM</strong>旨在对特征进行重新加权，确保变化特征能够得到更多的关注，忽略无关特征。该模块首先经过1×1卷积然后通过激活层。最后得到变化图（值为0-1）和非变化图（用全1矩阵减去变化图），将两者进行<strong>concat</strong>，通过1×1卷积后作为权重map与原特征进行点乘，最后得到重加权的特征。</p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20230224114240434.png" alt="image-20230224114240434" /></p><h2 id="实验"><a class="markdownIt-Anchor" href="#实验"></a> 实验</h2><h3 id="对比实验"><a class="markdownIt-Anchor" href="#对比实验"></a> 对比实验</h3><p>该模型相比于其他的方法具有更好的效果。如图7第三行所示，相同的建筑物在不同的时间显示不同的颜色，从而导致一些与真实建筑物变化相反的无关变化，该方法能够较好地检测出变化区域；同时图8第六行，许多方法无法区分包含与建筑物外观相似的道路的伪变化。相反，所提出的方法可以很好地识别建筑物变化的边界和主体。</p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20230224114942640.png" alt="image-20230224114942640" /></p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20230224114957987.png" alt="image-20230224114957987" /></p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20230224115022493.png" alt="image-20230224115022493" /></p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20230224115046949.png" alt="image-20230224115046949" /></p><h3 id="消融实验"><a class="markdownIt-Anchor" href="#消融实验"></a> 消融实验</h3><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20230224115119249.png" alt="image-20230224115119249" /></p><h2 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h2><ol><li><strong>NAM</strong>对于特征有较好的增强效果，特征交互类似思路可行</li><li><strong>PCIM</strong>中利用不同感受野挖掘特征潜在信息也能够较好地运行，在对于较小分辨率特征是否可行？</li><li><strong>SAM</strong>类似于自注意力机制，主要是通过变化图和非变化图生成特征权重图。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 论文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RS </tag>
            
            <tag> change detection </tag>
            
            <tag> light weight </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《RACDNet：Resolution- and Alignment-Aware Change Detection Network for Optical Remote Sensing Imagery》笔记</title>
      <link href="/posts/35686.html"/>
      <url>/posts/35686.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>论文地址：<a href="https://www.mdpi.com/2072-4292/14/18/4527">Remote Sensing | Free Full-Text | RACDNet: Resolution- and Alignment-Aware Change Detection Network for Optical Remote Sensing Imagery</a></p></blockquote><h2 id="摘要"><a class="markdownIt-Anchor" href="#摘要"></a> 摘要</h2><h3 id="动机"><a class="markdownIt-Anchor" href="#动机"></a> 动机</h3><p>变化检测任务是基于等效分辨率的共同配准多时相图像。由于传感器成像条件和重访周期的限制，很难获得所需的图像，特别是在紧急情况下。此外，准确的多时相图像配准在很大程度上受到大量对象变化和匹配算法的限制。</p><h3 id="主要思路"><a class="markdownIt-Anchor" href="#主要思路"></a> 主要思路</h3><ul><li>首先，提出了一种基于WDSR的轻量级超分辨率网络。为了更好地恢复高频细节信息，计算梯度权重并将其分配给不同的区域，从而迫使网络集中在难以重建的区域。</li><li>为了减轻过度平滑的影响，进一步引入了对抗损失和感知损失，以提高重建图像的视觉感知质量</li><li>在孪生U-Net中为了对齐双时态深度特征，可变形卷积单元 (DCU) 通过使用学习到的偏移量扭曲特征图来使用。</li><li>解码器中为了弥合编码器和解码器之间的语义鸿沟，嵌入了一个有效的注意单元（AU）。</li></ul><h3 id="主要工作"><a class="markdownIt-Anchor" href="#主要工作"></a> 主要工作</h3><ul><li>提出了一种新颖的超分辨率网络，它在恢复 RS 图像中的高频细节方面简单而有效。</li><li>提出了一种对齐感知 CD 网络，其中可以通过使用 DCU、ACU 和注意机制进一步引入双时态深度特征来显式对齐以提高 CD 性能</li></ul><h2 id="网络结构"><a class="markdownIt-Anchor" href="#网络结构"></a> 网络结构</h2><p>整体网络结构分为两部分，第一部分为将图像转为高分辨率图像来凸显高频部分，使得特征中高频细节信息更加丰富。第二部分为特征提取和变化信息生成部分，主要采用孪生U-Net网络结构进行特征提取，并且在双时相图像融合的过程中采用DCU模块进行图像特征配准，<strong>解决图像配准问题</strong></p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20221125120756581.png" alt="image-20221125120756581" /></p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20221125120956911.png" alt="image-20221125120956911" /></p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20221125121009521.png" alt="image-20221125121009521" /></p><h3 id="dcu"><a class="markdownIt-Anchor" href="#dcu"></a> DCU</h3><p>首先将双时相特征进行concat然后通过卷积层输出各个坐标的位移矩阵（即当前像素位置应当如何调整，分为x、y两个方向），之后将位移矩阵与对应特征相乘便得到了配准之后的特征，后续就可以做对应操作了。</p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20221125121232605.png" alt="image-20221125121232605" /></p><h3 id="au"><a class="markdownIt-Anchor" href="#au"></a> AU</h3><p>因为深层特征包含丰富的语义信息，能够很好地识别背景和前景，所以通过通道注意力得到深层特征的通道级别注意力来重新校准低级特征，不仅减轻了语义鸿沟而且还能很好地融合高级特征的语义特征和低级特征的细节信息。</p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20221125121726955.png" alt="image-20221125121726955" /></p><h2 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h2><p>图像高频信息在后续实验中可以着重思考，并且特征对齐、配准等也有实验价值。</p>]]></content>
      
      
      <categories>
          
          <category> 论文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RS </tag>
            
            <tag> change detection </tag>
            
            <tag> attention </tag>
            
            <tag> super-resolution images </tag>
            
            <tag> feature alignment </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《SwinSUNet：Pure Transformer Network for Remote Sensing Image Change Detection》笔记</title>
      <link href="/posts/6529.html"/>
      <url>/posts/6529.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>论文地址：<a href="https://ieeexplore.ieee.org/document/9736956">SwinSUNet: Pure Transformer Network for Remote Sensing Image Change Detection</a></p></blockquote><h2 id="摘要"><a class="markdownIt-Anchor" href="#摘要"></a> 摘要</h2><h3 id="动机"><a class="markdownIt-Anchor" href="#动机"></a> 动机</h3><p><strong>虽然CNN在CD领域取得了很大的成就，但由于卷积运算固有的局域性，无法捕获时空中的全局信息。</strong> 而Transformer可以有效地提取全局信息，因此被用来解决计算机视觉任务。</p><h3 id="主要工作"><a class="markdownIt-Anchor" href="#主要工作"></a> 主要工作</h3><ul><li><p>设计了一个具有孪生U-Net结构的纯Transformer网络来解决CD问题。SwinSUNet包含Encoder、Decoder、Fusion三个部分，均以Swin Transformer block为基本单元</p><p>Encoder具有分层的Swin Transformer孪生网络结构，因此可以并行处理双时相图像并提取其多尺度特征</p><p>Fusion模块主要负责将Encoder生成的双时相特征进行融合</p><p>Decoder结构与Encoder不同的地方在于多了upsampling and mreging（UM）模块，用来恢复变化信息的细节</p></li></ul><h2 id="网络结构"><a class="markdownIt-Anchor" href="#网络结构"></a> 网络结构</h2><p>Encoder首先使用patch partition和linear embedding将输入图像转为image token；随后，Encoder生成多尺度特征；最后Decoder使用Swin Transformer逐步预测变化信息。</p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20221124180737892.png" alt="image-20221124180737892" /></p><h3 id="encoder"><a class="markdownIt-Anchor" href="#encoder"></a> Encoder</h3><p>patch partition模块负责将图像转换成多个token，linear embedding模块负责将每个token的通道号映射到指定维度。</p><h3 id="fusion"><a class="markdownIt-Anchor" href="#fusion"></a> Fusion</h3><p>将双时相特征进行concat和现行映射后输入Swin Transformer block得到变化特征。</p><h3 id="decoder"><a class="markdownIt-Anchor" href="#decoder"></a> Decoder</h3><p>首先将输入特征进行上采样，然后与Encoder生成的对应尺度特征进行concat，然后为了更好地识别前景和背景使用通道注意力，最后经过一个线性映射处理得到细化后的变化特征。</p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20221124181559106.png" alt="image-20221124181559106" /></p><p>其中上采样部分采用Patch reshaping方法，没有扩充特征通道，从而减少了特征的冗余同时见少了计算量，有利于变化信息的提取。</p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20221124181611531.png" alt="image-20221124181611531" /></p><h2 id="实验"><a class="markdownIt-Anchor" href="#实验"></a> 实验</h2><h3 id="对比实验"><a class="markdownIt-Anchor" href="#对比实验"></a> 对比实验</h3><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20221124181942362.png" alt="image-20221124181942362" /></p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20221124181957008.png" alt="image-20221124181957008" /></p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20221124182009306.png" alt="image-20221124182009306" /></p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20221124182020672.png" alt="image-20221124182020672" /></p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20221124182033820.png" alt="image-20221124182033820" /></p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20221124182051293.png" alt="image-20221124182051293" /></p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20221124182105146.png" alt="image-20221124182105146" /></p><h3 id="消融实验"><a class="markdownIt-Anchor" href="#消融实验"></a> 消融实验</h3><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20221124182152509.png" alt="image-20221124182152509" /></p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20221124182213838.png" alt="image-20221124182213838" /></p><h2 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h2><p>总的看下来最大的贡献应该就是使用出Swin Transformer模块了，至于参数量相比于纯CNN实现的孪生U-Net网络如何论文中没有提到。如果参数量能够大量下降的话应该算不错的方向，其次也证明了纯Swin Transformer能够处理CD任务。另一方面Path reshape算半个贡献点吧，后续实验上采样可以尝试使用该方法。</p>]]></content>
      
      
      <categories>
          
          <category> 论文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RS </tag>
            
            <tag> change detection </tag>
            
            <tag> Transformer </tag>
            
            <tag> Swin Transformer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《A Deeply Supervised Attention Metric-Based Network and an Open Aerial Image Dataset for Remote Sensing Change Detection》笔记</title>
      <link href="/posts/2293.html"/>
      <url>/posts/2293.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>论文地址：<a href="https://ieeexplore.ieee.org/document/9467555">A Deeply Supervised Attention Metric-Based Network and an Open Aerial Image Dataset for Remote Sensing Change Detection</a></p></blockquote><h2 id="摘要"><a class="markdownIt-Anchor" href="#摘要"></a> 摘要</h2><h3 id="动机"><a class="markdownIt-Anchor" href="#动机"></a> 动机</h3><p>尽管近几年深度学习方法在变化检测中取得了很多实质性突破，但是<strong>变化检测的结果容易受到光照、噪声、和尺度等外部因素的影响，从而导致检测图中出现伪变化和噪声</strong></p><h2 id="主要工作"><a class="markdownIt-Anchor" href="#主要工作"></a> 主要工作</h2><ul><li><p>提出了一种基于 <strong>深度监督（DS）</strong> 注意力度量的网络（DSAMNet）</p></li><li><p>集成CBAM模块，在空间和通道方面获得更具有辨别力的特征；使用深度监督以实现更好的特征提取</p></li><li><p>提出了一个新的变化检测数据集SYSU-CD，并且模型在CDD和SYSU-CD上取得了很好的效果</p></li></ul><h2 id="网络结构"><a class="markdownIt-Anchor" href="#网络结构"></a> 网络结构</h2><p>DSAMNet整体结构图如下所示，主要可以分为三部分：特征提取、度量学习、深度监督。特征提取部分主要采用ResNet网络进行多尺度多深度特征的提取；度量学习部分首先将输入特征经过CBAM模块处理得到更具有辨别性的特征，然后计算双时相特征之间的距离，最后根据<strong>BCL Loss</strong>进行优化；深度监督部分主要由一个深度监督层和损失计算构成，深度监督层负责将特征上采样到输入图像大小。</p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20221123103155809.png" alt="image-20221123103155809" /></p><h3 id="cbam"><a class="markdownIt-Anchor" href="#cbam"></a> CBAM</h3><p>CBAM模块主要进行通道注意力和空间注意力处理，空间注意力和通道注意力均采用最大池化和平均池化处理，不过一个在空间维度，另一个在通道维度。</p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20221123104338589.png" alt="image-20221123104338589" /></p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20221123104548679.png" alt="image-20221123104548679" /></p><h3 id="度量学习模块"><a class="markdownIt-Anchor" href="#度量学习模块"></a> 度量学习模块</h3><p><strong>为了充分利用低层特征中丰富的空间信息和高层特征中的语义信息</strong>，首先将ResNet提取到的每一层特征进行通道统一（全部变成96，并且统一尺寸为输入图像的一半），然后将每一层的特征进行concat后输入到CBAM模块计算双时相特征之间的距离，最后和GT进行计算BCL Loss。其中BCL Loss计算如下图所示</p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20221123104632659.png" alt="image-20221123104632659" /></p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20221123110522900.png" alt="image-20221123110522900" /></p><h3 id="深度监督模块"><a class="markdownIt-Anchor" href="#深度监督模块"></a> 深度监督模块</h3><p>由于网络的中间层的训练是不透明的而且缺乏监督，所以中间层并不能很好地学习有效特征，所以使用深度监督模块来增强浅层特征的表征能力。主要针对前两层特征进行深度监督处理，文章中提到这两层同时具备丰富的空间信息和语义信息。在输出变化图后与GT进行Dice Loss计算来优化网络。</p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20221123121048547.png" alt="image-20221123121048547" /></p><h2 id="实验"><a class="markdownIt-Anchor" href="#实验"></a> 实验</h2><h3 id="对比实验"><a class="markdownIt-Anchor" href="#对比实验"></a> 对比实验</h3><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20221123122838424.png" alt="image-20221123122838424" /></p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20221123122847259.png" alt="image-20221123122847259" /></p><h3 id="可视化对比实验"><a class="markdownIt-Anchor" href="#可视化对比实验"></a> 可视化对比实验</h3><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20221123122911508.png" alt="image-20221123122911508" /></p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20221123122929541.png" alt="image-20221123122929541" /></p><h3 id="消融实验"><a class="markdownIt-Anchor" href="#消融实验"></a> 消融实验</h3><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20221123123000141.png" alt="image-20221123123000141" /></p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20221123123021835.png" alt="image-20221123123021835" /></p><h3 id="超参lambda实验"><a class="markdownIt-Anchor" href="#超参lambda实验"></a> 超参<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>λ</mi></mrow><annotation encoding="application/x-tex">\lambda</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">λ</span></span></span></span>实验</h3><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20221123123122491.png" alt="image-20221123123122491" /></p><h2 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h2><ul><li><p>本文提出了一种新的深度学习处理变化检测的方法：使用CBAM模块直接从特征中学习到变化图，同时使用辅助深度监督模块。用于生成具有更多空间信息的变化图。</p></li><li><p>CBAM可以有效地使特征更具有判别性，从而辅助度量模块的学习；同时深度监督模块可以很好地利用中间块特征中包含的信息，从而进一步改进度量模块学习到的变化图。</p></li><li><p>通过在CDD、SYSU-CD数据集上实验表示该方法结果优于其他最先进的方法。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 论文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RS </tag>
            
            <tag> change detection </tag>
            
            <tag> CBAM </tag>
            
            <tag> deeply supervised layers </tag>
            
            <tag> metric learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Optical Remote Sensing Image Change Detection Based on Attention Mechanism and Image Difference》笔记</title>
      <link href="/posts/49056.html"/>
      <url>/posts/49056.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>论文地址：<a href="https://ieeexplore.ieee.org/document/9254128">Optical Remote Sensing Image Change Detection Based on Attention Mechanism and Image Difference</a></p></blockquote><h2 id="摘要"><a class="markdownIt-Anchor" href="#摘要"></a> 摘要</h2><h3 id="动机"><a class="markdownIt-Anchor" href="#动机"></a> 动机</h3><p><strong>为了建模高层和低层特征之间的内在相关性</strong></p><p>提出了一种由多个上采样注意力单元组成的密集注意力方法。该单元同时采用了上采样空间注意力和上采样通道注意力。该单元可以利用具有丰富类别信息的高层特征来指导低层特征的选择，可以利用空间上下文信息来捕捉地物变化的特征。而且还引入差异增强模块促使特征选择性地聚合。</p><h2 id="主要工作"><a class="markdownIt-Anchor" href="#主要工作"></a> 主要工作</h2><ul><li>提出一种端到端的网络架构用于变化检测</li><li>提出了一种密切关注特征融合每个阶段的稠密注意力方法。在每个上采样注意力（UA）单元中，采用上采样空间注意力（SA）和通道注意力（CA）来同时捕捉空间和通道维度的变化信息。<strong>UA单元可以很好地定位细节信息和纹理特征</strong></li><li>提出差异增强模块，可以直接将差异图像直接映射到新的特征空间，充分挖掘变化信息，生成变化稠密图</li></ul><h2 id="网络结构"><a class="markdownIt-Anchor" href="#网络结构"></a> 网络结构</h2><p>该方法整体结构与U-Net类似，采用U-Net和DenseNet结合的方式，多的部分为上面一个分支：差异增强模块（该作者似乎很看好这个方法，在<a href="https://qingy735.gitee.io/posts/28607.html">TransUNetCD</a>这篇论文中也是使用了相同的增强方法，具体介绍可以阅读文章）。在图像输入之初便将双时相图像进行concat处理，然后再Decoder部分进行<strong>UA</strong>模块处理，最后和差异增强模块部分的特征进行相乘得到最终的差异图。</p><p>作者解释在解码器中使用稠密注意力机制是因为可以更好地保留双时相遥感图像中变化区域的纹理和细节信息，不仅增加了抗干扰能力，而且提高了检测小物体变化的能力。</p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20221121175405265.png" alt="image-20221121175405265" /></p><h3 id="ua模块"><a class="markdownIt-Anchor" href="#ua模块"></a> UA模块</h3><p>论文中提到：高级特征具有丰富的语义类别信息，能够很好地为低级特征类别定位作指导。同时高级特征与用于对低级特征进行加权来获取精确的像素级合并。其中UA模块结构如下图所示。首先看左边，高级特征上采样后与低级特征进行<strong>add</strong>后经过一个卷积层输出空间维度的掩码 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi><mi>a</mi><mi>s</mi><msub><mi>k</mi><mrow><mi>S</mi><mi>A</mi></mrow></msub><mo stretchy="false">(</mo><mn>1</mn><mo separator="true">,</mo><mi>W</mi><mo separator="true">,</mo><mi>H</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">mask_{SA}(1,W,H)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">m</span><span class="mord mathnormal">a</span><span class="mord mathnormal">s</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05764em;">S</span><span class="mord mathnormal mtight">A</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mclose">)</span></span></span></span> ，之后与低级特征进行空间维度相乘得到经过空间注意力处理的特征；其次是右边，高级特征首先进行通道注意力处理，然后经过一个卷积层输出通道维度的掩码 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi><mi>a</mi><mi>s</mi><msub><mi>k</mi><mrow><mi>C</mi><mi>A</mi></mrow></msub><mo stretchy="false">(</mo><mi>C</mi><mo separator="true">,</mo><mn>1</mn><mo separator="true">,</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">mask_{CA}(C,1,1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">m</span><span class="mord mathnormal">a</span><span class="mord mathnormal">s</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.07153em;">C</span><span class="mord mathnormal mtight">A</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span> ，最后和上面的特征进行相乘；最后将上采样后的高级特征与上述输出进行concat处理，后得到最终输出。</p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20221121180719472.png" alt="image-20221121180719472" /></p><blockquote><p>注：以下为个人理解</p></blockquote><p>首先分析空间注意力部分：因为高级特征具有很丰富的语义信息，所以在上采样后与低级特征进行add操作是为了指导变化物体的位置信息，最后输出空间维度掩码指导低级特征是为了更好地定位变化目标。</p><p>而通道注意力部分：由于高级特征具有很好地语义信息，所以不同通道中可以很好地识别出背景和前景，于是进行通道注意力处理再与浅层特征相乘有利于区分变化区域和非变化区域（这里指背景）。</p><p>而为什么最后还要进行concat操作，是因为高级特征包含信息很丰富，上述操作只是利用了一部分，进行cancat操作可以更好地利用高级特征信息。</p><h3 id="de模块"><a class="markdownIt-Anchor" href="#de模块"></a> DE模块</h3><p>只是简单的求差分之后残差卷积处理，个人认为会包含很多无关变化（受光照、拍摄角度、季节等影响）。</p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20221121183042531.png" alt="image-20221121183042531" /></p><h2 id="实验"><a class="markdownIt-Anchor" href="#实验"></a> 实验</h2><h3 id="消融实验"><a class="markdownIt-Anchor" href="#消融实验"></a> 消融实验</h3><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20221121183508942.png" alt="image-20221121183508942" /></p><h3 id="对比实验"><a class="markdownIt-Anchor" href="#对比实验"></a> 对比实验</h3><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20221121183522653.png" alt="image-20221121183522653" /></p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20221121183603827.png" alt="image-20221121183603827" /></p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20221121183622304.png" alt="image-20221121183622304" /></p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20221121183758543.png" alt="image-20221121183758543" /></p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20221121183731917.png" alt="image-20221121183731917" /></p><h3 id="可视化实验"><a class="markdownIt-Anchor" href="#可视化实验"></a> 可视化实验</h3><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20221121183639818.png" alt="image-20221121183639818" /></p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20221121183658373.png" alt="image-20221121183658373" /></p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20221121183816898.png" alt="image-20221121183816898" /></p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20221121183834453.png" alt="image-20221121183834453" /></p><blockquote><p>注：原论文包含更详细的介绍，如果感兴趣可以阅读原文，链接见上方</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 论文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RS </tag>
            
            <tag> change detection </tag>
            
            <tag> attention </tag>
            
            <tag> difference enhance </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《HFA-Net：High frequency attention siamese network for building change detection in VHR remote sensing images》笔记</title>
      <link href="/posts/41400.html"/>
      <url>/posts/41400.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>论文地址：<a href="https://www.sciencedirect.com/science/article/abs/pii/S0031320322001984">HFA-Net: High frequency attention siamese network for building change detection in VHR remote sensing images</a></p></blockquote><h2 id="摘要"><a class="markdownIt-Anchor" href="#摘要"></a> 摘要</h2><h3 id="动机"><a class="markdownIt-Anchor" href="#动机"></a> 动机</h3><p>虽然基于深度学习技术可以很好地处理建筑物变化检测（BCD），但是也存在以下问题：</p><p><strong>在对具有更清晰的边界的对象的分割和识别上仍然受高频信息获取不足的影响，导致在建筑物变化检测中建筑物边界的检测效果并不理想。</strong></p><h2 id="工作贡献"><a class="markdownIt-Anchor" href="#工作贡献"></a> 工作贡献</h2><ul><li>提出了一种新的基于孪生网络的框架：<strong>HFA-Net</strong>，用于更好地识别VHR遥感图像中的变化建筑物。</li><li>提出了一个<strong>空间注意力（SA）和高频增强（HF）结合的HFAB模块</strong>，首先通过SA引导模型关注建筑物，然后通过HF来突出建筑物的高频部分即边界。HFAB使模型获得更好的特征表示能力。</li><li>证实<strong>在深度神经网络中全局高频信息的增强有益于BCD任务</strong>，同时对比之前的基于CNN的方法，该方法能够在BCD任务中达到SOTA效果。</li></ul><h2 id="网络结构"><a class="markdownIt-Anchor" href="#网络结构"></a> 网络结构</h2><p>网络整体结构如下图所示。该方法采用孪生网络+U-Net结合的架构，其中Encoder部分共享权重，在最下面一层进行concat操作。</p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20221121095256549.png" alt="image-20221121095256549" /></p><h3 id="hfab"><a class="markdownIt-Anchor" href="#hfab"></a> HFAB</h3><p>作者为了实现高频信息的提取的增强，设计了这个HFAB模块。首先通过空间注意力模块给予特征图中建筑物更多的关注，随后通过高频信息增强模块对建筑物边界进行增强。具体网络结构如下图所示。</p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20221121095752800.png" alt="image-20221121095752800" /></p><p>同时根据HFAB的效果示意图可以很好地理解这一过程，其中先进行空间注意力模块再进行高频信息增强是为了在空间注意力模块中过滤掉一些无关信息，避免HF模块过后输出的特征图包含过多的高频噪声。</p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20221121095952361.png" alt="image-20221121095952361" /></p><h4 id="sa模块"><a class="markdownIt-Anchor" href="#sa模块"></a> SA模块</h4><p>可以在上面流程图中看到，作者采用的空间注意力增强模块时使用了一个U-Net结构作为空间掩码的提取。具体为：上分支部分采用U-Net网络进行处理，而与一般的U-Net不同的是特征通道数一直是降低的，最后输出时通道数为1，便得到了空间掩码<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi><mi>a</mi><mi>s</mi><mi>k</mi><mo stretchy="false">(</mo><mi>H</mi><mo>×</mo><mi>W</mi><mo>×</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">mask(H \times W \times 1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">m</span><span class="mord mathnormal">a</span><span class="mord mathnormal">s</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span>，然后将它与输入进行相乘实现空间维度的增强</p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20221121100420741.png" alt="image-20221121100420741" /></p><h4 id="hf模块"><a class="markdownIt-Anchor" href="#hf模块"></a> HF模块</h4><p>作者在提取高频信息的时候采用的是使用Sobel算子。而又因为通常建筑物的形状各异，所以转而使用各向同性的Sobel算子。其中各向同性Sobel算子包含八个方向，于是首先计算每个方向的高频信息，然后进行<strong>求mean</strong>操作。具体操作如下图所示。</p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20221121100745080.png" alt="image-20221121100745080" /></p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20221121100817024.png" alt="image-20221121100817024" /></p><p>同时HF模块不仅仅是进行了高频信息的提取，还进行了通道注意力处理。即上分支部分首先进行全局平均池化操作，得到特征图（<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mo>×</mo><mn>1</mn><mo>×</mo><mi>C</mi></mrow><annotation encoding="application/x-tex">1 \times 1 \times C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span></span>），随后经过两个全连接层（FCL）得到通道掩码（<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mo>×</mo><mn>1</mn><mo>×</mo><mi>C</mi></mrow><annotation encoding="application/x-tex">1 \times 1 \times C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span></span>），最后与输入进行通道级别相乘，得到使用通道注意力后的特征。最后与高频分支（即下分支）进行<strong>concat</strong>，然后经过1×1卷积的处理得到最终的特征。</p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20221121100439760.png" alt="image-20221121100439760" /></p><h3 id="训练细节"><a class="markdownIt-Anchor" href="#训练细节"></a> 训练细节</h3><p><strong>Loss</strong>：<strong>BCELOSS</strong></p><p>使用Pytorch框架实现了所提出的方法，并在GeForce RTX 3090 GPU和24-GB VRAM上进行了训练。Epoch设置为200，Batchsize设置为8；优化器选用SGD，初始学习率设置为0.01，momentum设置为0.9，weight decay设置为1e-5；学习率在10、15、30、40代时进行衰减，decay rate设置为0.1（MultiStepLR策略）。</p><h2 id="实验"><a class="markdownIt-Anchor" href="#实验"></a> 实验</h2><h3 id="数据集"><a class="markdownIt-Anchor" href="#数据集"></a> 数据集</h3><p><strong>WHU-CD</strong>：航拍图像，空间分辨率为0.075m，尺寸32507×15354</p><p><strong>LEVIR-CD</strong>：是一个公共的大规模构建CD数据集。它包含637对大小为1024 × 1024的高分辨率(0.5m) RS图像</p><p><strong>Google Dataset</strong>：大规模多光谱卫星图像变化检测数据集，空间分辨率为0.55m。包含19个季节变化的VHR图像对，大小1006×1168到4936×5224不等</p><blockquote><p><strong>在实验中统一裁剪为256×256大小进行处理</strong></p></blockquote><h3 id="对比实验"><a class="markdownIt-Anchor" href="#对比实验"></a> 对比实验</h3><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20221121101459430.png" alt="image-20221121101459430" /></p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20221121101511056.png" alt="image-20221121101511056" /></p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20221121101519444.png" alt="image-20221121101519444" /></p><h4 id="可视化比较"><a class="markdownIt-Anchor" href="#可视化比较"></a> 可视化比较</h4><p><strong>WHU-CD</strong>：</p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20221121101622113.png" alt="image-20221121101622113" /></p><p><strong>LEVIR-CD</strong>：</p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20221121101730948.png" alt="image-20221121101730948" /></p><p><strong>Google dataset</strong>：</p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20221121101754453.png" alt="image-20221121101754453" /></p><h3 id="消融实验"><a class="markdownIt-Anchor" href="#消融实验"></a> 消融实验</h3><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20221121101849808.png" alt="image-20221121101849808" /></p><p>可以看出单独的HF模块对方法也有不错的提升，证明高频信息提取和增强处理对变化检测任务是有效的。同时作者还提出SA和HF模块的处理顺序对结果也有影响，先进行SA处理有利于过滤掉不属于建筑物的对象，从而减少输出中的高频噪声。</p><h3 id="边界精度评估实验"><a class="markdownIt-Anchor" href="#边界精度评估实验"></a> 边界精度评估实验</h3><p>由于提出的方法是为了更好地预测建筑物边界，所以做了相应实验验证提出的方法能够更好地预测变化建筑边界，具体结果如下图所示：</p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20221121101935623.png" alt="image-20221121101935623" /></p><h2 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h2><p><strong>在BCD任务中，针对高频信息进行增强确实有利于结果中边缘的识别</strong>，同时空间注意力和高频信息增强相结合能够一定程度上抑制高频噪声的产生。</p>]]></content>
      
      
      <categories>
          
          <category> 论文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RS </tag>
            
            <tag> change detection </tag>
            
            <tag> attention </tag>
            
            <tag> High frequency enhancement </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>变化检测-特征差异增强篇（一）</title>
      <link href="/posts/29622.html"/>
      <url>/posts/29622.html</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a class="markdownIt-Anchor" href="#概述"></a> 概述</h2><p>目前本人所看的关于变化检测相关的论文，如果按照对特征的处理上来分，本人认为可以分为三种：add、concat、difference。这篇文章将给予对特征差分处理方法做一下展示和总结。</p><p>目前主要的框架还是给予U-Net和孪生网络进行实现的，也就是通过提取多尺度多层次特征来实现特征级别上的变化检测。在特征差分方面，同样可以扩展为很多种方法。</p><h2 id="论文案例展示"><a class="markdownIt-Anchor" href="#论文案例展示"></a> 论文案例展示</h2><h3 id="a-feature-difference-convolutional-neural-network-based-change-detection-method"><a class="markdownIt-Anchor" href="#a-feature-difference-convolutional-neural-network-based-change-detection-method"></a> 《A Feature Difference Convolutional Neural Network-Based Change Detection Method》</h3><p>本篇论文在特征提取方面采用了VGG16，一共提取出三个多尺度特征，之后分别对双时相特征进行差分处理，得到差异特征，随后将联合输入图像的特征进行concat，最后经过卷积层的处理得到了变化图。该方法将多尺度特征进行concat，实现了细粒度和粗粒度特征的融合，保证了差异特征的信息丰富度。</p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20221107185406122.png" alt="image-20221107185406122" /></p><h3 id="difference-enhancement-and-spatialspectral-nonlocal-network-for-change-detection-in-vhr-remote-sensing-images"><a class="markdownIt-Anchor" href="#difference-enhancement-and-spatialspectral-nonlocal-network-for-change-detection-in-vhr-remote-sensing-images"></a> 《Difference Enhancement and Spatial–Spectral Nonlocal Network for Change Detection in VHR Remote Sensing Images》</h3><p>本篇论文主要框架为U-Net+孪生网络。对于差异增强部分既利用上了差异部分，有没有放弃原始特征信息。差异增强模块首先是经过最大池化和平均池化的增强，得到一个差异增强掩码mask（相当于获得一个通道注意力），随后，分别与原始信息进行相乘，得到经过差异增强的特征，最后再做差分操作得到增强差异图。该方法主要想法是首先消除背景和前景的差异表示，减少无关变化对检测结果的影响，然后作用于原始特征，使得背景得到弱化，差异部分得到增强。同时，作者在网络底部使用了一个空间-光谱增强模块，整体结构为非局部注意力，首先利用类似SPPNet的结构对深层特征进行增强，然后进行传统的非局部注意力模块操作进行增强。</p><p>实验结论：本文中的差异增强方法和SSN模块能够很好地提高变化检测的准确度，同时上述类似SPPNet的结构对于结果也有不错的改进。</p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20221107185618554.png" alt="image-20221107185618554" /></p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20221107185636472.png" alt="image-20221107185636472" /></p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20221107185646806.png" alt="image-20221107185646806" /></p><h3 id="mdesnet-multitask-difference-enhanced-siamese-network-for-building-change-detection-in-high-resolution-remote-sensing-images"><a class="markdownIt-Anchor" href="#mdesnet-multitask-difference-enhanced-siamese-network-for-building-change-detection-in-high-resolution-remote-sensing-images"></a> 《MDESNet: Multitask Difference-Enhanced Siamese Network for Building Change Detection in High-Resolution Remote Sensing Images》</h3><p>这篇文章分为了两部分：变化检测+语义分割。本文将语义分割添加到模型中，希望通过语义分割来约束检测准确率。同时本文的差异特征增强模块在后半部分即语义分割部分。作者认为一般的处理特征分为串联和差分，而两者都有优缺点。特征差分能够很好地展示出变化区域，但是很容易收到非变化目标的影响（光照、季节等），可能包含较多的错误；而串联则能够包含更多的信息，但是却不能有效地展示出变化区域。于是提出了两者相结合的方式来增强差异特征，利用串联的丰富信息知道差分识别出非变换区域，防止受干扰。同时在后续的多尺度特征融合部分采用了层层递进的方式来融合特征，充分利用了各个尺度特征信息。</p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20221108113644095.png" alt="image-20221108113644095" /></p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20221108113712080.png" alt="image-20221108113712080" /></p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20221108114026220.png" alt="image-20221108114026220" /></p><h3 id="smd-net-siamese-multi-scale-difference-enhancement-network-for-change-detection-in-remote-sensing"><a class="markdownIt-Anchor" href="#smd-net-siamese-multi-scale-difference-enhancement-network-for-change-detection-in-remote-sensing"></a> 《SMD-Net: Siamese Multi-Scale Difference-Enhancement Network for Change Detection in Remote Sensing》</h3><p>本篇论文主要针对的是大目标边界和小目标检测方面。所以针对深层特征和浅层特征分别做了对应增强。但是整体的架构都是先对差异特征进行增强处理，随后在通道层面上进行串联，保证信息的充分利用。在处理浅层特征上，采用FDM模块进行处理，差异特征经过两个卷积层和一个残差模块，因为浅层特征包含丰富的变化信息，FDM不仅可以增强变化区域特征细节还可以去除一些伪变化的影响。深层特征方面，首先进行最大池化处理，分为几个不同池化大小的特征（进一步扩大感受野），随后经过1*1卷积和上采样得到原特征尺寸的特征图，最后同样进行concat串联输出。该篇论文具体讲解可看之前论文<a href="https://qingy735.gitee.io/posts/41292.html">《SMD-Net：Siamese Multi-Scale Difference-Enhancement Network for Change Detection in Remote Sensing》笔记 (gitee.io)</a></p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20221108114555111.png" alt="image-20221108114555111" /></p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20221108114609306.png" alt="image-20221108114609306" /></p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20221108114617386.png" alt="image-20221108114617386" /></p><h2 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h2><p>在特征差异增强部分，比较有效的方法：<strong>多核池化（扩大感受野）</strong>、<strong>空间-通道注意力（增强变化区域，削弱伪变化区域）</strong>、<strong>串联-差分结合</strong>、<strong>充分利用特征信息</strong>等</p><p>虽然上面提到了几个特征差异方法，但是对于方法的内在原理还不是很明白，后续将在这方面上进行研究。同时上述仅为本人浅陋的想法，如果有不同的想法，欢迎批评指正！</p>]]></content>
      
      
      <categories>
          
          <category> Summary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RS </tag>
            
            <tag> change detection </tag>
            
            <tag> difference enhance </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Zotero+OneDrive实现论文自由</title>
      <link href="/posts/36836.html"/>
      <url>/posts/36836.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>本篇文章主要介绍如何在Zotero中使用OneDrive实现备份</p></blockquote><h2 id="zotero"><a class="markdownIt-Anchor" href="#zotero"></a> Zotero</h2><blockquote><p>Zotero下载地址<a href="https://www.zotero.org/download/">Zotero | Downloads</a></p></blockquote><p>Zotero作为一款非常好用的论文阅读管理器，本人也是一直在使用。但是由于工作电脑和个人笔记本电脑都需要阅读文献，也就衍生出了同步和备份问题，虽然Zotero自带300M空间，但是随着论文下载阅读的增多，突然有一天不能继续备份同步了。所以就发现了可以配合OneDrive来进行备份使用。</p><h3 id="zotero网页插件"><a class="markdownIt-Anchor" href="#zotero网页插件"></a> Zotero网页插件</h3><h4 id="下载"><a class="markdownIt-Anchor" href="#下载"></a> 下载</h4><p>点击上面下载链接，安装浏览器插件即可实现论文自动添加</p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20221107174231484.png" alt="image-20221107174231484" /></p><h4 id="使用说明"><a class="markdownIt-Anchor" href="#使用说明"></a> 使用说明：</h4><p>以下载论文《Attention Is All You Need》为例，打开论文页面，会发现浏览器右上角部分会出现类似图标，点击即可选择保存到Zotero什么位置。同时，可以配合插件<em>Sci-Hub</em>进行使用，同步获取到论文pdf文件。</p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20221107174834763.png" alt="image-20221107174834763" /></p><h3 id="zotero同步与备份"><a class="markdownIt-Anchor" href="#zotero同步与备份"></a> Zotero同步与备份</h3><p>首先可以选择修改Zotero文件存放位置：<strong>编辑</strong>-&gt;<strong>首选项</strong>-&gt;<strong>高级</strong>-&gt;<strong>文件与文件夹</strong>，将下图圈出的部分更改为自己想要存储的位置。</p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20221107175716986.png" alt="image-20221107175716986" /></p><p>然后点击<strong>同步</strong>，自己注册账号然后将数据同步全部勾选，数据同步指的是论文中的注释、链接、标签等（除了附件之外的所有内容），同时数据同步是免费和无限制的。当然你也可以将文件同步全部勾选，但是当云端300M空间用完了就没办法继续使用了。</p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20221107180229339.png" alt="image-20221107180229339" /></p><h2 id="onedrive"><a class="markdownIt-Anchor" href="#onedrive"></a> OneDrive</h2><p>OneDrive是微软公司推出的用来存储文件和照片的云存储空间应用，一般的，个人用户都有5G免费空间可供使用。又因为OneDrive是直接在windows中有存储映射，也就是将文件放入OneDrive文件夹中就可以实现上传备份。所以这里我们可以利用<strong>软链接</strong>的方式实现Zotero存储文件夹和OneDrive文件夹的连接。</p><h3 id="建立软链接"><a class="markdownIt-Anchor" href="#建立软链接"></a> 建立软链接</h3><p>一般的话Zotero的论文都存储在<strong>Zotero/storage</strong>文件夹中，首先将整个文件夹[storage]移动到OneDrive所在的文件夹中。然后<strong>win+R</strong>打开<strong>cmd</strong>，输入<code>mklink /j [storage原来路径] [OneDrive中storage路径]</code>,回车之后便创建了两个文件夹之间的软链接。切记：一定要先把Zotero中的storage文件夹剪切到OneDrive中，然后再输入上述命令，不然会报错文件夹已存在。创建成功后会发现之前的Zotero文件夹中会有一个新的storage文件夹（左下角有个箭头），类似下图这样，出现这样就代表成功了。</p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20221107181751232.png" alt="image-20221107181751232" /></p><h3 id="扩容onedrive"><a class="markdownIt-Anchor" href="#扩容onedrive"></a> 扩容OneDrive</h3><p>当然，如果你觉得5G内存还是不够你使用，也还有办法，只要你拥有教育邮箱，就可以先注册一个Office教育账号(<a href="https://www.microsoft.com/zh-cn/education/products/office">学校和学生免费使用 Microsoft Office 365 | Microsoft 教育</a>)。账号注册完成后就会发现你拥有了一个具有1T的OneDrive账号（如果还不够…)</p>]]></content>
      
      
      <categories>
          
          <category> 论文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Zotero </tag>
            
            <tag> OneDrive </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Remote Sensing Image Change Detection With Transformers》笔记</title>
      <link href="/posts/14776.html"/>
      <url>/posts/14776.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文地址：<a href="https://ieeexplore.ieee.org/document/9491802">《Remote Sensing Image Change Detection With Transformers》</a></p></blockquote><h2 id="摘要"><a class="markdownIt-Anchor" href="#摘要"></a> 摘要</h2><h3 id="问题"><a class="markdownIt-Anchor" href="#问题"></a> 问题</h3><p>对于场景中具有复杂目标的情况，高分辨率遥感变化检测仍具有挑战性。具有相同语义概念的物体在不同时间和空间位置上可能表现出截然不同的光谱特征。最近大多数纯CNN模型仍然很难将时空中的长距离概念联系起来，而Nonlocal self-attention方法虽然可以通过建模像素间稠密关系来实现，但是计算效率很低。</p><h3 id="工作"><a class="markdownIt-Anchor" href="#工作"></a> 工作</h3><blockquote><p>提出双时相图像Transformer（BiT）来高效地建模时空域上下文</p></blockquote><p><strong>核心观点</strong>：感兴趣的高层次概念可以用几个视觉单词来表示，即<strong>语义token</strong></p><p>为了实现这一观点，将双时相图像表示为几个语义token，并使用Transformer解码器在紧凑时空中建模上下文。然后将学习到的丰富的上下文token反馈给像素空间，通过Transformer解码器对元是特惠总能进行优化。BiT相比于纯卷积的baseline模型，计算时间和参数量都大大减少。</p><h2 id="引言"><a class="markdownIt-Anchor" href="#引言"></a> 引言</h2><p><strong>【当前面临的挑战】</strong></p><ol><li>场景中存在复杂的目标</li><li>不同的成像状态</li></ol><p><strong>【模型需要的能力】</strong></p><ol><li>识别场景中感兴趣变化的高层语义信息</li><li>区分真实变化和伪变化</li></ol><h3 id="当前任务不足"><a class="markdownIt-Anchor" href="#当前任务不足"></a> 当前任务不足</h3><p><strong>【纯卷积】</strong></p><p>存在内在的限制，即感受野的大小。通常通过堆叠卷积层或者使用空洞卷积、引入注意力机制来解决。</p><p><strong>【注意力机制】</strong></p><p>例如通道注意力、空间注意力、self-attention，在对全局的建模中是有效的。但是比较难将时空中的的长范围概念进行联系，主要因为他们要么是将注意力单独应用于每个时态的图像用来增强特征，要么是简单地重加权通道或空间维度融合的双时相特征或者图像中。对于self-attention来说，虽然可以对时空中每一对像素的语义联系进行建模，但是计算量很大。</p><h3 id="具体工作"><a class="markdownIt-Anchor" href="#具体工作"></a> 具体工作</h3><ol><li>使用CNN（ResNet）提取输入图像中的高级语义特征，并且使用空间注意力将每个图像的特征转换为一组紧凑的语义token</li><li>使用Transformer编码器对两组语义token进行上下文建模</li><li>通过Transformer解码器将富含丰富上下文信息的token映射到像素空间</li><li>计算两个特征的差异图并且输入到浅层的CNN中进行像素级的变化预测</li></ol><h2 id="网络结构"><a class="markdownIt-Anchor" href="#网络结构"></a> 网络结构</h2><p>整体模型结构由三部分组成：CNN特征提取、Transformer、CNN预测，流程图如下所示</p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20221021130108341.png" alt="image-20221021130108341" /></p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20221021130300735.png" alt="image-20221021130300735" /></p><h3 id="semantic-tokenizer"><a class="markdownIt-Anchor" href="#semantic-tokenizer"></a> Semantic Tokenizer</h3><p>为了获得紧凑的token，标记器学习一组空间注意力图，将特征图空间池化为一组特征（个人认为可以理解为特征压缩类似，将深度特征在空间维度进行压缩，可以看做是空间注意力的一个变种）</p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20221021130701509.png" alt="image-20221021130701509" /></p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20221021130738390.png" alt="image-20221021130738390" /></p><p>由上面公式可以看出最后输出的语义token维度被压缩为了$L \times C $ ，由后面的实验可以看出<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>L</mi></mrow><annotation encoding="application/x-tex">L</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal">L</span></span></span></span>的取值不宜过大。</p><h3 id="transformer-encoder"><a class="markdownIt-Anchor" href="#transformer-encoder"></a> Transformer Encoder</h3><p>本文中采取了和ViT类似的方法，将Norm层放在了MSA/MLP前面执行，PreNorm已经被证明有更稳定更有能力。而对于输入的两组token（双时相图像）首先进行concat，然后添加位置编码后输入Encoder部分。</p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20221021131722563.png" alt="image-20221021131722563" /></p><h3 id="transformer-decoder"><a class="markdownIt-Anchor" href="#transformer-decoder"></a> Transformer Decoder</h3><p>作者将最初的提取的深层特征作为query，Encoder输出部分作为key和value，同时Decoder部分为一个孪生网络，分别作用于两种图像，输入部分从Encode输出一分为二得到</p><h3 id="cnn-backbone"><a class="markdownIt-Anchor" href="#cnn-backbone"></a> CNN Backbone</h3><p>使用ResNet18提取双时相图像特征图，同时对最后一层做出了相应修改（详细见原论文）</p><h3 id="prediction-head"><a class="markdownIt-Anchor" href="#prediction-head"></a> Prediction Head</h3><p>使用一个非常浅的FCN对差异图进行变化预测，即首先通过相减得到两个特征的差异图，之后输入到浅层卷积模块得到通道数为2的变化检测图（分别表示变化or未变化）</p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20221021132745003.png" alt="image-20221021132745003" /></p><h3 id="loss-function"><a class="markdownIt-Anchor" href="#loss-function"></a> Loss Function</h3><p>使用简单的交叉熵损失进行模型优化</p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20221021132847841.png" alt="image-20221021132847841" /></p><h2 id="实验分析"><a class="markdownIt-Anchor" href="#实验分析"></a> 实验分析</h2><p>一下为用来比较的模型的详细说明：</p><ol><li><strong>Base</strong>: our baseline model that consists of the CNN backbone (ResNet18_S5) and the prediction head.</li><li><strong>BIT</strong>: our BIT-based model with a light backbone (ResNet18_S4).</li><li><strong>Base_S4</strong>: a light CNN backbone (ResNet18_S4) + the prediction head.</li><li><strong>Base_S3</strong>: a much light CNN backbone (ResNet18_S3) + the prediction head.</li><li><strong>BIT_S3</strong>: our BIT-based model with a much light backbone (ResNet18_S3).</li></ol><p>在基于<strong>LEVIR-CD</strong>、<strong>WHU-CD</strong>、<strong>DSIFN-CD</strong>数据集上的相关实验如图所示，可以看出BiT在三个数据集上都达到了最好的水平，尤其是在DSIFN-CD数据集上的F1超出其他最好的算法近五个点。同时在Base部分也同样具有很不错的效果，这可能归功于对全局特征的高度抽象，增强了网络的学习能力。</p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20221021133246859.png" alt="image-20221021133246859" /></p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20221021133649615.png" alt="image-20221021133649615" /></p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20221021133700422.png" alt="image-20221021133700422" /></p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20221021133706244.png" alt="image-20221021133706244" /></p><h3 id="模型参数和计算量"><a class="markdownIt-Anchor" href="#模型参数和计算量"></a> 模型参数和计算量</h3><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20221021133731563.png" alt="image-20221021133731563" /></p><p>可以看出BiT在计算量和参数上面也更占优势，在保持高准确度的同时还保证了参数和计算量很小。</p><p>同时可以从下面两张图看出来相比于不使用Transformer而言，BIT模型具有更好的稳定性和泛化能力</p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20221021133913831.png" alt="image-20221021133913831" /></p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20221021133942528.png" alt="image-20221021133942528" /></p><h3 id="消融实验"><a class="markdownIt-Anchor" href="#消融实验"></a> 消融实验</h3><p>将深度语义特征提炼为密度更高的语义token能够更好地提升模型性能，使用高度提炼的语义token作为Transformer输入既能减少复杂度又可以减少深度特征中的信息冗余，使得有用的语义信息更加紧凑</p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20221021134103555.png" alt="image-20221021134103555" /></p><p>其他消融实验：</p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20221021134233689.png" alt="image-20221021134233689" /></p><h3 id="语义token可视化"><a class="markdownIt-Anchor" href="#语义token可视化"></a> 语义token可视化</h3><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20221021135718537.png" alt="image-20221021135718537" /></p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20221021135745032.png" alt="image-20221021135745032" /></p><h2 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h2><p>本文只使用了比较简单的结构就实现了比较好的效果，其中有几个点值得以后着重思考和实验：</p><ol><li>语义token，即压缩凝练深层特征使网络学习能力增强</li><li>Transformer，Transformer确实可以提高网络的鲁棒性等，并且能够大大增强网络的学习能力</li><li>BiT还有很多值得改进的方法，当然也可以直接将他看做是一个Baseline，例如：损失函数（正负样本不均衡问题）、特征提取部分（采用特征提取能力更强的网络）等</li></ol>]]></content>
      
      
      <categories>
          
          <category> 论文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RS </tag>
            
            <tag> change detection </tag>
            
            <tag> attention </tag>
            
            <tag> Transformer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>目标检测综述（2001-2021）</title>
      <link href="/posts/48279.html"/>
      <url>/posts/48279.html</url>
      
        <content type="html"><![CDATA[<h1 id="目标检测综述2001-2021"><a class="markdownIt-Anchor" href="#目标检测综述2001-2021"></a> 目标检测综述（2001-2021）</h1><blockquote><p>本文参考于文章<a href="https://zhuanlan.zhihu.com/p/382702930">目标检测究竟发展到了什么程度？| 目标检测发展22年 - 知乎 (zhihu.com)</a>、<a href="https://blog.csdn.net/u012655441/article/details/120686525">目标检测综述_RyanC3的博客-CSDN博客_目标检测文献综述</a>、<a href="https://zhuanlan.zhihu.com/p/539932517">YOLO家族进化史（v1-v7） - 知乎 (zhihu.com)</a>，编写目的为自身学习方便，不存在转载盈利等！如有问题请及时联系本人。</p></blockquote><h2 id="背景"><a class="markdownIt-Anchor" href="#背景"></a> 背景</h2><p>计算机视觉问题主要分为四个方向：图像分类、图像检测、语义分割和实例分割。作为计算机视觉的基本问题之一，目标检测构成了许多其他视觉任务的基础，例如实例分割、图像标注和目标追踪等；从检测应用的角度看：行人检测、面部检测、文本检测、遥感目标检测统称为目标检测的五大应用。</p><h2 id="目标检测算法发展脉络"><a class="markdownIt-Anchor" href="#目标检测算法发展脉络"></a> 目标检测算法发展脉络</h2><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/v2-e0a477f5a1fb362f72123676ef403894_720w.webp" alt="img" /></p><h3 id="传统目标检测算法"><a class="markdownIt-Anchor" href="#传统目标检测算法"></a> 传统目标检测算法</h3><p>传统的目标检测算法主要基于手工提取特征。传统的检测算法流程如下：</p><ol><li>选取感兴趣的区域（ROI），选取可能包含物体的区域</li><li>对可能包含物体的区域进行特征提取</li><li>对提取的特征进行检测分类</li></ol><h4 id="viola-jones-detector"><a class="markdownIt-Anchor" href="#viola-jones-detector"></a> Viola Jones Detector</h4><p><strong>VJ</strong>(Viola Jones)检测器采用滑动窗口的方式以检查目标是否在窗口之中，该检测器看起来似乎很简单稳定，但是由于计算量庞大导致时间复杂度极高，为了解决该项问题，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>V</mi><mi>J</mi></mrow><annotation encoding="application/x-tex">VJ</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="mord mathnormal" style="margin-right:0.09618em;">J</span></span></span></span>检测器通过合并三项技术极大地提高了检测速度，三项技术分别为：1）特征的快速计算方法-积分，2）有效的分类器学习方法-AdaBoost，以及3）高效的分类策略-级联结构的设计</p><h4 id="hog-detector"><a class="markdownIt-Anchor" href="#hog-detector"></a> HOG Detector</h4><p><strong>HOG</strong>（Histogram of Oriented Gradients）检测器于2005年提出，是当时尺度不变性（Scale Invariant Feature Transform)和形状上下文（Shape Contexts）的重要改进，为了平衡特征不变性（包括平移，尺度，光照等）和非线性（区分不同的对象类别），<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>H</mi><mi>O</mi><mi>G</mi></mrow><annotation encoding="application/x-tex">HOG</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mord mathnormal">G</span></span></span></span>通过在均匀间隔单元的密集网格上计算重叠的局部对比度归一化来提高检测准确率，因此<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>H</mi><mi>O</mi><mi>G</mi></mrow><annotation encoding="application/x-tex">HOG</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mord mathnormal">G</span></span></span></span>检测器是基于本地像素块进行特征直方图提取的一种算法，它在目标局部变形和受光照影响下都有很好的稳定性。<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>H</mi><mi>O</mi><mi>G</mi></mrow><annotation encoding="application/x-tex">HOG</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mord mathnormal">G</span></span></span></span>为后期很多检测方法奠定了重要基础，相关技术被广泛应用于计算机视觉各大应用。</p><h4 id="dpm-detector"><a class="markdownIt-Anchor" href="#dpm-detector"></a> DPM Detector</h4><p>作为VOC 2007-2009目标检测挑战赛的冠军，<strong>DPM</strong>（Deformable Parts Model）是目标检测传统算法中当之无愧的SOTA（State Of Art）算法。<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>D</mi><mi>P</mi><mi>M</mi></mrow><annotation encoding="application/x-tex">DPM</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span></span></span></span>于2008年提出，相比于<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>H</mi><mi>O</mi><mi>G</mi></mrow><annotation encoding="application/x-tex">HOG</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mord mathnormal">G</span></span></span></span>，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>D</mi><mi>P</mi><mi>M</mi></mrow><annotation encoding="application/x-tex">DPM</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span></span></span></span>做了很多改进，因此该算法可以看作<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>H</mi><mi>O</mi><mi>G</mi></mrow><annotation encoding="application/x-tex">HOG</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mord mathnormal">G</span></span></span></span>的延伸算法。<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>D</mi><mi>P</mi><mi>M</mi></mrow><annotation encoding="application/x-tex">DPM</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span></span></span></span>算法由一个主过滤器（Root-filter）和多个辅过滤器（Part-filters）组成，通过硬负挖掘（Hard negative mining），边框回归（Bounding box regression）和上下文启动（Context priming）技术改进检测精度。作为传统目标检测算法SOTA，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>D</mi><mi>P</mi><mi>M</mi></mrow><annotation encoding="application/x-tex">DPM</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span></span></span></span>方法运行速度快，能够适应物体形变，但它无法适应大幅度的旋转，因此稳定性差。</p><h4 id="局限性"><a class="markdownIt-Anchor" href="#局限性"></a> 局限性</h4><p>传统的检测算法的一些缺点如下：</p><ol><li>识别效果不够好，准确率不高</li><li>计算量较大，运行速度慢</li><li>可能产生多个正确识别的结果</li></ol><h3 id="anchor-based中的two-stage目标检测算法"><a class="markdownIt-Anchor" href="#anchor-based中的two-stage目标检测算法"></a> Anchor-Based中的Two-stage目标检测算法</h3><p>基于手工提取特征的传统目标检测算法进展缓慢，性能低下。直到2012年卷积神经网络（Convolutional Neural Networks，CNNs）的兴起将目标检测推向了新的台阶。基于CNNs的目标检测算法主要有两条技术发展路线：anchor-based和anchor-free方法，而anchor-based方法则包括一阶段和二阶段检测算法（二阶段目标检测算法一般比一阶段精度高，但一阶段检测算法速度会更快）。</p><p>Two-stage算法主要分为以下两个阶段：</p><p><strong>Stage1</strong>：从图像中生成region proposals</p><p><strong>Stage2</strong>：从region proposals生成最终的物体边框</p><h4 id="rcnn"><a class="markdownIt-Anchor" href="#rcnn"></a> RCNN</h4><blockquote><p>论文链接：<a href="https://openaccess.thecvf.com/content_cvpr_2014/papers/Girshick_Rich_Feature_Hierarchies_2014_CVPR_paper.pdf">RCNN</a></p><p>代码链接：<a href="https://github.com/rbgirshick/rcnn">https://github.com/rbgirshick/rcnn</a></p></blockquote><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/v2-554d6976d29262731db56def37366589_720w.webp" alt="img" /></p><p><strong>【简介】</strong> RCNN首先通过选择性搜索算法Selective Search从一组对象候选框中选择可能出现的对象框，然后将这些选择出来的对象框中的图像resize到某一固定尺寸的图像，并输入到CNN模型（经过ImageNet数据集上训练过的CNN模型，如AlexNet）特征提取，最后将提取出的特征送入<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>S</mi><mi>V</mi><mi>M</mi></mrow><annotation encoding="application/x-tex">SVM</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span></span></span></span>分类器来预测该对象框中的图像是否存在待检测目标，并进一步预测该检测目标属于哪一类。</p><p><strong>【性能】</strong> RCNN算法在VOC-07数据集上取得了非常显著的效果，平均精度由33.7%（DPM-V5，传统检测的SOTA算法）提升到58.5%。相比于传统检测算法，基于深度学习的检测算法在精度上取得了质的飞跃。</p><p><strong>【不足】</strong> 重叠框（一张图片大约2000多个候选框）特征的冗余计算使得整个网络的检测速度变得很慢（使用GPU的情况下检测一张图片大约需要14s）。</p><p>为了减少大量重叠框带来的冗余计算，K.He等人提出了SPPNet</p><h4 id="sppnet"><a class="markdownIt-Anchor" href="#sppnet"></a> SPPNet</h4><blockquote><p>论文链接：<a href="https://link.springer.com/content/pdf/10.1007/978-3-319-10578-9_23.pdf">SPPNet</a></p><p>代码链接：<a href="https://github.com/yifanjiang97/sppnet-pytorch">GitHub - yifanjiang97/sppnet-pytorch: A simple Spatial Pyramid Pooling layer which could be added in CNN</a></p></blockquote><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/v2-43a86774acdaecc0209c8a049601c251_720w.webp" alt="img" /></p><p><strong>【简介】</strong> SPPNet提出了一种空间金字塔池化层（Spatial Pyramid Pooling Layer，SPP）。它的主要思路是对于一副图像分成若干尺度的图像块（比如一副图像分成1份，4份，8份等），然后对每一块提取的特征融合在一起，从而兼顾多个尺度的特征。SPP使得网络在全连接层之前能生成固定尺度的特征表示，而不管输入图像尺寸如何。当时用SPP网络进行目标检测时，整个图像只需要计算一次即可生成相应的特征图，不管候选框尺寸如何，经过SPP之后，都能生成固定尺寸的特征表示图，这避免了卷积特征图的重复计算。</p><p><strong>【性能】</strong> 相比于RCNN算法，SPPNet在Pascal-07数据集上不牺牲检测精度（VOC-07，mAP=59.2%）的情况下，推理速度提高了20多倍。</p><p><strong>【不足】</strong> 与RCNN一样，SPP也需要训练CNN提取特征，然后训练SVM分类这些特征，这需要巨大的存储空间，并且多阶段训练的流程也很繁琐。除此之外，SPPNet只对全连接层进行微调，而忽略了网络其他层的参数。</p><p>为了解决以上存在的一些不足，2015年R.Girshick等人提出Fast RCNN</p><h4 id="fast-rcnn"><a class="markdownIt-Anchor" href="#fast-rcnn"></a> Fast RCNN</h4><blockquote><p>论文链接：<a href="https://openaccess.thecvf.com/content_iccv_2015/papers/Girshick_Fast_R-CNN_ICCV_2015_paper.pdf">https://openaccess.thecvf.com/content_iccv_2015/papers/Girshick_Fast_R-CNN_ICCV_2015_paper.pdf</a></p><p>代码链接：<a href="https://github.com/rbgirshick/fast-rcnn">rbgirshick/fast-rcnn: Fast R-CNN (github.com)</a></p></blockquote><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20221017181634870.png" alt="image-20221017181634870" /></p><p><strong>【简介】</strong> Fast RCNN是RCNN和SPPNet的改进版，该网络使得我们可以可以在相同的网络配置下同时训练一个检测器和边框回归器。该网络首先输入图像，图像被传递到CNN中提取特征，并返回感兴趣的区域RoI，之后在RoI上运行RoI池化层以保证每个区域的尺寸相同，最后这些区域的特征被传递到全连接层的网络中进行分类，并用Softmax和线性回归层同时返回边界框。</p><p><strong>【性能】</strong> Fast RCNN在VOC-07数据集上将检测精度mAP从58.5%提高到70.0%，检测速度比RCNN提高了200倍。</p><p><strong>【不足】</strong> FAST RCNN仍然选择用选择性搜索算法来寻找感兴趣的区域，这一过程通常比较慢，与RCNN不同的是，FAST RCNN处理一张图片大约需要2s，但是在大型真实数据集上，这种速度仍然不够理想。</p><p>问题来了：可不可以直接使用CNN模型来直接生成候选框？基于此Faster RCNN的提出完美解决了这一问题</p><h4 id="faster-rcnn"><a class="markdownIt-Anchor" href="#faster-rcnn"></a> Faster RCNN</h4><blockquote><p>论文链接：<a href="https://arxiv.org/pdf/1506.01497.pdf">https://arxiv.org/pdf/1506.01497.pdf</a></p><p>代码链接：<a href="https://github.com/jwyang/faster-rcnn.pytorch">GitHub - jwyang/faster-rcnn.pytorch: A faster pytorch implementation of faster r-cnn</a></p></blockquote><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/v2-5816b6fff1242fb25011a83eb249972a_720w.webp" alt="img" /></p><p><strong>【简介】</strong> Faster RCNN是第一个端到端，最接近实时性能的深度学习检测算法，该网络的主要创新点就是提出了区域选择网络用于生成候选框，能极大提升检测框的生成速度。该网络首先输入图像到卷积网络中，生成该图像的特征映射。在特征映射上应用Region Proposal Network，返回object proposals和相应分数。应用RoI池化层，将所有的proposals修正到同样尺寸。最后将proposals传递到全连接层，生成目标物体的边界框。</p><p><strong>【性能】</strong> 该网络在当时VOC-07，VOC-12和COCO数据集上实现了SOTA精度，其中COCO mAP@.5=42.7%，COCO mAP@[.5，.95]=21.9%，VOC07 mAP=73.2%，VOC12 mAP=70.4，17fps with ZFNet</p><p><strong>【不足】</strong> 虽然Faster RCNN的精度更高，速度更快，也更接近于实时性能，但它在后续的检测阶段中仍存在一些计算冗余；除此之外，如果IOU阈值设置的低，会引起噪声检测的问题，如果IOU设置的高，则会引起过拟合。</p><h4 id="fpn"><a class="markdownIt-Anchor" href="#fpn"></a> FPN</h4><blockquote><p>论文链接：<a href="https://openaccess.thecvf.com/content_cvpr_2017/papers/Lin_Feature_Pyramid_Networks_CVPR_2017_paper.pdf">https://openaccess.thecvf.com/content_cvpr_2017/papers/Lin_Feature_Pyramid_Networks_CVPR_2017_paper.pdf</a></p><p>代码链接：<a href="https://github.com/jwyang/fpn.pytorch">jwyang/fpn.pytorch: Pytorch implementation of Feature Pyramid Network (FPN) for Object Detection (github.com)</a></p></blockquote><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/v2-15dd683195074035119181da76d458f1_720w.webp" alt="img" /></p><p><strong>【简介】</strong> 2017年，T.-Y.Lin等人在Faster RCNN的基础上进一步提出了特征金字塔网络<strong>FPN</strong>(Feature Pyramid Networks)技术。在FPN技术出现之前，大多数检测算法的检测头都位于网络的最顶层(最深层)，虽说最深层的特征具备更丰富的语义信息，更有利于物体分类，但更深层的特征图由于空间信息的缺乏不利于物体定位，这大大影响了目标检测的定位精度。为了解决这一矛盾，FPN提出了一种具有横向连接的自上而下的网络架构，用于在所有具有不同尺度的高底层都构筑出高级语义信息。FPN的提出极大促进了检测网络精度的提高(尤其是对于一些待检测物体尺度变化大的数据集有非常明显的效果)。</p><p><strong>【性能】</strong> 将FPN技术应用于Faster RCNN网络之后，网络的检测精度得到了巨大提高(COCO mAP@.5=59.1%, COCO mAP@[.5,.95]=36.2%)，再次成为当前的SOTA检测算法。此后FPN成为了各大网络(分类，检测与分割)提高精度最重要的技术之一。</p><h4 id="cascade-rcnn"><a class="markdownIt-Anchor" href="#cascade-rcnn"></a> Cascade RCNN</h4><blockquote><p>论文链接：<a href="https://openaccess.thecvf.com/content_cvpr_2018/papers/Cai_Cascade_R-CNN_Delving_CVPR_2018_paper.pdf">https://openaccess.thecvf.com/content_cvpr_2018/papers/Cai_Cascade_R-CNN_Delving_CVPR_2018_paper.pdf</a></p><p>代码链接：<a href="https://github.com/zhaoweicai/cascade-rcnn">zhaoweicai/cascade-rcnn: Caffe implementation of multiple popular object detection frameworks (github.com)</a></p></blockquote><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/v2-a9c78d59a62d2be6a733657ed0d73695_720w.webp" alt="img" /></p><p><strong>【简介】</strong> Faster RCNN完成了对目标候选框的两次预测，其中RPN一次，后面的检测器一次，而<strong>Cascade RCNN</strong>则更进一步将后面检测器部分堆叠了几个级联模块，并采用不同的IOU阈值训练，这种级联版的Faster RCNN就是Cascade RCNN。通过提升IoU阈值训练级联检测器，可以使得检测器的定位精度更高，在更为严格的IoU阈值评估下，Cascade R-CNN带来的性能提升更为明显。Cascade RCNN将二阶段目标检测算法的精度提升到了新的高度。</p><p><strong>【性能】</strong> Cascade RCNN在COCO检测数据集上，不添加任何Trick即可超过现有的SOTA单阶段检测器，此外使用任何基于RCNN的二阶段检测器来构建Cascade RCNN，mAP平均可以提高2-4个百分点。</p><h3 id="anchor-based中的one-stage目标检测算法"><a class="markdownIt-Anchor" href="#anchor-based中的one-stage目标检测算法"></a> Anchor-based中的one-stage目标检测算法</h3><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/5a63623f9997c8d599cd7726e6960f63.png" alt="img" /></p><h4 id="yolo-v1"><a class="markdownIt-Anchor" href="#yolo-v1"></a> YOLO v1</h4><blockquote><p>论文链接：<a href="https://www.cv-foundation.org/openaccess/content_cvpr_2016/papers/Redmon_You_Only_Look_CVPR_2016_paper.pdf">https://www.cv-foundation.org/openaccess/content_cvpr_2016/papers/Redmon_You_Only_Look_CVPR_2016_paper.pdf</a></p><p>代码链接：<a href="https://github.com/abeardear/pytorch-YOLO-v1">abeardear/pytorch-YOLO-v1: an experiment for yolo-v1, including training and testing. (github.com)</a></p></blockquote><p><strong>【概述】</strong></p><p>以往的二阶段检测算法，如Faster-RCNN，在检测时需要经过两步：边框回归和softmax分类。由于大量预选框的生成，该方法检测精度较高，但实时性较差。</p><p>鉴于此，YOLO之父Joseph Redmon创新性的提出了通过直接回归的方式获取目标检测的具体位置信息和类别分类信息，极大的降低了计算量，显著提升了检测的速度，达到了45FPS（Fast YOLO版本达到了155FPS）。</p><p><strong>【思路】</strong></p><ol><li>将输入图片缩放至448×448×3</li><li>经过卷积网络backbone提取特征图</li><li>将提取到的特征图送入两层全连接层，最终输出7×7×30大小的特征图</li></ol><p>更进一步讲，就是将输入的图片整体划分为SxS的网格(例如:7x7)，物体中心落在哪一个格子中，那么该格子就负责该物体的检测，每一个格子预测B个边框，输出S×S(B×5+C)。其中5为一个五元组（c,x,y,w,h），分别为confidence置信度，x、y为边框坐标，w、h为边框高和宽；C为class个数，表示为one-hot形式</p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/v2-08505cd785f4c5a971d1d7bcf853e1a9_720w.webp" alt="img" /></p><p>对于YOLOv1而言，常用的是7x7的网格划分，预测2个边框，输出7x7x30，30个通道包含每个类别的概率+边框置信度+边框位置信息。</p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/v2-719303fe9618ec3220dc3f382c024775_r.jpg" alt="img" /></p><p><strong>【网络结构】</strong></p><p>骨干网络：GoogLeNet网络构成：24个卷积层+2个全连接层值得注意的是：YOLOv1版本在第一个卷积层使用的是7x7卷积。</p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/v2-d6f3a26b1cb6459c4c3db9f781e18012_r.jpg" alt="img" /></p><p><strong>【优势和不足】</strong></p><p>（1）优势：与二阶段检测算法相比，利用直接回归的方式，大大缩小了计算量，提升了运行速度。</p><p>（2）不足：每一个网格仅2个预测框，当存在多物体密集挨着的时候或者小目标的时候，检测效果不好。</p><h4 id="yolo-v2"><a class="markdownIt-Anchor" href="#yolo-v2"></a> YOLO v2</h4><p><strong>【概述】</strong></p><p>针对YOLOv1的问题，YOLO之父Joseph Redmon不甘屈服，对v1版本进行了大刀阔斧的改革，继而提出了YOLOv2网络，重要改革举措包括：</p><ol><li><p>更换骨干网络；</p></li><li><p>引入PassThrough;</p></li><li><p>借鉴二阶段检测的思想，添加了预选框。</p></li></ol><p><strong>【思路】</strong></p><p>YOLOv2检测算法是将图片输入到darknet19网络中提取特征图，然后输出目标框类别信息和位置信息。</p><p><strong>【网络结构】</strong></p><p>骨干网络：Darknet-19，如下图所示（针对1000类别的分类任务）：</p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/v2-ce51711358facacb0473b91ed145706a_720w.webp" alt="img" /></p><p>只不过对于检测任务而言，需要使用3个3x3卷积（输出通道1024）取代上表中最后的卷积层，再添加passthrough操作后，进行输出。值得注意的是：已不再使用7x7这样的大卷积核。</p><p><strong>trick1: PassThrough操作</strong></p><p>该方法将28x28x512调整为14x14x2048，后续v5版本中的Focus操作类似该操作。将生成的14x14x2048与原始的14x14x1024进行concat操作。</p><p><strong>trick2: 引入anchor，调整位置预测为偏移量预测</strong>借鉴了Faster-RCNN的思想，引入了anchor，将目标框的位置预测由直接预测坐标调整为偏移量预测，大大降低了预测难度，提升了预测准确性。</p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/v2-ee474e380853c6befe3ef8c0d5ea81fe_r.jpg" alt="img" /></p><p><strong>【优势与不足】</strong></p><p>（1）优势：利用passthrough操作对高低层语义信息进行融合，在一定程度上增强了小目标的检测能力。采用小卷积核替代7x7大卷积核，降低了计算量。同时改进的位置偏移的策略降低了检测目标框的难度。</p><p>（2）尚未采用残差网络结构。且当存在多物体密集挨着的时候或者小目标的时候，检测效果有待提升。</p><h4 id="yolo-v3"><a class="markdownIt-Anchor" href="#yolo-v3"></a> YOLO v3</h4><p><strong>【概述】</strong></p><p>针对YOLOv2的问题，YOLO之父Joseph Redmon决定深化改革。俗话说“他山之石，可以攻玉”，于是乎吸收当下较好的网络设计思想，引入了残差网络模块。重要深化改革的举措：</p><ol><li><p>在darknet19的基础上推陈出新，引入残差，并加深网络深度，提出了Darkent53。</p></li><li><p>借鉴了特征金字塔的思想，在三个不同的尺寸上分别进行预测。</p></li></ol><p><strong>【思路】</strong></p><p>YOLOv3检测算法是将图片输入到darknet53网络中提取特征图，然后借鉴特征金字塔网络思想，将高级和低级语义信息进行融合，在低、中、高三个层次上分别预测目标框，最后输出三个尺度的特征图信息（52×52×75、26×26×75、13×13×75）。</p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/v2-c6dc1783f9bbbf56c947e6ed30f0e554_720w.webp" alt="img" /></p><p>其中， 52×52 大小的特征图负责检测小目标， 26×26大小的特征图负责检测中目标， 13×13大小的特征图负责检测大目标。在训练之前，预先通过聚类的方式生成大、中、小三个尺寸的预选框，共9个。预测时最终会输出3x(20+1+4)的数据。一个目标框的输出数据如下：</p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/v2-4644e4e71881c135216013c541b94faa_r.jpg" alt="img" /></p><p><strong>【网络结构】</strong></p><p>骨干网络：Darknet-53</p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/v2-bbde78232f75df523732846d4f162121_r.jpg" alt="img" /></p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20221017194908833.png" alt="image-20221017194908833" /></p><p><strong>tricks:特征金字塔</strong> 该版本借鉴了特征金字塔的思想，只不过与普通的FPN相比略有不同。第一：选择融合的层不同。第二：融合方式不同。对于普通FPN而言，是将高级语义的小尺寸特征图上采样后与上一层进行逐像素相加的融合，融合后尺寸大小和通道数保持不变。而对于YOLOv3而言，是将高级语义的小尺寸特征图上采样到SxS后，选择前面的同为SxS的特征图进行通道方向拼接的融合，融合后，尺寸大小不变但通道数为两者之和。</p><p><strong>【优势】</strong></p><p>基本解决了小目标检测的问题，在速度和精度上实现了较好的平衡。</p><h4 id="yolo-v4"><a class="markdownIt-Anchor" href="#yolo-v4"></a> YOLO v4</h4><p><strong>【概述】</strong></p><p>Alexey Bochkovskiy对YOLOv3进行了升级改造，核心思想与之前基本一致，不过从数据处理、主干网络、网络训练、激活函数、损失函数等方面对子结构进行了大量的改进。</p><p><strong>【思路】</strong></p><p>YOLOv4检测算法的基本流程与v3类似，重要升级举措包括：</p><ol><li>将CSP结构融入Darknet53中，生成了新的主干网络CSPDarkent53</li><li>采用SPP空间金字塔池化来扩大感受野</li><li>在Neck部分引入PAN结构，即FPN+PAN的形式</li><li>引入Mish激活函数</li><li>引入Mosaic数据增强</li><li>训练时采用CIOU_loss ，同时预测时采用DIOU_nms</li></ol><p><strong>【网络结构】</strong></p><p>骨干网络: CSPDarknet53（含spp）Neck: FPN+PAN</p><p>检测头：同v3版本</p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/v2-1601febbcce4d1aeea38420342a9548e_720w.webp" alt="img" /></p><p><strong>tricks1：输入数据采用Mosaic数据增强</strong></p><p>借鉴了2019年CutMix的思路，并在此基础上进行了拓展，Mosaic数据增强方式采用了4张图片，随机缩放、随机裁剪、随机排布的方式进行拼接。从而对小目标的检测起到进一步的提升的作用。</p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/v2-e286bec1c2402fc3f18c3ae9684829dd_r.jpg" alt="img" /></p><p><strong>tricks2：修改骨干网络为</strong>CSPDarknet53</p><p>借鉴了2019CSPNet的经验，并结合先前的Darkent53，获得了新的骨干网络CSPDarknet53。在CSPNet中，存在如下操作，即：进入每个stage先将数据划分为两部分，如下图中的part1、part2，区别在于CSPNet中直接对通道维度进行划分，而YOLOv4应用时是利用两个1x1卷积层来实现的。两个分支的信息在交汇处进行Concat拼接。</p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20221017195450370.png" alt="image-20221017195450370" /></p><p>**tricks3：**引入spp空间金字塔池化模块</p><p>引入SPP结构来增加感受野，采用1x1、5x5、9x9、13x13的最大池化的方式，进行多尺度融合，输出按照通道进行concat融合。类似于语义分割网络PSPNet中的PPM模块。</p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/v2-806d09570b65a962d31806fa66f0c8ce_r.jpg" alt="img" /></p><p><strong>tricks4：在Neck部分采用FPN+PAN的结构</strong></p><p>借鉴2018年图像分割领域PANet, 相比于原始的PAN结构，YOLOV4实际采用的PAN结构将addition的方式改为了concatenation。如下图：</p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20221017195625745.png" alt="image-20221017195625745" /></p><p>由于FPN结构是自顶向下的，将高级特征信息以上采样的方式向下传递，但是融合的信息依旧存在不足，因此YOLOv4在FPN之后又添加了PAN结构，再次将信息从底部传递到顶部，如此一来，FPN自顶向下传递强语义信息，而PAN则自底向上传递强定位信息，达到更强的特征聚合效果。整个NECK结构如下图所示：</p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/v2-57f52863b72ea01a6392ab1c1d75e848_r.jpg" alt="img" /></p><p><strong>【优势】</strong></p><p>对比v3和v4版本，在COCO数据集上，同样的FPS等于83左右时，Yolov4的AP是43，而Yolov3是33，直接上涨了10个百分点。</p><h4 id="yolo-v5"><a class="markdownIt-Anchor" href="#yolo-v5"></a> YOLO v5</h4><p><strong>【简述】</strong></p><p>YOLOv5版本 UltralyticsLLC 公司推出的，是在YOLOv4的基础上做了少许的修补，由于改进比较小，仅做简单介绍。改进譬如：</p><ol><li><p>将v4版本骨干网络中的csp结构拓展到了NECK结构中。</p></li><li><p>增加了FOCUS操作，但是后续6.1版本中又剔除掉了该操作，使用一个6x6的卷积进行了替代。</p></li><li><p>使用SPPF结构代替了SPP。</p></li></ol><p><strong>【思路】</strong></p><p>YOLOv5检测算法的思路与v4基本一致，此处不再赘述。</p><p><strong>【网络结构】</strong></p><p>骨干网络: CSPDarknet53（含SPPF）</p><p>Neck: FPN+PAN</p><p>检测头：同v3版本</p><p><strong>tricks1：SPPF</strong></p><p>主要区别就是MaxPool由原来的并行调整为了串行，值得注意的是：串行两个 5 x 5 大小的 MaxPool 和一个 9 x 9 大小的 MaxPool 是等价的，串行三个 5 x 5 大小的 MaxPool 层和一个 13 x 13 大小的 MaxPool 是等价的。虽然并行和串行的效果一样，但是串行的效率更高，降低了耗时。</p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/v2-4b40bb90c2598deee5a16d6df8be240d_r.jpg" alt="img" /></p><p><strong>tricks2：自适应锚框计算</strong></p><p>比较简单，就是把锚框的聚类改为了使用程序进行自适应计算，此处就不再赘述了。</p><p><strong>tricks3：Focus操作</strong> 后续版本剔除了该操作</p><p><img src="https://pic3.zhimg.com/80/v2-85281ec1465e9ff7a50c7b0e0ae57ac2_720w.webp" alt="img" /></p><h4 id="yolo-v6"><a class="markdownIt-Anchor" href="#yolo-v6"></a> YOLO v6</h4><p><strong>【概述】</strong></p><p>YOLOv6是由美团推出的，所做的主要工作是为了更加适应GPU设备，将2021年的RepVGG结构引入到了YOLO。思路比较简单，本文仅做少许介绍。</p><p><strong>【思路】</strong></p><p>YOLOv6检测算法的思路类似YOLOv5（backbone+neck）+YOLOX（head）</p><p>主要改动：</p><ol><li><p>骨干网络由CSPDarknet换为了EfficientRep</p></li><li><p>Neck是基于Rep和PAN构建了Rep-PAN</p></li><li><p>检测头部分模仿YOLOX，进行了解耦操作，并进行了少许优化。</p></li></ol><p><strong>【网络结构】</strong></p><p>骨干网络: EfficientRep</p><p>Neck: FPN+RepPAN</p><p>检测头：类似YOLOX</p><p><strong>tricks1：引入RepVGG</strong></p><p>按照RepVGG的思路，为每一个3x3的卷积添加平行了一个1x1的卷积分支和恒等映射分支，然后在推理时融合为3x3的结构，这种方式对计算密集型的硬件设备会比较友好。</p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/v2-b1a80269739f17f47cf29c51b9e06e1a_r.jpg" alt="img" /></p><p><strong>tricks2：骨干网络EfficientRep</strong></p><p>把backbone中stride=2的卷积层换成了stride=2的RepConv层,并且也将CSP-Block修改为了RepBlock。</p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20221018093913212.png" alt="image-20221018093913212" /></p><p><strong>tricks3：Neck中引入Rep</strong></p><p>为了进一步降低硬件上的耗时，将PAN中的CSP-Block替换为RepBlock, 从而生成了Rep-PAN结构。<img src="https://gitee.com/qingy735/blogimg/raw/master/img/v2-37f89da0300c3c27d720c17f89864169_720w.webp" alt="img" /></p><p><strong>tricks4：对检测头解耦并重新设计了高效的解耦头</strong>为了加快收敛速度和降低检测头复杂度，YOLOv6模仿YOLOX对检测头进行了解耦，分开了目标检测中的边框回归过程和类别分类过程。 由于YOLOX的解耦头中，新增了两个额外的3x3卷积，会在一定程度增加运算的复杂度。鉴于此，YOLOv6基于Hybrid Channels的策略重新设计出了一个更高效的解耦头结构。在不怎么改变精度的情况下降低延时，从而达到了速度与精度的权衡。</p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20221018094045527.png" alt="image-20221018094045527" /></p><p><strong>【优势】</strong></p><p>对耗时做了进一步的优化，进一步提升YOLO检测算法性能。</p>]]></content>
      
      
      <categories>
          
          <category> Summary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 目标检测 </tag>
            
            <tag> 综述 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Deep Multiscale Siamese Network With Parallel Convolutional Structure and Self-Attention for Change Detection》笔记</title>
      <link href="/posts/53542.html"/>
      <url>/posts/53542.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>论文地址：<a href="https://ieeexplore.ieee.org/document/9632564">Deep Multiscale Siamese Network With Parallel Convolutional Structure and Self-Attention for Change Detection</a></p></blockquote><h2 id="摘要"><a class="markdownIt-Anchor" href="#摘要"></a> 摘要</h2><h3 id="动机"><a class="markdownIt-Anchor" href="#动机"></a> 动机</h3><p><strong>现有的许多变化检测算法在实际应用中仍需要进一步改进，特别是在增加特征提取的有效性和降低模型计算成本方面。</strong></p><p>本文提出的方法在可接受的计算成本下具有出色的特征提取和特征集成能力。该网络主要包含三个子网络：深度多尺度特征提取、PCS进行特征集成、基于self attention特征细化。第一个子网络中设计了一个基于卷积块的深度多尺度孪生网络来描述不同时间图像在不同尺度上的特征；第二个子网络提出了一种PCS模型来综合不同时间图像的多尺度特征；第三个子网络构建SA模型，进一步增强图像信息的表示。</p><h3 id="贡献"><a class="markdownIt-Anchor" href="#贡献"></a> 贡献</h3><p>作者从特征提取和特征集成的有效性以及降低计算存储成本的角度出发，设计并提出了一种新颖的CD深度神经网络。</p><ul><li>为了描述多尺度图像特征并提高对不同时间图像的特征提取能力，提出了一种基于设计的卷积块的深度多尺度孪生神经网络（SNN）</li><li>为了提升特征融合的有效性，提出了一种并行卷积结构（parallel convolutional structure，PCS）来整合不同时间的特征；此外构建了一个自注意力（SA）模型来进一步提高特征表示能力</li><li>提出了一种新的CD模型，在保证检测精度的同时，具有比之前更广的应用范围，大量使用3×3和1×1卷积层来减少参数数量和计算成本</li></ul><h2 id="网络结构"><a class="markdownIt-Anchor" href="#网络结构"></a> 网络结构</h2><p>整个网络结构分为三部分：共享权重的特征提取模块、基于PCS的特征聚合模块、基于SA的特征细化模块。为了获得图像信息的最优表示，设计了深度多尺度共享权重特征提取器，从不同的时间图像中提取特征。PCS的提出是为了实现不同时相图像的有效特征融合，SA模块为了使特征更具有判别性。网络首先生成多尺度多深度的特征，然后从底向上分别输入PCS和SA模块处理，最后经过卷积层输出变化图。</p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20221123190808555.png" alt="image-20221123190808555" /></p><h3 id="基于深度多尺度snn的特征提取"><a class="markdownIt-Anchor" href="#基于深度多尺度snn的特征提取"></a> 基于深度多尺度SNN的特征提取</h3><p>设计网络的初衷是保证提取特征的有效性和非冗余性，使模型能够以较低的参数量和存储成本实现图像的最优表示。因此，作者提出了一个具有新卷积块和大量3×3和1×1卷积层的深度多尺度SNN。多尺度提取通过引入自适应平均池化操作来实现。通过引入双卷积层和BN层，我们可以在每一层中挖掘更多的特征，这比单卷积层更适合复杂背景下的特征表示。</p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20221123192156194.png" alt="image-20221123192156194" /></p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20221123192210652.png" alt="image-20221123192210652" /></p><h3 id="pcs模块"><a class="markdownIt-Anchor" href="#pcs模块"></a> PCS模块</h3><p>时态特征融合是CD框架中非常关键的部分，它实现了不同时态图像在特征层面的关联，从而最大限度地提高了融合特征对变化的区分度。因此，时间特征整合的有效性决定了 CD 的性能。本文中提出了一种并行卷积结构（PCS）来完成多尺度特征的集成和图像信息的表示。首先将双时相特征进行concat处理，然后输入PCS模块；PCS主要是分组卷积构成，将卷积分为c组，并且每组的dilation参数设置不同。</p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20221123192425473.png" alt="image-20221123192425473" /></p><h3 id="sa模块"><a class="markdownIt-Anchor" href="#sa模块"></a> SA模块</h3><p>PCS生成的集成特性可以粗略地定位更改，但是它缺乏突出显示区域细节的能力。为了解决这个问题，我们进一步引入了SA模块，我们将 PCS 的输出输入到 SA 中以生成精炼的集成特征。</p><h2 id="实验"><a class="markdownIt-Anchor" href="#实验"></a> 实验</h2><h3 id="对比实验"><a class="markdownIt-Anchor" href="#对比实验"></a> 对比实验</h3><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20221123193345274.png" alt="image-20221123193345274" /></p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20221123193413102.png" alt="image-20221123193413102" /></p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20221123193427283.png" alt="image-20221123193427283" /></p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20221123193448349.png" alt="image-20221123193448349" /></p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20221123193502622.png" alt="image-20221123193502622" /></p><h3 id="消融实验"><a class="markdownIt-Anchor" href="#消融实验"></a> 消融实验</h3><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20221123193521196.png" alt="image-20221123193521196" /></p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20221123193535930.png" alt="image-20221123193535930" /></p><h3 id="特征可视化"><a class="markdownIt-Anchor" href="#特征可视化"></a> 特征可视化</h3><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20221123193610816.png" alt="image-20221123193610816" /></p><h2 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h2><p>self attention模块处理特征有必要性，同时PCS模块对于特征的聚合有一定的提升效果。</p><blockquote><p>想要进一步了解可以点击顶部链接查看原论文！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 论文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RS </tag>
            
            <tag> change detection </tag>
            
            <tag> self attention </tag>
            
            <tag> parallel convolutional structure </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《TransUNetCD：A Hybrid Transformer Network for Change Detection in Optical Remote-Sensing Images》笔记</title>
      <link href="/posts/28607.html"/>
      <url>/posts/28607.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文地址：<a href="https://ieeexplore.ieee.org/document/9761892/">TransUNetCD: A Hybrid Transformer Network for Change Detection in Optical Remote-Sensing Images</a></p></blockquote><h2 id="摘要"><a class="markdownIt-Anchor" href="#摘要"></a> 摘要</h2><h3 id="问题"><a class="markdownIt-Anchor" href="#问题"></a> 问题</h3><ol><li>UNet由于卷积神经网络内在的限制，对全局上下文和长距离的空间联系的获取是不充足的</li><li>Transformer虽然能够获取长距离的特征依赖关系，但是缺乏low-level的细节而导致结果中位置信息的缺失</li></ol><h3 id="工作"><a class="markdownIt-Anchor" href="#工作"></a> 工作</h3><blockquote><p>提出UNet和Transformer相结合的方法TransUNetCD</p></blockquote><ol><li>对通过卷积神经网络提取的特征进行encoder操作提取丰富的全局上下文信息</li><li>经过decoder的连续上采样，通过连续的跳跃连接将其与高分辨率的多尺度特征连接去学习局部-全局语义特征，并恢复特征的全分辨率，实现精确地像素定位</li><li>引入差异增强模块，生成包含丰富变化信息的差异图，通过对每个像素的加权和选择性地聚合特征，提高网络的有效性和准确性</li></ol><h2 id="引言"><a class="markdownIt-Anchor" href="#引言"></a> 引言</h2><h3 id="模型设计动机"><a class="markdownIt-Anchor" href="#模型设计动机"></a> 模型设计动机</h3><ol><li>引入Transformer模块：获取全局上下文信息，提取出更具有代表性的深度特征，减少伪变化的影响</li><li>提出差异增强模块DEM：通过对change map进行加权得到更具有判别力的特征表示</li></ol><h3 id="其他方法不足"><a class="markdownIt-Anchor" href="#其他方法不足"></a> 其他方法不足</h3><ul><li>RNN：高分辨率图像光谱信息不频繁和时间信息不足</li><li>Attention机制（channel、spatial）：只是在channel或者spatial维度增强特征，忽略了浅层特征的增强，不能充分地学习全局上下文并且计算量大</li></ul><h2 id="研究方法"><a class="markdownIt-Anchor" href="#研究方法"></a> 研究方法</h2><h3 id="网络结构"><a class="markdownIt-Anchor" href="#网络结构"></a> 网络结构</h3><p>UNet通过跳跃连接机制实现深层特征和浅层特征的融合，实现特诊提取和细节恢复。将CNN特征提取部分的最后一层进行concat后输入到Transformer中进行high-level特征的进一步增强，获取更具有代表的深度特征，之后经过decoder部分进行连续下采样并与之前的浅层特征进行concat以补充丢失的浅层信息。最后与加权的差异图进行相乘得到最终的变化特征并输出change map</p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20221011092006773.png" alt="image-20221011092006773" /></p><h4 id="cascading-upsampling-decodercud"><a class="markdownIt-Anchor" href="#cascading-upsampling-decodercud"></a> Cascading Upsampling Decoder（CUD）</h4><p>论文中提到的是由于连续的上采样会丢失low-level细节，所以为了弥补浅层特征的丢失，提出了连续上采样decoder。其本质就是将encoder产生的浅层特征与上采样后的深层特征进行concat后进行一系列卷及操作实现浅层信息的补充</p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20221011092737068.png" alt="image-20221011092737068" /></p><h4 id="difference-enhancement-moduledem"><a class="markdownIt-Anchor" href="#difference-enhancement-moduledem"></a> Difference Enhancement Module（DEM）</h4><p>双时相图像的差异图能够清晰的展示出图像的变化，但是由于使用了无差异的像素计算，忽略了图像局部特征的差异，也就是不能识别出一些伪变化的情况，所以不能被直接使用。因此本文提出了一种基于SA的差异增强模块，用来识别差异图中的深度特征变化和背景</p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20221011093314509.png" alt="image-20221011093314509" /></p><h3 id="损失函数"><a class="markdownIt-Anchor" href="#损失函数"></a> 损失函数</h3><blockquote><p>使用简单的Dice loss和加权交叉熵损失<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>L</mi><mo>=</mo><msub><mi>L</mi><mrow><mi>w</mi><mi>c</mi><mi>e</mi></mrow></msub><mo>+</mo><msub><mi>L</mi><mrow><mi>d</mi><mi>i</mi><mi>c</mi><mi>e</mi></mrow></msub></mrow><annotation encoding="application/x-tex">L = L_{wce} + L_{dice}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal">L</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02691em;">w</span><span class="mord mathnormal mtight">c</span><span class="mord mathnormal mtight">e</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">d</span><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight">c</span><span class="mord mathnormal mtight">e</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></p></blockquote><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20221011093450683.png" alt="image-20221011093450683" /></p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20221011093516106.png" alt="image-20221011093516106" /></p><h2 id="实验分析"><a class="markdownIt-Anchor" href="#实验分析"></a> 实验分析</h2><h3 id="cdd数据集"><a class="markdownIt-Anchor" href="#cdd数据集"></a> CDD数据集</h3><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20221011093610319.png" alt="image-20221011093610319" /></p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20221011093718440.png" alt="image-20221011093718440" /></p><h3 id="dsifn数据集"><a class="markdownIt-Anchor" href="#dsifn数据集"></a> DSIFN数据集</h3><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20221011093807998.png" alt="image-20221011093807998" /></p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20221011093831369.png" alt="image-20221011093831369" /></p><h3 id="levir-cd数据集"><a class="markdownIt-Anchor" href="#levir-cd数据集"></a> LEVIR-CD数据集</h3><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20221011093858075.png" alt="image-20221011093858075" /></p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20221011093913833.png" alt="image-20221011093913833" /></p><h3 id="whu-cd数据集"><a class="markdownIt-Anchor" href="#whu-cd数据集"></a> WHU-CD数据集</h3><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20221011093944668.png" alt="image-20221011093944668" /></p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20221011094002616.png" alt="image-20221011094002616" /></p><h3 id="params和flops"><a class="markdownIt-Anchor" href="#params和flops"></a> Params和FLOPs</h3><p>从图中可以看出虽然该模型参数量比较高，但是相比于其他方法，计算量并没有增加太多。<em>文中提到参数量太大的原因是使用ViT作为预训练导致的</em></p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20221011094106585.png" alt="image-20221011094106585" /></p><h3 id="学习曲线"><a class="markdownIt-Anchor" href="#学习曲线"></a> 学习曲线</h3><p>可以看出来该模型相较于BiT方法，收敛速度更快并且具有更好的准确度。同时观察验证集实验可以看出来，该模型的泛化能力更强，具有很好的鲁棒性</p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20221011094458650.png" alt="image-20221011094458650" /></p><h3 id="消融实验"><a class="markdownIt-Anchor" href="#消融实验"></a> 消融实验</h3><p>从下图中可以看出来在进行特征融合操作中，concat对于结果的提升更加明显，<strong>后续实验可以优先考虑concat</strong>。同时也可以看出来单独的DEM模块对于模型提升并不是很大，但是和Transformer结合后提升效果有所增强，说明经过Transformer处理后的特征具有更好的判别效果。Transformer模块可以聚合全局信息，准确定位变化区域，并且对纹理、形状和大小特征更加鲁棒。DE模块的存在可以提高模型的精度，使模型在前期快速收敛。</p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20221011094824489.png" alt="image-20221011094824489" /></p><p>从下图对比可以看出来，该方法的鲁棒性比较好，在四倍缩放的情况下依然能够优于BiT。同时观察可视化结果可以看出来该方法对于细长目标的检测更加有效</p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20221011095451796.png" alt="image-20221011095451796" /></p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20221011095437782.png" alt="image-20221011095437782" /></p><h2 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h2><p>1、模型性能好</p><p>2、模型的鲁棒性和泛化较于其他模型更加好（个人认为是UNet的跳跃机制导致的，使得深层特征包含更多的浅层信息，同时由于Transformer的存在深层特征更具有代表性，BiT缺少了UNet提供丰富浅层特征的部分）</p><p>3、对于有些颜色变化很大的物体变化检测误差比较大（个人认为是由于差异增强模块，单一的依靠像素级别的直接差异判别还是有所弊端，应该修改到特征级别）</p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/wps1.jpg" alt="img" /></p><p>4、小物体检测性能较差（道路、汽车等）（<strong>浅层特征和深层特征的处理上需要给予更多地关注</strong>，CUD模块似乎并不能很好的处理这方面问题）</p>]]></content>
      
      
      <categories>
          
          <category> 论文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RS </tag>
            
            <tag> change detection </tag>
            
            <tag> Transformer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《SNUNet-CD：A Densely Connected Siamese Network for Change Detection of VHR Images》笔记</title>
      <link href="/posts/23553.html"/>
      <url>/posts/23553.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文地址：<a href="https://ieeexplore.ieee.org/document/9355573">SNUNet-CD: A Densely Connected Siamese Network for Change Detection of VHR Images</a></p></blockquote><h2 id="摘要"><a class="markdownIt-Anchor" href="#摘要"></a> 摘要</h2><h3 id="问题"><a class="markdownIt-Anchor" href="#问题"></a> 问题：</h3><p>一直专注于深层变化语义特征的提取而<strong>忽视了浅层信息的重要性（包含高分辨率和细粒度特征）</strong>，于是经常导致<strong>变化目标边缘像素的不确定性</strong>和<strong>小物体的缺失</strong>。</p><h3 id="工作"><a class="markdownIt-Anchor" href="#工作"></a> 工作</h3><blockquote><p>提出了一个稠密连接孪生网络<strong>SNUNet-CD</strong>来进行变化检测工作</p></blockquote><p><strong>SNUNet-CD</strong>通过encoder-decoder和decoder-decoder之间紧密的信息传输缓解了深层神经网络位置信息的丢失。并且提出了集成通道注意力模块<strong>ECAM</strong>来实现不同层次的特征的最终提炼。</p><h2 id="引言"><a class="markdownIt-Anchor" href="#引言"></a> 引言</h2><h3 id="先前工作不足"><a class="markdownIt-Anchor" href="#先前工作不足"></a> 先前工作不足</h3><p><strong>基于U-Net的网络结构在连续的下采样后会丢失准确的空间位置信息，这往往会导致变化目标物体的边缘像素不确定和小物体的丢失。</strong></p><h3 id="动机"><a class="markdownIt-Anchor" href="#动机"></a> 动机</h3><blockquote><p>先前的研究已经表明浅层网络包含细粒度的位置信息，深层网络包含更多的粗粒度语义信息。</p></blockquote><p>基于上述提到的先验知识，可以使用稠密孪生网络作用于变化检测。首先通过encoder获取high-level特征，然后经过decoder时添加浅层特征进行位置信息的补充。同时由于不同层次的特征还是有差距的，所以提出了<strong>ECAM</strong>模块来解决语义鸿沟问题</p><p>以下为该论文主要工作和目的：</p><ol><li>提出基于NestedUNet的稠密连接网络SNUNet-CD：缓解深层网络位置信息丢失</li><li>提出ECAM：聚合和细化不同语义层次特征，一直语义鸿沟和定位误差</li><li>通过大量实验对比：模型性能（F1-Score）和计算复杂度都优于其他取得SOTA的方法</li></ol><h2 id="研究方法"><a class="markdownIt-Anchor" href="#研究方法"></a> 研究方法</h2><h3 id="网络结构"><a class="markdownIt-Anchor" href="#网络结构"></a> 网络结构</h3><p>由于使用孪生网络分别提取双时相图像特征，所以采用concat的方法对特征进行融合来保证信息的完整性。为了保存高分辨率和细粒度的位置信息，该模型在encoder和decoder之间使用dense skip connection机制。如图显示的，在对图像对进行下采样时将两个分支的特征进行融合，并将融合之后的高分辨率、细粒度特征通过跳跃连接传递和相应的decoder部分来实现对深层特征位置信息的补充。</p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20221010183145012.png" alt="image-20221010183145012" /></p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20221010183430449.png" alt="image-20221010183430449" /></p><h3 id="ecam"><a class="markdownIt-Anchor" href="#ecam"></a> ECAM</h3><p>生成的特征图<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>X</mi><mrow><mn>0</mn><mo separator="true">,</mo><mn>1</mn></mrow></msup><mtext>、</mtext><msup><mi>X</mi><mrow><mn>0</mn><mo separator="true">,</mo><mn>2</mn></mrow></msup><mtext>、</mtext><msup><mi>X</mi><mrow><mn>0</mn><mo separator="true">,</mo><mn>3</mn></mrow></msup><mtext>、</mtext><msup><mi>X</mi><mrow><mn>0</mn><mo separator="true">,</mo><mn>4</mn></mrow></msup></mrow><annotation encoding="application/x-tex">X^{0,1}、X^{0,2}、X^{0,3}、X^{0,4}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span><span class="mpunct mtight">,</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mord cjk_fallback">、</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span><span class="mpunct mtight">,</span><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mord cjk_fallback">、</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span><span class="mpunct mtight">,</span><span class="mord mtight">3</span></span></span></span></span></span></span></span></span><span class="mord cjk_fallback">、</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span><span class="mpunct mtight">,</span><span class="mord mtight">4</span></span></span></span></span></span></span></span></span></span></span></span>大小是相同的，但是具有不同的语义层次和空间位置表示。具体来说就是浅层输出特征具有更细粒度和精确的位置信息，深层输出特征具有更粗粒度和丰富的语义信息。由于语义鸿沟的存在，必须采用相应的方法来解决融合问题。ECAM通过调整对不同层次特征的关注度来实现对语义鸿沟的抑制（采用Channel Attention，CAM），具体计算流程如下：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>C</mi><mi>A</mi><mi>M</mi><mo stretchy="false">(</mo><mi>F</mi><mo stretchy="false">)</mo><mo>=</mo><mi>σ</mi><mo stretchy="false">(</mo><mi>M</mi><mi>L</mi><mi>P</mi><mo stretchy="false">(</mo><mi>A</mi><mi>v</mi><mi>g</mi><mi>P</mi><mi>o</mi><mi>l</mi><mi>l</mi><mo stretchy="false">(</mo><mi>F</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo>+</mo><mi>M</mi><mi>L</mi><mi>P</mi><mo stretchy="false">(</mo><mi>M</mi><mi>a</mi><mi>x</mi><mi>P</mi><mi>o</mi><mi>o</mi><mi>l</mi><mo stretchy="false">(</mo><mi>F</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">CAM(F) = \sigma(MLP(AvgPoll(F)) + MLP(MaxPool(F)))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">L</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mclose">)</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">L</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">a</span><span class="mord mathnormal">x</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal">o</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mclose">)</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span></span></p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>M</mi><mrow><mi>i</mi><mi>n</mi><mi>t</mi><mi>r</mi><mi>a</mi></mrow></msub><mo>=</mo><mi>C</mi><mi>A</mi><mi>M</mi><mo stretchy="false">(</mo><msup><mi>x</mi><mrow><mn>0</mn><mo separator="true">,</mo><mn>1</mn></mrow></msup><mo>+</mo><msup><mi>x</mi><mrow><mn>0</mn><mo separator="true">,</mo><mn>2</mn></mrow></msup><mo>+</mo><msup><mi>x</mi><mrow><mn>0</mn><mo separator="true">,</mo><mn>3</mn></mrow></msup><mo>+</mo><msup><mi>x</mi><mrow><mn>0</mn><mo separator="true">,</mo><mn>4</mn></mrow></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">M_{intra} = CAM(x^{0,1}+x^{0,2}+x^{0,3}+x^{0,4})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight">n</span><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight">a</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.1141079999999999em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.864108em;"><span style="top:-3.1130000000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span><span class="mpunct mtight">,</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.947438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.864108em;"><span style="top:-3.1130000000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span><span class="mpunct mtight">,</span><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.947438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.864108em;"><span style="top:-3.1130000000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span><span class="mpunct mtight">,</span><span class="mord mtight">3</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.1141079999999999em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.864108em;"><span style="top:-3.1130000000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span><span class="mpunct mtight">,</span><span class="mord mtight">4</span></span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>F</mi><mrow><mi>e</mi><mi>n</mi><mi>s</mi><mi>e</mi><mi>m</mi><mi>b</mi><mi>l</mi><mi>e</mi></mrow></msub><mo>=</mo><mo stretchy="false">[</mo><msup><mi>x</mi><mrow><mn>0</mn><mo separator="true">,</mo><mn>1</mn></mrow></msup><mo>+</mo><msup><mi>x</mi><mrow><mn>0</mn><mo separator="true">,</mo><mn>2</mn></mrow></msup><mo>+</mo><msup><mi>x</mi><mrow><mn>0</mn><mo separator="true">,</mo><mn>3</mn></mrow></msup><mo>+</mo><msup><mi>x</mi><mrow><mn>0</mn><mo separator="true">,</mo><mn>4</mn></mrow></msup><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">F_{ensemble} = [x^{0,1}+x^{0,2}+x^{0,3}+x^{0,4}]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">n</span><span class="mord mathnormal mtight">s</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">m</span><span class="mord mathnormal mtight">b</span><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mord mathnormal mtight">e</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.1141079999999999em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.864108em;"><span style="top:-3.1130000000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span><span class="mpunct mtight">,</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.947438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.864108em;"><span style="top:-3.1130000000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span><span class="mpunct mtight">,</span><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.947438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.864108em;"><span style="top:-3.1130000000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span><span class="mpunct mtight">,</span><span class="mord mtight">3</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.1141079999999999em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.864108em;"><span style="top:-3.1130000000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span><span class="mpunct mtight">,</span><span class="mord mtight">4</span></span></span></span></span></span></span></span></span><span class="mclose">]</span></span></span></span></span></p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>M</mi><mrow><mi>i</mi><mi>n</mi><mi>t</mi><mi>e</mi><mi>r</mi></mrow></msub><mo>=</mo><mi>C</mi><mi>A</mi><mi>M</mi><mo stretchy="false">(</mo><msub><mi>F</mi><mrow><mi>e</mi><mi>n</mi><mi>s</mi><mi>e</mi><mi>m</mi><mi>b</mi><mi>l</mi><mi>e</mi></mrow></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">M_{inter} = CAM(F_{ensemble})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight">n</span><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">n</span><span class="mord mathnormal mtight">s</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">m</span><span class="mord mathnormal mtight">b</span><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mord mathnormal mtight">e</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>E</mi><mi>C</mi><mi>A</mi><mi>M</mi><mo stretchy="false">(</mo><msub><mi>F</mi><mrow><mi>e</mi><mi>n</mi><mi>s</mi><mi>e</mi><mi>m</mi><mi>b</mi><mi>l</mi><mi>e</mi></mrow></msub><mo stretchy="false">)</mo><mo>=</mo><mo stretchy="false">(</mo><msub><mi>F</mi><mrow><mi>e</mi><mi>n</mi><mi>s</mi><mi>e</mi><mi>m</mi><mi>b</mi><mi>l</mi><mi>e</mi></mrow></msub><mo>+</mo><mi>r</mi><mi>e</mi><mi>p</mi><mi>e</mi><mi>a</mi><msub><mi>t</mi><mrow><mo stretchy="false">(</mo><mn>4</mn><mo stretchy="false">)</mo></mrow></msub><mo stretchy="false">(</mo><msub><mi>M</mi><mrow><mi>i</mi><mi>n</mi><mi>t</mi><mi>r</mi><mi>a</mi></mrow></msub><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo>⨂</mo><msub><mi>M</mi><mrow><mi>i</mi><mi>n</mi><mi>t</mi><mi>e</mi><mi>r</mi></mrow></msub></mrow><annotation encoding="application/x-tex">ECAM(F_{ensemble}) = (F_{ensemble} + repeat_{(4)}(M_{intra})) \bigotimes M_{inter}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">n</span><span class="mord mathnormal mtight">s</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">m</span><span class="mord mathnormal mtight">b</span><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mord mathnormal mtight">e</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">n</span><span class="mord mathnormal mtight">s</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">m</span><span class="mord mathnormal mtight">b</span><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mord mathnormal mtight">e</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.6000100000000002em;vertical-align:-0.55001em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">e</span><span class="mord mathnormal">p</span><span class="mord mathnormal">e</span><span class="mord mathnormal">a</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.34480000000000005em;"><span style="top:-2.5198em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mtight">4</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3551999999999999em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight">n</span><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight">a</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-symbol large-op" style="position:relative;top:-0.000004999999999977245em;">⨂</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight">n</span><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20221010185122202.png" alt="image-20221010185122202" /></p><p>最后经过一个1×1卷积输出2×H×W的change map</p><h3 id="损失函数"><a class="markdownIt-Anchor" href="#损失函数"></a> 损失函数</h3><blockquote><p>采用加权交叉熵损失和dice loss结合</p></blockquote><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>L</mi><mo>=</mo><msub><mi>L</mi><mrow><mi>w</mi><mi>c</mi><mi>e</mi></mrow></msub><mo>+</mo><msub><mi>L</mi><mrow><mi>d</mi><mi>i</mi><mi>c</mi><mi>e</mi></mrow></msub></mrow><annotation encoding="application/x-tex">L = L_{wce} + L_{dice}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal">L</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02691em;">w</span><span class="mord mathnormal mtight">c</span><span class="mord mathnormal mtight">e</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">d</span><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight">c</span><span class="mord mathnormal mtight">e</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p><p>其中加权交叉熵损失为：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>L</mi><mrow><mi>d</mi><mi>i</mi><mi>c</mi><mi>e</mi></mrow></msub><mo>=</mo><mfrac><mn>1</mn><mrow><mi>H</mi><mo>×</mo><mi>W</mi></mrow></mfrac><munderover><mo>∑</mo><mrow><mi>k</mi><mo>=</mo><mn>1</mn></mrow><mrow><mi>H</mi><mo>×</mo><mi>W</mi></mrow></munderover><mi>w</mi><mi>e</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi><mo stretchy="false">[</mo><mi>c</mi><mi>l</mi><mi>a</mi><mi>s</mi><mi>s</mi><mo stretchy="false">]</mo><mo separator="true">⋅</mo><mo stretchy="false">(</mo><mi>l</mi><mi>o</mi><mi>g</mi><mo stretchy="false">(</mo><mfrac><mrow><mi>e</mi><mi>x</mi><mi>p</mi><mo stretchy="false">(</mo><mover accent="true"><mi>y</mi><mo>^</mo></mover><mo stretchy="false">[</mo><mi>k</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>c</mi><mi>l</mi><mi>a</mi><mi>s</mi><mi>s</mi><mo stretchy="false">]</mo><mo stretchy="false">)</mo></mrow><mrow><munderover><mo>∑</mo><mrow><mi>l</mi><mo>=</mo><mn>0</mn></mrow><mn>1</mn></munderover><mi>e</mi><mi>x</mi><mi>p</mi><mo stretchy="false">(</mo><mover accent="true"><mi>y</mi><mo>^</mo></mover><mo stretchy="false">[</mo><mi>k</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>l</mi><mo stretchy="false">]</mo><mo stretchy="false">)</mo></mrow></mfrac><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">L_{dice} = \frac{1}{H × W} \sum_{k=1}^{H×W}weight[class]·(log(\frac{exp(\hat{y}[k][class])}{\sum_{l=0}^{1}exp(\hat{y}[k][l])}))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">d</span><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight">c</span><span class="mord mathnormal mtight">e</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.1304490000000005em;vertical-align:-1.302113em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">W</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7693300000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8283360000000002em;"><span style="top:-1.8478869999999998em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.0500049999999996em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.300005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.08125em;">H</span><span class="mbin mtight">×</span><span class="mord mathnormal mtight" style="margin-right:0.13889em;">W</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.302113em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mord mathnormal">e</span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">h</span><span class="mord mathnormal">t</span><span class="mopen">[</span><span class="mord mathnormal">c</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">a</span><span class="mord mathnormal">s</span><span class="mord mathnormal">s</span><span class="mclose">]</span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.155992em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.954008em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mrel mtight">=</span><span class="mord mtight">0</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">e</span><span class="mord mathnormal">x</span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.19444em;"><span class="mord">^</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mclose">]</span><span class="mclose">)</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">e</span><span class="mord mathnormal">x</span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.19444em;"><span class="mord">^</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathnormal">c</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">a</span><span class="mord mathnormal">s</span><span class="mord mathnormal">s</span><span class="mclose">]</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.143718em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span><span class="mclose">)</span></span></span></span></span></p><blockquote><p>其中class表示0 or 1</p></blockquote><p>Dice loss：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>L</mi><mrow><mi>d</mi><mi>i</mi><mi>c</mi><mi>e</mi></mrow></msub><mo>=</mo><mn>1</mn><mo>−</mo><mfrac><mrow><mn>2</mn><mo separator="true">⋅</mo><mi>Y</mi><mo separator="true">⋅</mo><mi>s</mi><mi>o</mi><mi>f</mi><mi>t</mi><mi>m</mi><mi>a</mi><mi>x</mi><mo stretchy="false">(</mo><mover accent="true"><mi>Y</mi><mo>^</mo></mover><mo stretchy="false">)</mo></mrow><mrow><mi>Y</mi><mo>+</mo><mi>s</mi><mi>o</mi><mi>f</mi><mi>t</mi><mi>m</mi><mi>a</mi><mi>x</mi><mo stretchy="false">(</mo><mover accent="true"><mi>Y</mi><mo>^</mo></mover><mo stretchy="false">)</mo></mrow></mfrac></mrow><annotation encoding="application/x-tex">L_{dice} = 1 - \frac{2 · Y · softmax(\hat{Y})}{Y + softmax(\hat{Y})}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">d</span><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight">c</span><span class="mord mathnormal mtight">e</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.71054em;vertical-align:-1.08677em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.62377em;"><span style="top:-2.16323em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal">s</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal">t</span><span class="mord mathnormal">m</span><span class="mord mathnormal">a</span><span class="mord mathnormal">x</span><span class="mopen">(</span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9467699999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span></span></span><span style="top:-3.25233em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.25em;"><span class="mord">^</span></span></span></span></span></span></span><span class="mclose">)</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">s</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal">t</span><span class="mord mathnormal">m</span><span class="mord mathnormal">a</span><span class="mord mathnormal">x</span><span class="mopen">(</span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9467699999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span></span></span><span style="top:-3.25233em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.25em;"><span class="mord">^</span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.08677em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><blockquote><p>其中<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>Y</mi><mo>^</mo></mover></mrow><annotation encoding="application/x-tex">\hat{Y}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9467699999999999em;vertical-align:0em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9467699999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span></span></span><span style="top:-3.25233em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.25em;"><span class="mord">^</span></span></span></span></span></span></span></span></span></span>代表change map，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>Y</mi></mrow><annotation encoding="application/x-tex">Y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span></span></span></span>表示ground truth</p></blockquote><h2 id="实验分析"><a class="markdownIt-Anchor" href="#实验分析"></a> 实验分析</h2><p>从图中可以看出SNUNet-CD相比于其他的方法能够取得很好的性能，并且在通道数不是很大时参数的大小相较于其他方法也处于不错的位置。</p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20221010190005902.png" alt="image-20221010190005902" /></p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20221010190451016.png" alt="image-20221010190451016" /></p><p>对于可视化实验分析，可以明显的看出，SNUNet-CD方法能够更加有效地描述变化目标的边缘，如图第三行对于道路的检测；同时对小目标的检测更加有效，如图中第一行车辆部分。</p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20221010190359114.png" alt="image-20221010190359114" /></p><h2 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h2><p>该方法采用稠密连接网络的主要出发点是为了弥补多次下采样后浅层信息丢失情况，通过不断的浅层特征的叠加实现最终特征图的信息完整性，这里指大物体边缘信息和小物体自身。实验上也证明了通过特征叠加的有效性，但是可能会出现特征过多导致模型的泛化能力降低，论文中并没有给出相应的实验。同时，本文中提出的解决不同层次语义鸿沟的策略：ECAM，主要是通过通道注意力的方法对浅层和深层特征的关注部分进行自适应性调整后再融合，在上述的消融实验中也证明了ECAM模块的有效性。</p><p><strong>核心</strong>：</p><ol><li>重视浅层特征的主要性，主要为<strong>位置信息</strong>等</li><li>对于多尺度特征融合需要进行一定的手段处理，消除或抑制语义鸿沟</li></ol>]]></content>
      
      
      <categories>
          
          <category> 论文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RS </tag>
            
            <tag> change detection </tag>
            
            <tag> siamese network </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于变化检测的相关介绍（一）</title>
      <link href="/posts/14212.html"/>
      <url>/posts/14212.html</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="https://www.mdpi.com/2072-4292/14/4/871">《Deep Learning-Based Change Detection in Remote Sensing Images: A Review》</a></p></blockquote><p>Change Detection（CD）：识别不同时期获取的图像中的差异</p><p>用途：fire detection, environmental monitoring, disaster monitoring, urban change analysis, and land management, etc</p><h3 id="传统cd方法"><a class="markdownIt-Anchor" href="#传统cd方法"></a> 传统CD方法：</h3><ul><li>pixel-based CD（PBCD）</li></ul><ol><li><p>通过图像差异、主成分分析（PCA）、变化向量分析（CVA）等方法生成差异图像</p></li><li><p>采用基于阈值的方法生成变化检测结果</p></li></ol><ul><li>object-based CD（OBCD）</li></ul><ol><li><p>提取双时相图像的特征并将他们划分为不同的语义信息</p></li><li><p>分析双时相之间的差异</p></li></ol><p>缺点：</p><p>对于传统方法而言很难挖掘大量高分辨率图像之间的潜在联系</p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20220928162415577.png" alt="image-20220928162415577" /></p><h3 id="基于深度学习的变化检测"><a class="markdownIt-Anchor" href="#基于深度学习的变化检测"></a> 基于深度学习的变化检测：</h3><ol><li><p>单分支结构：直接将双时相图像concat作为模型输入。如基于U-Net</p></li><li><p>双分支结构：共享权重，孪生网络</p></li></ol><h3 id="常用数据集"><a class="markdownIt-Anchor" href="#常用数据集"></a> 常用数据集：</h3><ul><li>SAR Images</li></ul><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/wps2.jpg" alt="img" /></p><ul><li><p>Multi-Spectral Images：</p><ol><li><p>Wide-Area Datasets：<br /><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20220928162623433.png" alt="image-20220928162623433" /></p></li><li><p>Local-Area Datasets：<br /><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20220928162924043.png" alt="image-20220928162924043" /></p></li></ol></li><li><p>Hyperspectral Images<br /><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20220928163017512.png" alt="image-20220928163017512" /></p><p>Primary challenges for HSI-CD：</p><ul><li><p>Limited Labeled Data</p></li><li><p>High-Dimensionality</p></li><li><p>Mixed Pixels Problem</p></li></ul></li><li><p>Very High Spatial Resolution (VHR) Images<br /><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20220928163201290.png" alt="image-20220928163201290" /></p><p>Technological challenge：</p><ul><li><p>Limited Spectral Information</p></li><li><p>Spectral Variability</p></li><li><p>Information Loss</p></li></ul></li><li><p>Heterogeneous Datasets：<br /><img src="https://gitee.com/qingy735/blogimg/raw/master/img/wps7.jpg" alt="img" /></p></li></ul><h3 id="change-detection-architecture"><a class="markdownIt-Anchor" href="#change-detection-architecture"></a> Change Detection Architecture：</h3><p>工作流程：<br /><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20220928163259801.png" alt="image-20220928163259801" /></p><ul><li><p>Pre-Processing：有利于图像特征提取和图像分析结果。数学归一化</p></li><li><p>Geometric Registration：修复图像几何失真</p></li><li><p>Radiometric Correction：absolute calibration、relative calibration</p></li><li><p>Despeckling</p></li><li><p>Denoising</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Summary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cv </tag>
            
            <tag> RS </tag>
            
            <tag> change detection </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《SMD-Net：Siamese Multi-Scale Difference-Enhancement Network for Change Detection in Remote Sensing》笔记</title>
      <link href="/posts/41292.html"/>
      <url>/posts/41292.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文地址：<a href="https://www.mdpi.com/2072-4292/14/7/1580">SMD-Net: Siamese Multi-Scale Difference-Enhancement Network for Change Detection in Remote Sensing</a></p></blockquote><h2 id="摘要"><a class="markdownIt-Anchor" href="#摘要"></a> 摘要</h2><h3 id="问题"><a class="markdownIt-Anchor" href="#问题"></a> 问题：</h3><p>由于双时像图像的环境差异和复杂的成像条件，在变化检测结果中通常会存在一些问题：<strong>丢失小物体</strong>、<strong>物体不完整</strong>、<strong>边缘粗糙</strong>等。现有的变化检测方法通常对这方面缺少关注</p><h3 id="工作"><a class="markdownIt-Anchor" href="#工作"></a> 工作：</h3><p>提出孪生变化检测方法<strong>SMD-NET</strong>用于双时相遥感图像</p><ol><li><p>使用多尺度差异图逐步增强变化区域的信息来获得更好的变化检测结果</p></li><li><p>提出用于高层次特征的孪生残差多核池化模块<strong>SRMP</strong>提升模型中的high-level变化信息</p></li><li><p>对于低级特征提出特征差异模块<strong>FDM</strong>，该模块使用特征差异来完全提取变化信息并帮助模型生成更准确的细节</p></li></ol><h2 id="引言"><a class="markdownIt-Anchor" href="#引言"></a> 引言</h2><h3 id="模型设计动机"><a class="markdownIt-Anchor" href="#模型设计动机"></a> 模型设计动机：</h3><ol><li><strong>孪生网络</strong>：单分支结构存在双时相图像空间特征纠缠和不对应问题，在特征融合过程中会影响模型性能。而孪生网络分别从双时相图像中提取特征，然后融合他们生成变化检测结果</li><li><strong>多尺度特征差异图</strong>：由于位置偏移、光照条件、季节变化等因素，很难检测像素较弱的变化区域，同时孪生网络缺少对相对脆弱变化区域信息的关注和连续的下采样和卷积造成这些变化区域的丢失，此外当前的RS变化检测模型并没用充分的利用特征差异</li><li><strong>孪生残差多核池化模块（SRMP）</strong>：low-level特征包含细粒度位置信息，如：坐标和图像纹理；high-level特征包含粗粒度语义信息，如：物体范围、土地属性、语义等。SRMP可以提升对象的完整性和基于高级语义信息的小物体检测能力</li><li><strong>特征差异模块（FDM）</strong>：提供多尺度详细的变化信息来增强变化区域局部细节，FDM能够提升模型在物体边缘上的性能</li></ol><h3 id="先前工作不足"><a class="markdownIt-Anchor" href="#先前工作不足"></a> 先前工作不足：</h3><p>没有充分利用差异图<strong>difference map</strong>或者只是使用差异图而没有保留原始的特征图。这将使变化信息没有被完全挖掘导致丢失小物体和变化检测结果不完整</p><h2 id="研究方法"><a class="markdownIt-Anchor" href="#研究方法"></a> 研究方法</h2><h3 id="网络结构"><a class="markdownIt-Anchor" href="#网络结构"></a> 网络结构</h3><p><strong>Siamese U-shaped network</strong>：Siamese encoders、a feature difference map processing module、a decoder</p><blockquote><p>特征差异图处理模块由一个<strong>SRMP</strong>和四个<strong>FDM</strong>模块构成</p></blockquote><p>为了提高模型的性能，Encoder第一个部分采用在Imagenet上预训练的ResNet-34，并且取除了最后的池化层和全连接层，之后的四个encoder块由几个残差块构成（加速收敛、防止梯度消失）。Decoder部分采用卷积-转置卷积-卷积结构构成</p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20220926210608417.png" alt="image-20220926210608417" /></p><h3 id="srmp模块"><a class="markdownIt-Anchor" href="#srmp模块"></a> SRMP模块</h3><p>基于<a href="https://ieeexplore.ieee.org/document/8662594/">The Residual Multi-kernel Pooling module (RMP)</a>改进，能够进一步提取上下文信息并且扩大感受野。</p><p>具体操作流程如下：</p><ol><li>计算深层特征图的绝对差异值来得到特征差异图D</li><li>使用四个不同stride的最大池化层进行下采样来获得具有不同细节层次的多个特征图（2x2、3x3、4x4、5x5）</li><li>由于不同感受野的融合同时会产生不同细节的高层次变化信息，所以采用1x1卷积和上采样将四个单通道特征图恢复到原特征差异图大小即D，同时采用最近邻近差值防止信息丢失</li><li>将原始的两个特征图和上采样的特征图进行concat操作作为SRMP的输出</li></ol><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20220927093014912.png" alt="image-20220927093014912" /></p><h3 id="fdm模块"><a class="markdownIt-Anchor" href="#fdm模块"></a> FDM模块</h3><p>使用FDM从低层次差异图中提取变化信息增强变化区域的特征细节，能够使模型生成更准确的边缘。并且由于特征差异图不仅包含变化信息而且包含伪变化信息（光照、季节等原因导致），FDM在提取变化信息时可以去除在低层次特征差异图中的一些伪变化。</p><p>对于每个浅层特征，使用FDM提取特征并且生成多尺度和多深度的特征图，随后这些高分辨率特征图和深层变化信息一起送入Decoder中。在融合几阶段，该模型使用高级特征指导这些高分辨率变化特征图，以至于能够进一步优化变化区域的边缘并且最终生成更好的变化检测结果。</p><p>具体操作流程如下：</p><ol><li>根据生成的特征图计算差异图D</li><li>将D输入进Conv-BN-ReLU模块以减少维度（1/8）</li><li>降维后的差异图送入一个残差模块获得浅层变化特征图</li><li>将得到的浅层变化特征图和最初的两个特征图进行concat作为FDM的输出</li></ol><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20220927095340306.png" alt="image-20220927095340306" /></p><h3 id="损失函数设计"><a class="markdownIt-Anchor" href="#损失函数设计"></a> 损失函数设计</h3><p>一般的，在像素级别的任务中使用Dice Loss或者交叉熵损失函数。但由于在遥感图像变化检测中通常正样本会远小于负样本，即正负样本数量是不平衡的。此时如果直接使用上述损失函数计算会导致准确率很高，但是会导致大量正样本被误判并且召回率recall会很低。为了解决正负样本不平衡问题，论文中采用BCE Loss和Tversky Loss进行训练。</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>L</mi><mrow><mi>l</mi><mi>o</mi><mi>s</mi><mi>s</mi></mrow></msub><mo>=</mo><msub><mi>L</mi><mi>T</mi></msub><mo>+</mo><msub><mi>L</mi><mrow><mi>B</mi><mi>C</mi><mi>E</mi></mrow></msub></mrow><annotation encoding="application/x-tex">L_{loss} = L_T + L_{BCE}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">s</span><span class="mord mathnormal mtight">s</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05017em;">B</span><span class="mord mathnormal mtight" style="margin-right:0.07153em;">C</span><span class="mord mathnormal mtight" style="margin-right:0.05764em;">E</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p><p>其中<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>L</mi><mi>T</mi></msub></mrow><annotation encoding="application/x-tex">L_T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>为Tversky loss：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>L</mi><mi>T</mi></msub><mo stretchy="false">(</mo><mi>A</mi><mo separator="true">,</mo><mi>B</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mrow><mo stretchy="false">(</mo><mi>A</mi><mo>∩</mo><mi>B</mi><mo stretchy="false">)</mo></mrow><mrow><mo stretchy="false">(</mo><mo stretchy="false">(</mo><mi>A</mi><mo>∩</mo><mi>B</mi><mo stretchy="false">)</mo><mo>+</mo><mi>α</mi><mi mathvariant="normal">∣</mi><mi>A</mi><mo>−</mo><mi>B</mi><mi mathvariant="normal">∣</mi><mo>+</mo><mi>β</mi><mi mathvariant="normal">∣</mi><mi>B</mi><mo>−</mo><mi>A</mi><mi mathvariant="normal">∣</mi><mo stretchy="false">)</mo></mrow></mfrac></mrow><annotation encoding="application/x-tex">L_T(A,B)=\frac{(A \cap B)}{((A \cap B) + \alpha |A - B| + \beta |B - A|)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">A</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.363em;vertical-align:-0.936em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">(</span><span class="mopen">(</span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∩</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="mord">∣</span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal" style="margin-right:0.05278em;">β</span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal">A</span><span class="mord">∣</span><span class="mclose">)</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">(</span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∩</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>L</mi><mrow><mi>B</mi><mi>C</mi><mi>E</mi></mrow></msub></mrow><annotation encoding="application/x-tex">L_{BCE}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05017em;">B</span><span class="mord mathnormal mtight" style="margin-right:0.07153em;">C</span><span class="mord mathnormal mtight" style="margin-right:0.05764em;">E</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>为二元交叉熵损失：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>L</mi><mrow><mi>B</mi><mi>C</mi><mi>E</mi></mrow></msub><mo>=</mo><mo>−</mo><mo stretchy="false">(</mo><mi>B</mi><mo>×</mo><mi>l</mi><mi>n</mi><mi>A</mi><mo>+</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>B</mi><mo stretchy="false">)</mo><mo>×</mo><mi>l</mi><mi>n</mi><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>A</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">L_{BCE} = -(B \times lnA + (1 - B) \times ln(1 - A))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05017em;">B</span><span class="mord mathnormal mtight" style="margin-right:0.07153em;">C</span><span class="mord mathnormal mtight" style="margin-right:0.05764em;">E</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">−</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">n</span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">n</span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">A</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span></span></p><blockquote><p>其中A为模型的预测结果，B为实际结果；|A-B|为false positive（FP），|B-A|为false negative（FN）；<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>α</mi></mrow><annotation encoding="application/x-tex">\alpha</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>β</mi></mrow><annotation encoding="application/x-tex">\beta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.05278em;">β</span></span></span></span>用来控制FP和FN的权重</p></blockquote><h2 id="实验结果"><a class="markdownIt-Anchor" href="#实验结果"></a> 实验结果</h2><h3 id="数据集选取"><a class="markdownIt-Anchor" href="#数据集选取"></a> 数据集选取：</h3><p>采用三种数据集：CDD、BCDD、OSCD</p><h3 id="比较方法和评估指标"><a class="markdownIt-Anchor" href="#比较方法和评估指标"></a> 比较方法和评估指标</h3><h4 id="比较方法"><a class="markdownIt-Anchor" href="#比较方法"></a> 比较方法：</h4><ul><li>FC-EF</li><li>FC-Siam-Conc</li><li>FC-Siam-Diff</li><li>DASNet（VGG16、ResNet50）</li><li>SNUNet-CD</li><li>RDP-Net</li></ul><h4 id="评估指标"><a class="markdownIt-Anchor" href="#评估指标"></a> 评估指标</h4><ul><li><p>Precision（P）</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>P</mi><mo>=</mo><mfrac><mrow><mi>T</mi><mi>P</mi></mrow><mrow><mi>T</mi><mi>P</mi><mo>+</mo><mi>F</mi><mi>P</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">P = \frac {TP} {TP + FP}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.1296600000000003em;vertical-align:-0.7693300000000001em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.36033em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7693300000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p></li><li><p>Recall（R）</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>R</mi><mo>=</mo><mfrac><mrow><mi>T</mi><mi>P</mi></mrow><mrow><mi>T</mi><mi>P</mi><mo>+</mo><mi>F</mi><mi>N</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">R = \frac {TP} {TP + FN}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.1296600000000003em;vertical-align:-0.7693300000000001em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.36033em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7693300000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p></li><li><p>F1-score</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>F</mi><mn>1</mn><mo>=</mo><mn>2</mn><mo>×</mo><mfrac><mrow><mi>P</mi><mo>×</mo><mi>R</mi></mrow><mrow><mi>P</mi><mo>+</mo><mi>R</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">F1 = 2 \times \frac {P \times R}{P + R}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.1296600000000003em;vertical-align:-0.7693300000000001em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.36033em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7693300000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p></li><li><p>Overall Accuracy（OA）</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>O</mi><mi>A</mi><mo>=</mo><mfrac><mrow><mi>T</mi><mi>P</mi><mo>+</mo><mi>T</mi><mi>N</mi></mrow><mrow><mi>T</mi><mi>P</mi><mo>+</mo><mi>F</mi><mi>N</mi><mo>+</mo><mi>F</mi><mi>P</mi><mo>+</mo><mi>T</mi><mi>N</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">OA = \frac {TP + TN}{TP + FN + FP + TN}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.1296600000000003em;vertical-align:-0.7693300000000001em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.36033em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7693300000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p></li><li><p>Intersection-over-Union（IoU）</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>I</mi><mi>o</mi><mi>U</mi><mo>=</mo><mfrac><mrow><mi>T</mi><mi>P</mi></mrow><mrow><mi>T</mi><mi>P</mi><mo>+</mo><mi>F</mi><mi>P</mi><mo>+</mo><mi>F</mi><mi>N</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">IoU = \frac {TP}{TP + FP + FN}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.10903em;">U</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.1296600000000003em;vertical-align:-0.7693300000000001em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.36033em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7693300000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p></li><li><p>Kappa</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>K</mi><mi>a</mi><mi>p</mi><mi>p</mi><mi>a</mi><mo>=</mo><mfrac><mrow><mi>O</mi><mi>A</mi><mo>−</mo><mi>P</mi><mi>R</mi><mi>E</mi></mrow><mrow><mn>1</mn><mo>−</mo><mi>P</mi><mi>R</mi><mi>E</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">Kappa = \frac {OA - PRE}{1 - PRE}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="mord mathnormal">a</span><span class="mord mathnormal">p</span><span class="mord mathnormal">p</span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.1296600000000003em;vertical-align:-0.7693300000000001em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.36033em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7693300000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p></li></ul><blockquote><p>其中PRE为：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>P</mi><mi>R</mi><mi>E</mi><mo>=</mo><mfrac><mrow><mo stretchy="false">(</mo><mi>T</mi><mi>P</mi><mo>+</mo><mi>F</mi><mi>P</mi><mo stretchy="false">)</mo><mo stretchy="false">(</mo><mi>T</mi><mi>P</mi><mo>+</mo><mi>F</mi><mi>N</mi><mo stretchy="false">)</mo><mo>+</mo><mo stretchy="false">(</mo><mi>F</mi><mi>N</mi><mo>+</mo><mi>T</mi><mi>N</mi><mo stretchy="false">)</mo><mo stretchy="false">(</mo><mi>F</mi><mi>P</mi><mo>+</mo><mi>T</mi><mi>N</mi><mo stretchy="false">)</mo></mrow><mrow><mo stretchy="false">(</mo><mi>T</mi><mi>P</mi><mo>+</mo><mi>F</mi><mi>P</mi><mo>+</mo><mi>T</mi><mi>N</mi><mo>+</mo><mi>F</mi><mi>N</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow></mfrac></mrow><annotation encoding="application/x-tex">PRE = \frac{(TP+FP)(TP+FN)+(FN+TN)(FP+TN)}{(TP+FP+TN+FN)^2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.363em;vertical-align:-0.936em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mclose">)</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mclose">)</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p></blockquote><h3 id="消融实验"><a class="markdownIt-Anchor" href="#消融实验"></a> 消融实验</h3><h4 id="srmp-fdm"><a class="markdownIt-Anchor" href="#srmp-fdm"></a> SRMP &amp; FDM</h4><blockquote><p>对比了特征差异图进行最大池化后的不同插值结果，最近插值和双线性插值</p></blockquote><p>可以从图中看出经过最大池化后由于增加了感受野，大物体更加完整、细长物体更加连续（橙色圈出部分）。并且当采用双线性插值进行上采样时会模糊大物体的边缘（绿色圈出部分），同时还会对小物体变化检测造成严重损害（红色圈出部分）。从图7.c中可以看出虽然更粗糙但是却保留了相当高的变化像素强度（个人理解为区分度），以便后续对浅层变化特征进行指导</p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20220928100947577.png" alt="image-20220928100947577" /></p><p>从表中可以看出SRMP模块能够从深层特征差异图中提取有效的深层变化信息并且能够更好地解决物体多尺度问题和物体完整性问题。同时最近插值能够保护小物体和物体边缘的变化像素强度。</p><p>对于FDM模块从表中可以看出对比baseline，添加FDM后的各个指标均有增加，说明FDM模块是具有作用的</p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20220928102333044.png" alt="image-20220928102333044" /></p><h3 id="对比实验"><a class="markdownIt-Anchor" href="#对比实验"></a> 对比实验</h3><h4 id="cdd"><a class="markdownIt-Anchor" href="#cdd"></a> CDD</h4><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20220928122118095.png" alt="image-20220928122118095" /></p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20220928122825113.png" alt="image-20220928122825113" /></p><h4 id="bcdd"><a class="markdownIt-Anchor" href="#bcdd"></a> BCDD</h4><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20220928124109221.png" alt="image-20220928124109221" /></p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20220928124129688.png" alt="image-20220928124129688" /></p><h4 id="oscd"><a class="markdownIt-Anchor" href="#oscd"></a> OSCD</h4><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20220928124402230.png" alt="image-20220928124402230" /></p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20220928124421832.png" alt="image-20220928124421832" /></p><h4 id="参数总数和运行速度"><a class="markdownIt-Anchor" href="#参数总数和运行速度"></a> 参数总数和运行速度</h4><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20220928124757222.png" alt="image-20220928124757222" /></p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20220928124813971.png" alt="image-20220928124813971" /></p><p>当然原论文做了更多更详细的实验分析，感兴趣可以阅读原论文！</p><h3 id="结论"><a class="markdownIt-Anchor" href="#结论"></a> 结论</h3><p>采用孪生网络、SRMP模块和FDM模块为解码器提供多尺度和多深度信息，以增强变化强度和保留原始特征。该网络模型能在物体完整性、小物体检测和物体边缘检测中取得很好的性能。并且在和其他模型在以上三个数据集中比较是同样取得了很好的效果，在模型体量和运行速度上有一个很好的权衡。然而该模型还有一些不足的地方，如模型的推理速度需要进一步缩短等。</p>]]></content>
      
      
      <categories>
          
          <category> 论文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RS </tag>
            
            <tag> change detection </tag>
            
            <tag> high-resolution images </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Attribute filter based infrared and visible image fusion》笔记</title>
      <link href="/posts/61935.html"/>
      <url>/posts/61935.html</url>
      
        <content type="html"><![CDATA[<p>原文地址：<a href="https://linkinghub.elsevier.com/retrieve/pii/S1566253521000701">Attribute filter based infrared and visible image fusion</a></p><h2 id="基本思想"><a class="markdownIt-Anchor" href="#基本思想"></a> 基本思想</h2><p>本文主要保留了可见光图像的纹理细节部分，并且将近红外图像中的显著目标部分与可见光图像融合。在提取近红外图像中的显著特征时首先采用特征过滤器（attribute filter）获得基于显著对象的初始权重图（不能保证对齐），之后再采用边缘保护过滤器（edge-preserving filter）对初始权重图进行完善。最后采用拉普拉斯金字塔（Laplacian Pyramid）策略将源图像和最终权重进行融合得到最终输出。</p><h2 id="主要创新点"><a class="markdownIt-Anchor" href="#主要创新点"></a> 主要创新点</h2><ul><li><p>提出了一种以属性为指导的可见光与近红外图像融合算法<strong>AGF</strong></p></li><li><p>设计了一种能够拍摄可见光与近红外图像和视频数据集的系统</p></li><li><p>在公开的和创建的数据集上的实验证明了<strong>AGF</strong>方法相比于其他融合算法的优越性</p></li></ul><h2 id="相关背景"><a class="markdownIt-Anchor" href="#相关背景"></a> 相关背景</h2><h3 id="attribute-filtering"><a class="markdownIt-Anchor" href="#attribute-filtering"></a> Attribute filtering</h3><p>未完待续…</p><h3 id="edge-preserving-filtering"><a class="markdownIt-Anchor" href="#edge-preserving-filtering"></a> Edge-preserving filtering</h3><p>未完待续…</p><h2 id="具体实现"><a class="markdownIt-Anchor" href="#具体实现"></a> 具体实现</h2><h3 id="agf实现流程"><a class="markdownIt-Anchor" href="#agf实现流程"></a> AGF实现流程</h3><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20220914164013843.png" alt="image-20220914164013843" /></p><p>首先根据不同的阈值和过滤规则获取近红外图像的暗物体和亮物体差异图<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>s</mi><mi>a</mi></msub><mtext>、</mtext><msub><mi>s</mi><mi>b</mi></msub></mrow><annotation encoding="application/x-tex">s_a、s_b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">、</span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">b</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，之后进行相加操作获取近红外图像中亮暗区域权重图<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>S</mi><mo>=</mo><msub><mi>s</mi><mi>a</mi></msub><mo>+</mo><msub><mi>s</mi><mi>b</mi></msub><mtext>、</mtext><msub><mi>W</mi><mi>R</mi></msub><mo>=</mo><mi>T</mi><mi>H</mi><mi>R</mi><mi>E</mi><mi>S</mi><mi>E</mi><mo stretchy="false">(</mo><mi>S</mi><mo separator="true">,</mo><mi>θ</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">S=s_a+s_b、W_R=THRESE(S,\theta)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">b</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">、</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.00773em;">R</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="mclose">)</span></span></span></span>（大于设定阈值即为1，否则为0）。经过attribute filter获取到了初始权重图，之后使用域递归滤波器（The domain transform recursive filter）对初始权重图进行优化：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>W</mi><mo>=</mo><mi>D</mi><mi>T</mi><mi>R</mi><mi>F</mi><mo stretchy="false">(</mo><msub><mi>W</mi><mi>R</mi></msub><mo separator="true">,</mo><mi>R</mi><mo separator="true">,</mo><msub><mi>δ</mi><mi>s</mi></msub><mo separator="true">,</mo><msub><mi>δ</mi><mi>r</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">W=DTRF(W_R,R,\delta_s,\delta_r)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.00773em;">R</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03785em;">δ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.03785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">s</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03785em;">δ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.03785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>R</mi></mrow><annotation encoding="application/x-tex">R</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span></span>代表直到图像，如源近红外图像。最后进行拉普拉斯金字塔融合，分别构建出可见光与近红外图像的拉普拉斯金字塔，然后</p><p>为权重图<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>W</mi></mrow><annotation encoding="application/x-tex">W</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">W</span></span></span></span>构建高斯金字塔，其中图像金字塔的最大分解层数由源图像分辨率决定,其中：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>=</mo><mfrac><mrow><mi>l</mi><mi>o</mi><mi>g</mi><mo stretchy="false">(</mo><mi>m</mi><mi>i</mi><mi>n</mi><mo stretchy="false">(</mo><mi>m</mi><mo separator="true">,</mo><mi>n</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><mrow><mi>l</mi><mi>o</mi><mi>g</mi><mo stretchy="false">(</mo><mn>2</mn><mo stretchy="false">)</mo></mrow></mfrac><mo separator="true">,</mo><mi>m</mi><mo>×</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">n=\frac{log(min(m,n))}{log(2)}, m\times n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.53em;vertical-align:-0.52em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">g</span><span class="mopen mtight">(</span><span class="mord mtight">2</span><span class="mclose mtight">)</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">g</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight">m</span><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight">n</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight">m</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight">n</span><span class="mclose mtight">)</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.52em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span>代表分辨率；然后对相应的分解层进行计算，最后融合图像<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>F</mi></mrow><annotation encoding="application/x-tex">F</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span></span></span></span>可表示为</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>F</mi><mo>=</mo><mi>r</mi><mi>e</mi><mi>c</mi><mi>o</mi><mi>n</mi><mo stretchy="false">(</mo><munderover><mo>∑</mo><mrow><mi>n</mi><mo>=</mo><mn>1</mn></mrow><mi>N</mi></munderover><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><msubsup><mi>G</mi><mi>W</mi><mi>n</mi></msubsup><mo stretchy="false">)</mo><msubsup><mi>L</mi><mrow><mi>V</mi><mi>I</mi><mi>S</mi></mrow><mi>n</mi></msubsup><mo>+</mo><msubsup><mi>G</mi><mi>W</mi><mi>n</mi></msubsup><msubsup><mi>L</mi><mrow><mi>I</mi><mi>R</mi></mrow><mi>n</mi></msubsup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">F=recon(\sum^{N}_{n=1}(1-G^n_W)L^n_{VIS}+G_W^nL_{IR}^n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.0954490000000003em;vertical-align:-1.267113em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">e</span><span class="mord mathnormal">c</span><span class="mord mathnormal">o</span><span class="mord mathnormal">n</span><span class="mopen">(</span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8283360000000002em;"><span style="top:-1.882887em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.267113em;"><span></span></span></span></span></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">G</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7143919999999999em;"><span style="top:-2.4530000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">W</span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord"><span class="mord mathnormal">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7143919999999999em;"><span style="top:-2.4530000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.22222em;">V</span><span class="mord mathnormal mtight" style="margin-right:0.07847em;">I</span><span class="mord mathnormal mtight" style="margin-right:0.05764em;">S</span></span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">G</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7143919999999999em;"><span style="top:-2.4530000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">W</span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7143919999999999em;"><span style="top:-2.4530000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.07847em;">I</span><span class="mord mathnormal mtight" style="margin-right:0.00773em;">R</span></span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p><h2 id="实验结果"><a class="markdownIt-Anchor" href="#实验结果"></a> 实验结果</h2><h3 id="评价指标选取"><a class="markdownIt-Anchor" href="#评价指标选取"></a> 评价指标选取</h3><p>一般的，融合指标分为四类：<strong>基于信息理论指标</strong>、<strong>基于图像特征指标</strong>、<strong>基于图像结构相似性指标</strong>和<strong>基于人类感知启发的融合指标</strong>.本篇论文中采用<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>F</mi><mi>M</mi><mi>I</mi></mrow><annotation encoding="application/x-tex">FMI</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span></span></span></span>（Information Theory-Based Metrics）、<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>Q</mi><mrow><mi>A</mi><mi>B</mi><mi mathvariant="normal">/</mi><mi>F</mi></mrow></msup></mrow><annotation encoding="application/x-tex">Q^{AB/F}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0824399999999998em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal">Q</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8879999999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">A</span><span class="mord mathnormal mtight" style="margin-right:0.05017em;">B</span><span class="mord mtight">/</span><span class="mord mathnormal mtight" style="margin-right:0.13889em;">F</span></span></span></span></span></span></span></span></span></span></span></span>（Image Feature-Based Metrics）、<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>Q</mi><mi>Y</mi></msub></mrow><annotation encoding="application/x-tex">Q_Y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal">Q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.22222em;">Y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>（Image Structural Similarity-Based Metrics）、<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>Q</mi><mrow><mi>C</mi><mi>B</mi></mrow></msub></mrow><annotation encoding="application/x-tex">Q_{CB}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal">Q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.07153em;">C</span><span class="mord mathnormal mtight" style="margin-right:0.05017em;">B</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>（Human Perception Inspired Fusion Metrics）</p>]]></content>
      
      
      <categories>
          
          <category> 论文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cv </tag>
            
            <tag> image fusion </tag>
            
            <tag> RGB&amp;NIR </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Explicit and Implicit Models in Infrared and Visible Image Fusion》笔记</title>
      <link href="/posts/5368.html"/>
      <url>/posts/5368.html</url>
      
        <content type="html"><![CDATA[<p>原文地址：<a href="https://arxiv.org/abs/2206.09581">Explicit and implicit models in infrared and visible image fusion</a></p><h2 id="abstract"><a class="markdownIt-Anchor" href="#abstract"></a> Abstract</h2><p>这篇文章主要讨论深度学习模型在图像融合中的限制和相应的优化策略，并且将各种模型分为显式模型和隐式模型（即能够自适应地学习高级特征或者能够建立全局像素的联系）</p><p>同时提出图像融合任务面临的两个问题：</p><ul><li>维持不同模态间的独特特征</li><li>维持不同等级的图像特征（如全局特征和局部特征）</li></ul><p>通过10个模型在21个测试集上的对比实验表明：隐式模型比显式模型具有更全面的学习图像特征能力，但是同时也需要提高其稳定性。</p><h2 id="introduction"><a class="markdownIt-Anchor" href="#introduction"></a> Introduction</h2><p>近红外图像包含目标的热度信息，而可见光图像包含图像的纹理细节和梯度信息。其中可见光图像中的独特特征为高分辨率和局部特征，并且可以通过简单的网络实现；而近红外图像中的特有特征为高级语义特征和全局轮廓特征，需要更加复杂和深层的网络进行提取。</p><p>目前神经网络存在一些缺点：</p><ul><li><p>特征提取阶段具有局限性：</p><p>虽然传统的神经网络提升了对非线性特征的表达能力并且对局部特征的提取执完成地很好，但是当通过神经网络提取高级语义和全局特征时会造成梯度消失、梯度爆炸问题，同时会降低网络的性能。并且如果只保留和输出最后一层特征，中间层特征将会消失。相应的解决方法如ResNet和DenseNet可以保护网络梯度，其他的像U-Net和特征金字塔等能够保留更多的中间特征</p></li><li><p>研究者很少考虑模态间的不同：</p><p>在更多的情况下，人们会使用相同的encoder或者相同的网络提取源图像特征，相应的会忽视不同模态之间的不同。于是会采用双流结构分别提取不同模态图像的特征</p></li></ul><p>以下为针对显式模型和隐式模型自身缺点和优化方法做出的表格：</p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20220903182617938.png" alt="image-20220903182617938" /></p><h2 id="conclusion"><a class="markdownIt-Anchor" href="#conclusion"></a> Conclusion</h2><p>最后，在多模式图像的融合任务中，我们总结了两个关键方面。一方面，我们最好考虑方式的差异。另一方面，还应考虑将模式中各个特征级别的特征级别之间的差异以及全面提取本地和全局特征的差异，以确保最大程度地保留信息。在未来的研究中，我们提出了建议，将明确的模型与隐式模型相结合，以全面提取本地和全局特征，并提高隐式模型的稳定性。</p>]]></content>
      
      
      <categories>
          
          <category> 论文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cv </tag>
            
            <tag> image fusion </tag>
            
            <tag> RGB&amp;NIR </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客备份</title>
      <link href="/posts/20231.html"/>
      <url>/posts/20231.html</url>
      
        <content type="html"><![CDATA[<h2 id="hexo博客的备份及恢复"><a class="markdownIt-Anchor" href="#hexo博客的备份及恢复"></a> Hexo博客的备份及恢复</h2><h3 id="前提-and-机制"><a class="markdownIt-Anchor" href="#前提-and-机制"></a> 前提 and 机制</h3><p>Hexo能够备份的前提是你已经初始化好了需要备份的博客（各种需要的环境配置）</p><p>Hexo每次执行<code>hexo d</code>其实是将hexo编译后的文件上传部署到gitee或者github，用来生成网页，不包含博客源文件。也就是上传本地目录生成的</p><p><code>.deploy_git</code>文件夹里的内容，其他内容包括<code>source</code>、<code>主题文件</code>、<code>配置文件</code>均没有上传到gitee上，所以可以将这部分内容上传到项目的另一个分支中</p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20220809163025528.png" alt="image-20220809163025528" /></p><h3 id="备份博客"><a class="markdownIt-Anchor" href="#备份博客"></a> 备份博客</h3><h4 id="创建新分支"><a class="markdownIt-Anchor" href="#创建新分支"></a> 创建新分支</h4><p>因为github速度问题这里已gitee为例。首先在原有的master分支基础上新建分支<code>sources</code>，并将其设置为默认分支（方便后续备份上传）</p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/image-20220809163515897.png" alt="image-20220809163515897" /></p>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> backup </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ajax提交表单的一些bug</title>
      <link href="/posts/18896.html"/>
      <url>/posts/18896.html</url>
      
        <content type="html"><![CDATA[<h1 id="关于使用ajax提交表单后页面异常加载和报错问题"><a class="markdownIt-Anchor" href="#关于使用ajax提交表单后页面异常加载和报错问题"></a> 关于使用Ajax提交表单后页面异常加载和报错问题</h1><h2 id="1-bug出现场景"><a class="markdownIt-Anchor" href="#1-bug出现场景"></a> 1、bug出现场景</h2><p>本想要实现表单的异步多文件上传功能，通过点击按钮调用ajax方法，然后与后端进行通信。</p><p>html代码：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>test_form<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>txt<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>111<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token value javascript language-javascript"><span class="token function">test_form</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span></span></span><span class="token punctuation">></span></span>点击测试<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>js代码：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span>        <span class="token keyword">function</span> <span class="token function">test_form</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>                <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'post'</span><span class="token punctuation">,</span>                <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">'/test'</span><span class="token punctuation">,</span>                <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token string">'aaa'</span><span class="token punctuation">,</span>                <span class="token literal-property property">dataType</span><span class="token operator">:</span> <span class="token string">"json"</span><span class="token punctuation">,</span>                <span class="token function-variable function">success</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'success'</span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token function-variable function">error</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>srcipt<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>后端Java代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ResponseBody</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"测试表单提交..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"sss"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>预计结果应该是弹出“success”，可结果却是”error“，并且浏览器地址也会发生改变，可实际上我并没有设置form的action属性。而且控制台也会输出<code>“测试表单提交...”</code>字样，说明后台方法是已经执行了的。</p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/202203111501339.png" alt="image-20220311150130064" /></p><h2 id="2-分析原因"><a class="markdownIt-Anchor" href="#2-分析原因"></a> 2、分析原因</h2><p>既然后台也执行了，那么为什么会出现这种情况？后来我又测试了直接通过按钮调用ajax请求而不通过表单，奇怪的事情发生了，可以完美的运行程序，并且地址栏也不会发生改变。于是猜测会不会是表单会在提交ajax请求后会自己再提交一次请求，于是我就在表单<code>action</code>属性添加了地址，并且将后台方法设置为<code>get</code>。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>test_form<span class="token punctuation">"</span></span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/test2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>txt<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>111<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token value javascript language-javascript"><span class="token function">test_form</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span></span></span><span class="token punctuation">></span></span>点击测试<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"test2"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ResponseBody</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token class-name">Test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"测试表单提交2..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"sss2"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后奇怪的事情又发生了，运行程序后地址栏会发生这样变化：</p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/202203111510068.png" alt="image-20220311151009967" /></p><p>看到这样的变化似乎找到了原因。我们都知道<code>?</code>代表的是<code>get</code>方法传递参数，同时我ajax方法传递的就是表单中的<code>txt</code>数据，而<code>/test2</code>则是表单<code>action</code>数据。那么就代表表单进行了两次提交，一次是<code>/test</code>，另一次是<code>/test2</code>。这就代表<code>button</code>在表单中可能默认代表<code>submit</code>。于是百度查了一下，果然<code>button</code>在表单中默认为<code>type=submit</code>，所以会提交两次，如果想要只提交一次的话就设置<code>type=button</code>，确实有点我非我我感觉。</p><h2 id="3-总结"><a class="markdownIt-Anchor" href="#3-总结"></a> 3、总结</h2><p>尽量使用<code>input</code>并设置<code>type=button</code>进行表单提交，这样可以避免不必要的麻烦和bug，同时记住<code>button</code>也是有<code>type</code>属性的，并且在表单中默认为<code>submit</code>。（纯粹有种脱裤子放屁的感觉，button不再是button还得设置<code>type=button</code>，我非我了属于是</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ajax </tag>
            
            <tag> form </tag>
            
            <tag> bug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《DarkVisionNet：Low-Light Imaging via RGB-NIR Fusion with Deep Inconsistency Prior》笔记</title>
      <link href="/posts/48007.html"/>
      <url>/posts/48007.html</url>
      
        <content type="html"><![CDATA[<h2 id="abstract"><a class="markdownIt-Anchor" href="#abstract"></a> Abstract</h2><p>由于低光图像中的高强度噪声放大了RGB和NIR图像之间结构不一致的影响，使得现有的算法失效。为了解决这一问题，本文提出了一种新的RGB-NIR融合算法 Dark Vision Net（DVN）。该算法的两个技术新颖点是Deep Structure 和 Deep Inconsistency Prior (DIP)两部分。同时设计了新的由对齐的RGB-NIR图像对组成的数据集Dark Vision Dataset（DVD），也是第一个公开的RGB-NIR融合基准。本文结果显示DVN在PSNR和SSIM指标方面明显优于其他算法，特别是在极低光条件下。</p><h2 id="introduction"><a class="markdownIt-Anchor" href="#introduction"></a> Introduction</h2><p>高质量的低光图像是一个具有挑战但是很有意义的任务。一方面他是很多重要任务的基础（24小时监控、手机拍摄等）；另一方面在极低环境下图像中的大量噪声会阻碍算法进行图像恢复。RGB-NIR图像融合技术要做的是：通过相应的近红外图像中的丰富的详细的信息来增强低光环境中具有大量噪声的RGB图像，极大地提高融合后RGB图像的信噪比（SNR）。</p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/202203032220790.png" alt="image-20220303222024522" /></p><p>但是目前存在的RGB-NIR融合算法存在着RGB和NIR图像结构不一致的问题，导致了生成了不自然的图像和关键信息的缺失，这些限制了RGN-NIR融合算法在低光环境下的应用（因为在低光环境下RGB图像会因为大量的噪声极大地加剧和NIR图像的结构不一致性）。</p><p>本文主要通过解决低光环境RGB-NIR图像结构不一致问题来改进具有极低信噪比的RGB-NIR图像融合问题。作者认为通过引入深度特征的先验信息可以很好地解决上述问题。下方是整个算法的结构图：</p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/202203032232173.png" alt="image-20220303223232068" /></p><p>其中有两个主要新颖技术点：</p><ul><li><p>DSEM</p><blockquote><p>即使面对低信噪比，该结构也能很有效地提取和表示可靠的结构信息，对后续的先验信息很重要。</p></blockquote></li><li><p>DIP</p></li></ul><h2 id="related-work"><a class="markdownIt-Anchor" href="#related-work"></a> Related Work</h2><h3 id="image-denoising"><a class="markdownIt-Anchor" href="#image-denoising"></a> Image Denoising</h3><p>虽然现在有很多图像去噪的算法，但是在极低光照环境下，被高强度噪声破坏的精细纹理和很难再恢复，与此同时去噪算法会倾向于输出过于平滑的图像。</p><h3 id="rgb-nir-fusion"><a class="markdownIt-Anchor" href="#rgb-nir-fusion"></a> RGB-NIR Fusion</h3><p>现有算法大部分有以下两个问题：</p><ul><li>处理结构不一致图像时能力不足，导致结果出现严重的伪影。</li><li>噪声抑制能力不足，特别是在低光环境下。</li></ul><h3 id="datasets"><a class="markdownIt-Anchor" href="#datasets"></a> DataSets</h3><p>由于获取RGB-NIR图像对比较困难，所以目前只有少量数据数据可以用于RGB-NIR融合研究。为了解决这一问题，作者团队收集了一个名为Dark Vision Datase（DVD）的数据集，作为第一个公开的RGB-NIR融合基准。</p><h2 id="approach"><a class="markdownIt-Anchor" href="#approach"></a> Approach</h2><h3 id="prior-knowledge-of-structure-inconsistency"><a class="markdownIt-Anchor" href="#prior-knowledge-of-structure-inconsistency"></a> Prior Knowledge of Structure Inconsistency</h3><p>本文首先从各个特征通道提取出二值边缘图，然后将不一致性用函数 F 来定义。</p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/202203041348775.png" alt="image-202203041348775" /></p><p>其中C和N代表RGB和NIR图像的R/G/B通道，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>e</mi><mi>d</mi><mi>g</mi><msup><mi>e</mi><mi>C</mi></msup></mrow><annotation encoding="application/x-tex">edge^{C}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.035771em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">e</span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.07153em;">C</span></span></span></span></span></span></span></span></span></span></span></span>和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>e</mi><mi>d</mi><mi>g</mi><msup><mi>e</mi><mi>N</mi></msup></mrow><annotation encoding="application/x-tex">edge^{N}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.035771em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">e</span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span></span></span></span></span></span></span></span></span></span></span></span>分别代表C和N的二值边缘映射。当 F 等于0时则代表<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>e</mi><mi>d</mi><mi>g</mi><msup><mi>e</mi><mi>C</mi></msup></mrow><annotation encoding="application/x-tex">edge^{C}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.035771em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">e</span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.07153em;">C</span></span></span></span></span></span></span></span></span></span></span></span>和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>e</mi><mi>d</mi><mi>g</mi><msup><mi>e</mi><mi>N</mi></msup></mrow><annotation encoding="application/x-tex">edge^{N}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.035771em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">e</span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span></span></span></span></span></span></span></span></span></span></span></span>具有严重的不一致性，相反，在RGB和NIR结构一致的区域 F 为1。利用 F 的输出可以直接通过与NIR相乘来抑制不一致的结构。</p><h3 id="extraction-of-deep-structures"><a class="markdownIt-Anchor" href="#extraction-of-deep-structures"></a> Extraction of Deep Structures</h3><p>虽然函数 F 能够很好的描述RGB-NIR之间的不一致性，但是却不能直接应用于低光环境下。当面对大量噪声的RGB图像时，计算出的不一致映射只包含非信息噪声。所以，为了避免噪声在结构不一致提取上的影响，本文提出了深度结构提取模块 Deep Structure Extraction Module (DSEM)和深度不一致先验模块Deep Inconsistency Prior (DIP)来计算特征空间上的结构不一致性。</p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/202203041400254.png" alt="image-20220304140042125" /></p><h3 id="supervision-of-dsem"><a class="markdownIt-Anchor" href="#supervision-of-dsem"></a> Supervision of DSEM</h3><p>DSEM从网络R中提取多尺度特征<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mi>e</mi><mi>a</mi><msub><mi>t</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">feat_{i}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal">e</span><span class="mord mathnormal">a</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>（i代表尺度），并且输出多尺度深度结构映射<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>s</mi><mi>t</mi><mi>r</mi><mi>u</mi><mi>c</mi><msub><mi>t</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">struct_{i}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76508em;vertical-align:-0.15em;"></span><span class="mord mathnormal">s</span><span class="mord mathnormal">t</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">u</span><span class="mord mathnormal">c</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>。为了使DSEM预测出高质量的深度结构映射，本文引入了一个监督信号<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>s</mi><mi>t</mi><mi>r</mi><mi>u</mi><mi>c</mi><msubsup><mi>t</mi><mrow><mi>i</mi><mo separator="true">,</mo><mi>c</mi></mrow><mrow><mi>g</mi><mi>t</mi></mrow></msubsup></mrow><annotation encoding="application/x-tex">struct^{gt}_{i,c}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.324436em;vertical-align:-0.412972em;"></span><span class="mord mathnormal">s</span><span class="mord mathnormal">t</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">u</span><span class="mord mathnormal">c</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9114639999999999em;"><span style="top:-2.4231360000000004em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight">c</span></span></span></span><span style="top:-3.1809080000000005em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">g</span><span class="mord mathnormal mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.412972em;"><span></span></span></span></span></span></span></span></span></span>，损失函数表示为：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi mathvariant="script">L</mi><mrow><mi>s</mi><mi>t</mi><mi>r</mi><mi>u</mi></mrow></msub><mo>=</mo><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mn>3</mn></msubsup><msubsup><mo>∑</mo><mrow><mi>c</mi><mo>=</mo><mn>1</mn></mrow><mrow><mi>C</mi><msub><mi>h</mi><mi>i</mi></msub></mrow></msubsup><mi>D</mi><mi>i</mi><mi>s</mi><mi>t</mi><mo stretchy="false">(</mo><mi>s</mi><mi>t</mi><mi>r</mi><mi>u</mi><mi>c</mi><msub><mi>t</mi><mrow><mi>i</mi><mo separator="true">,</mo><mi>c</mi></mrow></msub><mo separator="true">,</mo><mi>s</mi><mi>t</mi><mi>r</mi><mi>u</mi><mi>c</mi><msubsup><mi>t</mi><mrow><mi>i</mi><mo separator="true">,</mo><mi>c</mi></mrow><mrow><mi>g</mi><mi>t</mi></mrow></msubsup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\mathcal{L}_{stru} = \sum_{i=1}^{3}\sum_{c=1}^{Ch_{i}}Dist(struct_{i,c},struct^{gt}_{i,c})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord"><span class="mord mathcal">L</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">s</span><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight">u</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.40198em;vertical-align:-0.412972em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.954008em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.989008em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">c</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.07153em;">C</span><span class="mord mtight"><span class="mord mathnormal mtight">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord mathnormal">i</span><span class="mord mathnormal">s</span><span class="mord mathnormal">t</span><span class="mopen">(</span><span class="mord mathnormal">s</span><span class="mord mathnormal">t</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">u</span><span class="mord mathnormal">c</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight">c</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">s</span><span class="mord mathnormal">t</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">u</span><span class="mord mathnormal">c</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9114639999999999em;"><span style="top:-2.4231360000000004em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight">c</span></span></span></span><span style="top:-3.1809080000000005em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">g</span><span class="mord mathnormal mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.412972em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>，其中<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><msub><mi>h</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">Ch_{i}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord"><span class="mord mathnormal">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>是第i层深度结构的通道数，Dist是Dice Loss，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>s</mi><mi>t</mi><mi>r</mi><mi>u</mi><mi>c</mi><msub><mi>t</mi><mrow><mi>i</mi><mo separator="true">,</mo><mi>c</mi></mrow></msub></mrow><annotation encoding="application/x-tex">struct_{i,c}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9011879999999999em;vertical-align:-0.286108em;"></span><span class="mord mathnormal">s</span><span class="mord mathnormal">t</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">u</span><span class="mord mathnormal">c</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight">c</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>是第i层第c个通道的预测深度结构，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>s</mi><mi>t</mi><mi>r</mi><mi>u</mi><mi>c</mi><msubsup><mi>t</mi><mrow><mi>i</mi><mo separator="true">,</mo><mi>c</mi></mrow><mrow><mi>g</mi><mi>t</mi></mrow></msubsup></mrow><annotation encoding="application/x-tex">struct^{gt}_{i,c}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.324436em;vertical-align:-0.412972em;"></span><span class="mord mathnormal">s</span><span class="mord mathnormal">t</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">u</span><span class="mord mathnormal">c</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9114639999999999em;"><span style="top:-2.4231360000000004em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight">c</span></span></span></span><span style="top:-3.1809080000000005em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">g</span><span class="mord mathnormal mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.412972em;"><span></span></span></span></span></span></span></span></span></span>代表相应的ground-truth。其中Dice Loss表示为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>D</mi><mi>i</mi><mi>s</mi><mi>t</mi><mo stretchy="false">(</mo><mi>P</mi><mo separator="true">,</mo><mi>G</mi><mo stretchy="false">)</mo><mo>=</mo><mo stretchy="false">(</mo><msubsup><mo>∑</mo><mi>j</mi><mi>N</mi></msubsup><msubsup><mi>p</mi><mi>j</mi><mn>2</mn></msubsup><mo>+</mo><msubsup><mo>∑</mo><mi>j</mi><mi>N</mi></msubsup><msubsup><mi>g</mi><mi>j</mi><mn>2</mn></msubsup><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><mo stretchy="false">(</mo><mn>2</mn><msubsup><mo>∑</mo><mi>j</mi><mi>N</mi></msubsup><msub><mi>p</mi><mi>j</mi></msub><msub><mi>g</mi><mi>j</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">Dist(P,G) = (\sum_{j}^{N}p_{j}^{2}+\sum_{j}^{N}g_{j}^{2})/(2\sum_{j}^{N}p_{j}g_{j})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord mathnormal">i</span><span class="mord mathnormal">s</span><span class="mord mathnormal">t</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">G</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.417049em;vertical-align:-0.43581800000000004em;"></span><span class="mopen">(</span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.981231em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.43581800000000004em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-2.441336em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.394772em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.417049em;vertical-align:-0.43581800000000004em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.981231em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.43581800000000004em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-2.441336em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.394772em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord">/</span><span class="mopen">(</span><span class="mord">2</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.981231em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.43581800000000004em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>p</mi><mi>j</mi></msub></mrow><annotation encoding="application/x-tex">p_{j}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.716668em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>g</mi><mi>j</mi></msub></mrow><annotation encoding="application/x-tex">g_{j}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.716668em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>代表在P和G上的第j个像素。</p><hr /><p>本文根据Deep Image Prior这篇论文的思想建立了监督信号。<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>s</mi><mi>t</mi><mi>r</mi><mi>u</mi><mi>c</mi><msubsup><mi>t</mi><mrow><mi>i</mi><mo separator="true">,</mo><mi>c</mi></mrow><mrow><mi>g</mi><mi>t</mi></mrow></msubsup></mrow><annotation encoding="application/x-tex">struct_{i,c}^{gt}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.324436em;vertical-align:-0.412972em;"></span><span class="mord mathnormal">s</span><span class="mord mathnormal">t</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">u</span><span class="mord mathnormal">c</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9114639999999999em;"><span style="top:-2.4231360000000004em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight">c</span></span></span></span><span style="top:-3.1809080000000005em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">g</span><span class="mord mathnormal mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.412972em;"><span></span></span></span></span></span></span></span></span></span>从而一个预训练的网络AutoEncoder中获得，其中AE网络和R相比只是少了skip connection结构。其中<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>s</mi><mi>t</mi><mi>r</mi><mi>u</mi><mi>c</mi><msubsup><mi>t</mi><mrow><mi>i</mi><mo separator="true">,</mo><mi>c</mi></mrow><mrow><mi>g</mi><mi>t</mi></mrow></msubsup></mrow><annotation encoding="application/x-tex">struct_{i,c}^{gt}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.324436em;vertical-align:-0.412972em;"></span><span class="mord mathnormal">s</span><span class="mord mathnormal">t</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">u</span><span class="mord mathnormal">c</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9114639999999999em;"><span style="top:-2.4231360000000004em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight">c</span></span></span></span><span style="top:-3.1809080000000005em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">g</span><span class="mord mathnormal mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.412972em;"><span></span></span></span></span></span></span></span></span></span>计算公式为：</p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/202203041501153.png" alt="image-20220304150109062" /></p><p>其中<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi><mi>e</mi><msub><mi>c</mi><mrow><mi>i</mi><mo separator="true">,</mo><mi>c</mi></mrow></msub></mrow><annotation encoding="application/x-tex">dec_{i,c}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.980548em;vertical-align:-0.286108em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">e</span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight">c</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>表示多尺度特征，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>▽</mo></mrow><annotation encoding="application/x-tex">\bigtriangledown</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord">▽</span></span></span></span>代表Sobel算子，m代表均值。</p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/202203041500142.png" alt="image-20220304150022031" /></p><h3 id="calculation-of-dip-and-image-fusion"><a class="markdownIt-Anchor" href="#calculation-of-dip-and-image-fusion"></a> Calculation of DIP and Image Fusion</h3><p>通过DSEM提取出的深度结构包含丰富的结构信息同时对噪声具有鲁棒性，根据RGB和NIR图像产生的struct可以引入上述的结构不一致函数<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="script">F</mi></mrow><annotation encoding="application/x-tex">\mathcal{F}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord"><span class="mord mathcal" style="margin-right:0.09931em;">F</span></span></span></span></span>来计算高质量的结构不一致先验：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mi>M</mi><mrow><mi>i</mi><mo separator="true">,</mo><mi>c</mi></mrow><mrow><mi>D</mi><mi>I</mi><mi>P</mi></mrow></msubsup><mo>=</mo><mi mathvariant="script">F</mi><mo stretchy="false">(</mo><mi>s</mi><mi>t</mi><mi>r</mi><mi>u</mi><mi>c</mi><msubsup><mi>t</mi><mrow><mi>i</mi><mo separator="true">,</mo><mi>c</mi></mrow><mi>C</mi></msubsup><mo separator="true">,</mo><mi>s</mi><mi>t</mi><mi>r</mi><mi>u</mi><mi>c</mi><msubsup><mi>t</mi><mrow><mi>i</mi><mo separator="true">,</mo><mi>c</mi></mrow><mi>N</mi></msubsup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">M_{i,c}^{DIP} = \mathcal{F}(struct_{i,c}^{C},struct_{i,c}^{N})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.236103em;vertical-align:-0.394772em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-2.441336em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight">c</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">D</span><span class="mord mathnormal mtight" style="margin-right:0.07847em;">I</span><span class="mord mathnormal mtight" style="margin-right:0.13889em;">P</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.394772em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.236103em;vertical-align:-0.394772em;"></span><span class="mord"><span class="mord mathcal" style="margin-right:0.09931em;">F</span></span><span class="mopen">(</span><span class="mord mathnormal">s</span><span class="mord mathnormal">t</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">u</span><span class="mord mathnormal">c</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-2.441336em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight">c</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.07153em;">C</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.394772em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">s</span><span class="mord mathnormal">t</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">u</span><span class="mord mathnormal">c</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-2.441336em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight">c</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.394772em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>，其中C和N分别代表RGB和NIR图像。由于<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mi>M</mi><mrow><mi>i</mi><mo separator="true">,</mo><mi>c</mi></mrow><mrow><mi>D</mi><mi>I</mi><mi>P</mi></mrow></msubsup></mrow><annotation encoding="application/x-tex">M_{i,c}^{DIP}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.236103em;vertical-align:-0.394772em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-2.441336em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight">c</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">D</span><span class="mord mathnormal mtight" style="margin-right:0.07847em;">I</span><span class="mord mathnormal mtight" style="margin-right:0.13889em;">P</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.394772em;"><span></span></span></span></span></span></span></span></span></span>代表的是结构不一致而不是像素强度不一致，所以可以直接用<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>s</mi><mi>t</mi><mi>r</mi><mi>u</mi><mi>c</mi><msubsup><mi>t</mi><mrow><mi>i</mi><mo separator="true">,</mo><mi>c</mi></mrow><mi>N</mi></msubsup></mrow><annotation encoding="application/x-tex">struct_{i,c}^{N}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.236103em;vertical-align:-0.394772em;"></span><span class="mord mathnormal">s</span><span class="mord mathnormal">t</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">u</span><span class="mord mathnormal">c</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-2.441336em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight">c</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.394772em;"><span></span></span></span></span></span></span></span></span></span>代替<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mi>e</mi><mi>a</mi><msubsup><mi>t</mi><mrow><mi>i</mi><mo separator="true">,</mo><mi>c</mi></mrow><mi>N</mi></msubsup></mrow><annotation encoding="application/x-tex">feat_{i,c}^{N}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.236103em;vertical-align:-0.394772em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal">e</span><span class="mord mathnormal">a</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-2.441336em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight">c</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.394772em;"><span></span></span></span></span></span></span></span></span></span>，其中转换公式为：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mover accent="true"><mrow><mi>s</mi><mi>t</mi><mi>r</mi><mi>u</mi><mi>c</mi><mi>t</mi></mrow><mo>^</mo></mover><mrow><mi>i</mi><mo separator="true">,</mo><mi>c</mi></mrow><mi>N</mi></msubsup><mo>=</mo><msubsup><mi>M</mi><mrow><mi>i</mi><mo separator="true">,</mo><mi>c</mi></mrow><mi>N</mi></msubsup><mo>⋅</mo><mi>s</mi><mi>t</mi><mi>r</mi><mi>u</mi><mi>c</mi><msubsup><mi>t</mi><mrow><mi>i</mi><mo separator="true">,</mo><mi>c</mi></mrow><mi>N</mi></msubsup></mrow><annotation encoding="application/x-tex">\hat{struct}_{i,c}^{N} = M_{i,c}^{N} \cdot struct_{i,c}^{N}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.4928589999999997em;vertical-align:-0.383108em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.87852em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="mord mathnormal">t</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">u</span><span class="mord mathnormal">c</span><span class="mord mathnormal">t</span></span></span><span style="top:-3.18408em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.25em;"><span class="mord">^</span></span></span></span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1097509999999997em;"><span style="top:-2.4530000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight">c</span></span></span></span><span style="top:-3.33142em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.383108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.236103em;vertical-align:-0.394772em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-2.441336em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight">c</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.394772em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.236103em;vertical-align:-0.394772em;"></span><span class="mord mathnormal">s</span><span class="mord mathnormal">t</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">u</span><span class="mord mathnormal">c</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-2.441336em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight">c</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.394772em;"><span></span></span></span></span></span></span></span></span></span>，在DIP的引导下<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mover accent="true"><mrow><mi>s</mi><mi>t</mi><mi>r</mi><mi>u</mi><mi>c</mi><mi>t</mi></mrow><mo>^</mo></mover><mrow><mi>i</mi><mo separator="true">,</mo><mi>c</mi></mrow><mi>N</mi></msubsup></mrow><annotation encoding="application/x-tex">\hat{struct}_{i,c}^{N}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.4928589999999997em;vertical-align:-0.383108em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.87852em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="mord mathnormal">t</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">u</span><span class="mord mathnormal">c</span><span class="mord mathnormal">t</span></span></span><span style="top:-3.18408em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.25em;"><span class="mord">^</span></span></span></span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1097509999999997em;"><span style="top:-2.4530000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight">c</span></span></span></span><span style="top:-3.33142em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.383108em;"><span></span></span></span></span></span></span></span></span></span>直接舍弃了与RGB图像不一致的结构，从而解决了结构不一致性。为了进一步将NIR中的结构细节融入到RGB中，本文设计了一个多尺度融合模块，详见上图©。</p><h3 id="loss-function"><a class="markdownIt-Anchor" href="#loss-function"></a> Loss Function</h3><p>该模型的总损失函数为：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="script">L</mi><mo>=</mo><msubsup><mi mathvariant="script">L</mi><mrow><mi>r</mi><mi>e</mi><mi>c</mi></mrow><mi>C</mi></msubsup><mo>+</mo><msubsup><mi mathvariant="script">L</mi><mrow><mi>r</mi><mi>e</mi><mi>c</mi></mrow><mover accent="true"><mi>C</mi><mo>^</mo></mover></msubsup><mo>+</mo><msubsup><mi mathvariant="script">L</mi><mrow><mi>r</mi><mi>e</mi><mi>c</mi></mrow><mi>N</mi></msubsup><mo>+</mo><msub><mi>λ</mi><mn>1</mn></msub><mo>⋅</mo><msubsup><mi mathvariant="script">L</mi><mrow><mi>s</mi><mi>t</mi><mi>r</mi><mi>u</mi></mrow><mi>C</mi></msubsup><mo>+</mo><msub><mi>λ</mi><mn>2</mn></msub><mo>⋅</mo><msubsup><mi mathvariant="script">L</mi><mrow><mi>s</mi><mi>t</mi><mi>r</mi><mi>u</mi></mrow><mi>N</mi></msubsup></mrow><annotation encoding="application/x-tex">\mathcal{L} = \mathcal{L}_{rec}^{C} + \mathcal{L}_{rec}^{\hat{C}} + \mathcal{L}_{rec}^{N} + \lambda_{1} \cdot \mathcal{L}_{stru}^{C} + \lambda_{2} \cdot \mathcal{L}_{stru}^{N}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord"><span class="mord mathcal">L</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.088331em;vertical-align:-0.247em;"></span><span class="mord"><span class="mord"><span class="mord mathcal">L</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-2.4530000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">c</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.07153em;">C</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.2727389999999996em;vertical-align:-0.247em;"></span><span class="mord"><span class="mord"><span class="mord mathcal">L</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0257389999999997em;"><span style="top:-2.4530000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">c</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord accent mtight"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9467699999999999em;"><span style="top:-2.7em;"><span class="pstrut" style="height:2.7em;"></span><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.07153em;">C</span></span></span><span style="top:-2.9523300000000003em;"><span class="pstrut" style="height:2.7em;"></span><span class="accent-body" style="left:-0.16666em;"><span class="mord mtight">^</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.088331em;vertical-align:-0.247em;"></span><span class="mord"><span class="mord"><span class="mord mathcal">L</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-2.4530000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">c</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">λ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.088331em;vertical-align:-0.247em;"></span><span class="mord"><span class="mord"><span class="mord mathcal">L</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-2.4530000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">s</span><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight">u</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.07153em;">C</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">λ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.088331em;vertical-align:-0.247em;"></span><span class="mord"><span class="mord"><span class="mord mathcal">L</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-2.4530000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">s</span><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight">u</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span></span></span></span> 其中<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mi mathvariant="script">L</mi><mrow><mi>s</mi><mi>t</mi><mi>r</mi><mi>u</mi></mrow><mi>C</mi></msubsup></mrow><annotation encoding="application/x-tex">\mathcal{L}_{stru}^{C}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.088331em;vertical-align:-0.247em;"></span><span class="mord"><span class="mord"><span class="mord mathcal">L</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-2.4530000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">s</span><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight">u</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.07153em;">C</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span></span></span></span> 和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mi mathvariant="script">L</mi><mrow><mi>s</mi><mi>t</mi><mi>r</mi><mi>u</mi></mrow><mi>N</mi></msubsup></mrow><annotation encoding="application/x-tex">\mathcal{L}_{stru}^{N}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.088331em;vertical-align:-0.247em;"></span><span class="mord"><span class="mord"><span class="mord mathcal">L</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-2.4530000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">s</span><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight">u</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span></span></span></span>是深度结构预测损失函数<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>λ</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">\lambda_{1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">λ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>λ</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">\lambda_{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">λ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>为对应的系数，分别设置为1/1000和1/3000，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mi mathvariant="script">L</mi><mrow><mi>r</mi><mi>e</mi><mi>c</mi></mrow><mi>C</mi></msubsup></mrow><annotation encoding="application/x-tex">\mathcal{L}_{rec}^{C}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.088331em;vertical-align:-0.247em;"></span><span class="mord"><span class="mord"><span class="mord mathcal">L</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-2.4530000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">c</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.07153em;">C</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span></span></span></span>、<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mi mathvariant="script">L</mi><mrow><mi>r</mi><mi>e</mi><mi>c</mi></mrow><mover accent="true"><mi>C</mi><mo>^</mo></mover></msubsup></mrow><annotation encoding="application/x-tex">\mathcal{L}_{rec}^{\hat{C}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2727389999999996em;vertical-align:-0.247em;"></span><span class="mord"><span class="mord"><span class="mord mathcal">L</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0257389999999997em;"><span style="top:-2.4530000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">c</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord accent mtight"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9467699999999999em;"><span style="top:-2.7em;"><span class="pstrut" style="height:2.7em;"></span><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.07153em;">C</span></span></span><span style="top:-2.9523300000000003em;"><span class="pstrut" style="height:2.7em;"></span><span class="accent-body" style="left:-0.16666em;"><span class="mord mtight">^</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span></span></span></span>、<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mi mathvariant="script">L</mi><mrow><mi>r</mi><mi>e</mi><mi>c</mi></mrow><mi>N</mi></msubsup></mrow><annotation encoding="application/x-tex">\mathcal{L}_{rec}^{N}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.088331em;vertical-align:-0.247em;"></span><span class="mord"><span class="mord"><span class="mord mathcal">L</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-2.4530000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">c</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span></span></span></span>分别表示fused-RGB、coarse-RGB、NIR图像的重构损失函数。其中<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="script">L</mi><mo>=</mo><mi>s</mi><mi>q</mi><mi>r</mi><mi>t</mi><mrow><mo stretchy="false">(</mo><mi mathvariant="normal">∥</mi><mi>X</mi><mo>−</mo><msub><mi>X</mi><mrow><mi>g</mi><mi>t</mi></mrow></msub><msup><mi mathvariant="normal">∥</mi><mn>2</mn></msup><mo>+</mo><msup><mi>ε</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow></mrow><annotation encoding="application/x-tex">\mathcal{L} = sqrt{(\|X - X_{gt}\|^{2} + \varepsilon^{2})}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord"><span class="mord mathcal">L</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.1002159999999999em;vertical-align:-0.286108em;"></span><span class="mord mathnormal">s</span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">t</span><span class="mord"><span class="mopen">(</span><span class="mord">∥</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.28055599999999997em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">g</span><span class="mord mathnormal mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord">∥</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">ε</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span>，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ε</mi></mrow><annotation encoding="application/x-tex">\varepsilon</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">ε</span></span></span></span>一般被设置为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><msup><mn>0</mn><mrow><mo>−</mo><mn>3</mn></mrow></msup></mrow><annotation encoding="application/x-tex">10^{-3}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">3</span></span></span></span></span></span></span></span></span></span></span></span>。</p><h2 id="experiment"><a class="markdownIt-Anchor" href="#experiment"></a> Experiment</h2><blockquote><p>训练图片随机裁剪为<code>128*128</code>，learning rate从2e-4逐渐减少为1e-6</p></blockquote><h3 id="performance-comparison"><a class="markdownIt-Anchor" href="#performance-comparison"></a> Performance Comparison</h3><p>在DVD数据集上PSNR和SSIM指标的比较结果：</p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/202203042117440.png" alt="image-20220304211734225" /></p><p>同时DVN与同领域的其他算法相比还具有更好的去噪、细节恢复和伪影抑制能力。</p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/202203042119550.png" alt="image-20220304211939388" /></p><p>本文还进行了真实低光环境下的性能测试，同样取得了很好的效果</p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/202203042124175.png" alt="image-20220304212220048" /></p><h3 id="effectiveness-of-dip"><a class="markdownIt-Anchor" href="#effectiveness-of-dip"></a> Effectiveness of DIP</h3><p>本文中作者还验证了DIP这一结构的有效性，为此作者重新训练模型（去除DIP模块）来进行比较。</p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/202203042127093.png" alt="image-20220304212741907" /></p><p>可以看出DIP可以抑制图像伪影和增强细节特征，能够更好地处理结构不一致性问题。</p><h2 id="code"><a class="markdownIt-Anchor" href="#code"></a> Code</h2><p><em><strong>注：根据作者<code>Bingbing Yu</code>提供的运行demo进行研究。</strong></em></p><hr /><ul><li><p>提取深度特征</p><p>作者首先是先通过R网络（个人理解为编码器与解码器结构，代码中用到了RCAB模块）输出RGB和NIR的三层特征结构，然后再计算NIR各层特征的梯度图<code>nir_structure</code>。RGB图像的步骤相似，首先也是提取编码器和解码器特征然后再输出梯度图<code>rgb_structure</code>。</p></li><li><p>DIP模块应用</p><p>根据上述得到的<code>rgb_structure</code>与<code>nir_structure</code>可以算出<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>M</mi><mrow><mi>D</mi><mi>I</mi><mi>P</mi></mrow></msup></mrow><annotation encoding="application/x-tex">M^{DIP}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8413309999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">D</span><span class="mord mathnormal mtight" style="margin-right:0.07847em;">I</span><span class="mord mathnormal mtight" style="margin-right:0.13889em;">P</span></span></span></span></span></span></span></span></span></span></span></span></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token number">1</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> x<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> y<span class="token punctuation">)</span> <span class="token operator">+</span> x <span class="token operator">*</span> y<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">masks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>rgb_structure<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>masks<span class="token punctuation">.</span>append<span class="token punctuation">(</span>f<span class="token punctuation">(</span>rgb_structure<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> nir_structure<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>特征融合</p><p>重复上述编码器和解码器步骤，不过在编码时在对应尺度加上相应的NIR特征<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mrow><mi>s</mi><mi>t</mi><mi>r</mi><mi>u</mi><mi>c</mi><mi>t</mi></mrow><mo>^</mo></mover></mrow><annotation encoding="application/x-tex">\hat{struct}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.87852em;vertical-align:0em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.87852em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="mord mathnormal">t</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">u</span><span class="mord mathnormal">c</span><span class="mord mathnormal">t</span></span></span><span style="top:-3.18408em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.25em;"><span class="mord">^</span></span></span></span></span></span></span></span></span></span>（抑制了结构不一致性）</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 编码部分</span>enc1 <span class="token operator">=</span> self<span class="token punctuation">.</span>encoder_level1<span class="token punctuation">(</span>x<span class="token punctuation">)</span>enc1_fuse_nir <span class="token operator">=</span> enc1 <span class="token operator">+</span> self<span class="token punctuation">.</span>atten_conv1<span class="token punctuation">(</span>mask<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> encoder_outs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>x <span class="token operator">=</span> self<span class="token punctuation">.</span>down12<span class="token punctuation">(</span>enc1_fuse_nir<span class="token punctuation">)</span>enc2 <span class="token operator">=</span> self<span class="token punctuation">.</span>encoder_level2<span class="token punctuation">(</span>x<span class="token punctuation">)</span>enc2_fuse_nir <span class="token operator">=</span> enc2 <span class="token operator">+</span> self<span class="token punctuation">.</span>atten_conv2<span class="token punctuation">(</span>mask<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> encoder_outs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>x <span class="token operator">=</span> self<span class="token punctuation">.</span>down23<span class="token punctuation">(</span>enc2_fuse_nir<span class="token punctuation">)</span>enc3_fuse_nir <span class="token operator">=</span> enc3 <span class="token operator">+</span> self<span class="token punctuation">.</span>atten_conv3<span class="token punctuation">(</span>mask<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">*</span> encoder_outs<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="summary"><a class="markdownIt-Anchor" href="#summary"></a> Summary</h2><h3 id="算法基本运行流程"><a class="markdownIt-Anchor" href="#算法基本运行流程"></a> 算法基本运行流程</h3><ul><li>分别提取RGB和NIR图像的深度特征<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mi>e</mi><mi>a</mi><msup><mi>t</mi><mi>C</mi></msup></mrow><annotation encoding="application/x-tex">feat^{C}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.035771em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal">e</span><span class="mord mathnormal">a</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.07153em;">C</span></span></span></span></span></span></span></span></span></span></span></span>和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mi>e</mi><mi>a</mi><msup><mi>t</mi><mi>N</mi></msup></mrow><annotation encoding="application/x-tex">feat^{N}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.035771em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal">e</span><span class="mord mathnormal">a</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span></span></span></span></span></span></span></span></span></span></span></span></li><li>将<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mi>e</mi><mi>a</mi><msup><mi>t</mi><mi>C</mi></msup></mrow><annotation encoding="application/x-tex">feat^{C}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.035771em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal">e</span><span class="mord mathnormal">a</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.07153em;">C</span></span></span></span></span></span></span></span></span></span></span></span>作为DSEM的输入，在监督信号的指导下训练DSEM，其中监督信号由AutoEncoder输出（因为RGB和NIR第一步结构一样，所以选取一个进行训练DSEM就行）</li><li>而后将训练好的DSEM的输出<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>s</mi><mi>t</mi><mi>r</mi><mi>u</mi><mi>c</mi><msup><mi>t</mi><mi>C</mi></msup></mrow><annotation encoding="application/x-tex">struct^{C}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8413309999999999em;vertical-align:0em;"></span><span class="mord mathnormal">s</span><span class="mord mathnormal">t</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">u</span><span class="mord mathnormal">c</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.07153em;">C</span></span></span></span></span></span></span></span></span></span></span></span> 和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>s</mi><mi>t</mi><mi>r</mi><mi>u</mi><mi>c</mi><msup><mi>t</mi><mi>N</mi></msup></mrow><annotation encoding="application/x-tex">struct^{N}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8413309999999999em;vertical-align:0em;"></span><span class="mord mathnormal">s</span><span class="mord mathnormal">t</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">u</span><span class="mord mathnormal">c</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span></span></span></span></span></span></span></span></span></span></span></span>进行DIP模块处理，即生成抑制结构不一致的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mover accent="true"><mrow><mi>s</mi><mi>t</mi><mi>r</mi><mi>u</mi><mi>c</mi><mi>t</mi></mrow><mo>^</mo></mover><mi>N</mi></msup></mrow><annotation encoding="application/x-tex">\hat{struct}^{N}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.109751em;vertical-align:0em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.87852em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="mord mathnormal">t</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">u</span><span class="mord mathnormal">c</span><span class="mord mathnormal">t</span></span></span><span style="top:-3.18408em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.25em;"><span class="mord">^</span></span></span></span></span></span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.109751em;"><span style="top:-3.33142em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span></span></span></span></span></span></span></span></span></span></span></span>作为第三步融合模块的输入</li><li>第一步获取到的DSEM的输出<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>s</mi><mi>t</mi><mi>r</mi><mi>u</mi><mi>c</mi><msup><mi>t</mi><mi>C</mi></msup></mrow><annotation encoding="application/x-tex">struct^{C}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8413309999999999em;vertical-align:0em;"></span><span class="mord mathnormal">s</span><span class="mord mathnormal">t</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">u</span><span class="mord mathnormal">c</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.07153em;">C</span></span></span></span></span></span></span></span></span></span></span></span>作为输入传入最后的融合模块，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mover accent="true"><mrow><mi>s</mi><mi>t</mi><mi>r</mi><mi>u</mi><mi>c</mi><mi>t</mi></mrow><mo>^</mo></mover><mi>N</mi></msup></mrow><annotation encoding="application/x-tex">\hat{struct}^{N}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.109751em;vertical-align:0em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.87852em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="mord mathnormal">t</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">u</span><span class="mord mathnormal">c</span><span class="mord mathnormal">t</span></span></span><span style="top:-3.18408em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.25em;"><span class="mord">^</span></span></span></span></span></span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.109751em;"><span style="top:-3.33142em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span></span></span></span></span></span></span></span></span></span></span></span>在相应层与RGB进行相加融合，最后通过解码器输出融合图像</li></ul><h3 id="大致思想"><a class="markdownIt-Anchor" href="#大致思想"></a> 大致思想</h3><ul><li>首先想的是用NIR图像的丰富细节结构与RGB图像融合，来补充低光环境下RGB图像包含大量噪声的影响</li><li>融合的话采取的是结构融合，又因为低光RGB包含大量噪声，所以得先进行去噪处理，于是作者提出了DSEM模块用来处理噪声。</li><li>处理完噪声后RGB和NIR图像又存在结构不一致这个问题，融合后会导致伪影等问题，于是作者又提出了DIP模块，用来生成抑制结构不一致性的NIR结构图</li><li>后续就直接用生成的RGB结构图与NIR结构图进行融合</li></ul>]]></content>
      
      
      <categories>
          
          <category> 论文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cv </tag>
            
            <tag> image fusion </tag>
            
            <tag> RGB&amp;NIR </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PicGo + Gitee + Typora实现图床</title>
      <link href="/posts/7360.html"/>
      <url>/posts/7360.html</url>
      
        <content type="html"><![CDATA[<h2 id="使用picgo-gitee-typora实现博客图床功能"><a class="markdownIt-Anchor" href="#使用picgo-gitee-typora实现博客图床功能"></a> 使用PicGo + Gitee + Typora实现博客图床功能</h2><h3 id="1-gitee账户配置"><a class="markdownIt-Anchor" href="#1-gitee账户配置"></a> 1、Gitee账户配置</h3><h4 id="新建仓库"><a class="markdownIt-Anchor" href="#新建仓库"></a> 新建仓库</h4><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/202202261924052.png" alt="image-20220226192440682" /></p><blockquote><p>注意修改为<code>开源</code></p></blockquote><h4 id="私人令牌token配置获取"><a class="markdownIt-Anchor" href="#私人令牌token配置获取"></a> 私人令牌token配置获取</h4><ul><li><p>找到<code>设置</code>-&gt;<code>安全设置</code>-&gt;<code>私人令牌</code>，点击生成新令牌，按照下图勾选后提交并保存token</p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/202202261929035.png" alt="" /></p></li></ul><p>到此gitee部分配置完成~</p><h3 id="2-picgo配置"><a class="markdownIt-Anchor" href="#2-picgo配置"></a> 2、PicGo配置</h3><h4 id="下载picgo"><a class="markdownIt-Anchor" href="#下载picgo"></a> 下载PicGo</h4><p>点击此<a href="https://github.com/Molunerfinn/PicGo/releases">下载链接</a>进行下载</p><h4 id="插件安装"><a class="markdownIt-Anchor" href="#插件安装"></a> 插件安装</h4><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/202202261935142.png" alt="" /></p><h4 id="插件配置"><a class="markdownIt-Anchor" href="#插件配置"></a> 插件配置</h4><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/202202261936660.png" alt="" /></p><h4 id="上传测试"><a class="markdownIt-Anchor" href="#上传测试"></a> 上传测试</h4><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/202202261937942.png" alt="" /></p><p>上传成功后可以在相册看到</p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/202202261938285.png" alt="image-20220226193838206" /></p><h4 id="设置快捷上传按键根据个人习惯"><a class="markdownIt-Anchor" href="#设置快捷上传按键根据个人习惯"></a> 设置快捷上传按键（根据个人习惯）</h4><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/202202261939201.png" alt="image-20220226193943129" /></p><p>这样可以直接截图或复制网图后直接上传到gitee然后会返回粘贴板一个Markdown的图片链接形式</p><h3 id="3-typora配置"><a class="markdownIt-Anchor" href="#3-typora配置"></a> 3、Typora配置</h3><h4 id="配置图像设置"><a class="markdownIt-Anchor" href="#配置图像设置"></a> 配置图像设置</h4><p><code>文件</code>-&gt;<code>偏好设置</code>-&gt;<code>图像</code></p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/202202261942775.png" alt="image-20220226194231638" /></p><p>根据上图这样配置后点击验证图片上传选项测试是否成功</p><p><img src="https://gitee.com/qingy735/blogimg/raw/master/img/202202261943926.png" alt="image-20220226194312798" /></p><p>大功告成！</p>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PicGo </tag>
            
            <tag> 图床 </tag>
            
            <tag> Typora </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>flex布局初步认识</title>
      <link href="/posts/37862.html"/>
      <url>/posts/37862.html</url>
      
        <content type="html"><![CDATA[<h2 id="关于flex布局的初步认识"><a class="markdownIt-Anchor" href="#关于flex布局的初步认识"></a> 关于flex布局的初步认识</h2><h3 id="flex布局简单介绍"><a class="markdownIt-Anchor" href="#flex布局简单介绍"></a> flex布局简单介绍</h3><p>Flex 全称 Flexible box 布局模型，通常称为 flexbox 或 flex，也称为弹性盒子或弹性布局。一种比较高效率的 css3 布局方案。</p><p>既然是盒子，首先需要一个容器 container，然后是项目 item。容器包裹着项目，再通过配置不同的属性，实现各种各样的排列分布。</p><p>flex 有两根轴线，分别是主轴和交叉轴，主轴的方向由 <code>flex-diretion</code> 属性控制，交叉轴始终垂直于主轴。</p><p>容器为项目的分布提供的空间，轴线则控制项目的排列跟对齐的方向， flex 是一种一维的布局，一个容器只能是一行（左右）或者一列（上下），通过主轴控制项目排列的方向（上下/左右），交叉轴配合实现不同的对齐方式。有时候一行放不下，可以实现多行的布局，但是对于 flex 来说，新的一行就是一个新的独立的 flex 容器。作为对比的是另外一个二维布局 CSS Grid 布局，可以同时处理行和列上的布局。</p><h3 id="flex基本属性"><a class="markdownIt-Anchor" href="#flex基本属性"></a> flex基本属性</h3><p>flex由<code>flex-diretion</code>控制主轴方向，一般是横轴和纵轴。之后再由<code>justify-content</code>控制容器内部元素在主轴上的排列方式，主要分为center、space-around、space-between、flex-start、flex-end。而后用align-items控制元素在垂直主轴方向的排列样式。</p><h3 id="flex布局演示"><a class="markdownIt-Anchor" href="#flex布局演示"></a> flex布局演示</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span>示例一<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>menu<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>image</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>image1.jpg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>image</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>text</span><span class="token punctuation">></span></span>item1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>text</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>image</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>image2.jpg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>image</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>text</span><span class="token punctuation">></span></span>item2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>text</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>image</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>image3.jpg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>image</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>text</span><span class="token punctuation">></span></span>item3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>text</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>image</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>image4.jpg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>image</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>text</span><span class="token punctuation">></span></span>item4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>text</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.menu image</span> <span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 150rpx<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 120rpx<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.menu</span> <span class="token punctuation">&#123;</span>  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>  <span class="token property">flex-direction</span><span class="token punctuation">:</span> row<span class="token punctuation">;</span>  <span class="token property">justify-content</span><span class="token punctuation">:</span> space-around<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.menu .item</span> <span class="token punctuation">&#123;</span>  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>  <span class="token property">flex-direction</span><span class="token punctuation">:</span> column<span class="token punctuation">;</span>  <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flex </tag>
            
            <tag> 布局 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>模型迁移时的动态shape问题</title>
      <link href="/posts/8603.html"/>
      <url>/posts/8603.html</url>
      
        <content type="html"><![CDATA[<h2 id="模型迁移到npu时处理动态shape问题"><a class="markdownIt-Anchor" href="#模型迁移到npu时处理动态shape问题"></a> 模型迁移到npu时处理动态shape问题</h2><h3 id="1-为什么要处理动态shape"><a class="markdownIt-Anchor" href="#1-为什么要处理动态shape"></a> 1、为什么要处理动态shape</h3><blockquote><p>因为当前NPU是在线编译算子，对动态shape场景会反复编译算子从而导致性能较差(<em>本人测试跑一个step都需要接近一个小时，根本跑不起来</em>)</p></blockquote><h3 id="2-如何处理动态shape"><a class="markdownIt-Anchor" href="#2-如何处理动态shape"></a> 2、如何处理动态shape</h3><h4 id="a-提取动态shape"><a class="markdownIt-Anchor" href="#a-提取动态shape"></a> a. 提取动态shape</h4><blockquote><ul><li>动态shape一般由<strong>nonzero</strong>操作、<strong>tensor[index]</strong> 切片操作引起的</li><li>可以提取模型运行时涉及到算子，然后通过分析动态shape算子出现位置再进行解决，本人采用<a href="https://gitee.com/wangjiangben_hw/ascend-pytorch-crowdintelligence-doc/blob/master/pytorch-train-guide/%E6%A8%A1%E5%9E%8B%E7%AE%97%E5%AD%90%E6%8F%90%E5%8F%96%E6%8C%87%E5%8D%97.md">Pytorch op记录提取</a></li></ul></blockquote><hr /><blockquote><p>提取完算子就可以进行处理动态shape了，一般的话动态shape出现在<strong>模型输入input、target</strong>和<strong>loss</strong>部分。</p></blockquote><h4 id="b-处理模型输入处动态shape"><a class="markdownIt-Anchor" href="#b-处理模型输入处动态shape"></a> b. 处理模型输入处动态shape</h4><blockquote><p>一般的话对于目标检测算法，图片输入都是不固定的，模型本身如果需要处理的话也是在forward函数中进行，我们需要将该处理移到**model(input, target)**以前，即在传入模型之前固定输入shape。这里以 <em>ssdlite320</em> 为例说明</p></blockquote><p>一般的图片处理需要进行<em>normalize</em>和<em>resize</em>两部分，处理resize部分就ok了。如果模型中有transform方法处理input那就不需要过多操作，但是如果模型没有固定shape就需要图片<strong>填0处理</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">fix_input</span><span class="token punctuation">(</span>images<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    固定input    '''</span>    <span class="token comment"># 固定input image</span>    batch_shape <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">)</span>    <span class="token comment"># 填充值</span>    pad_value <span class="token operator">=</span> <span class="token number">0</span>    images_pad <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> image <span class="token keyword">in</span> images<span class="token punctuation">:</span>        image <span class="token operator">=</span> image<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>        padding_size <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> batch_shape<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> image<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                            <span class="token number">0</span><span class="token punctuation">,</span> batch_shape<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">-</span> image<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span>        padding_size <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> batch_shape<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> image<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                            <span class="token number">0</span><span class="token punctuation">,</span> batch_shape<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">-</span> image<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span>        image <span class="token operator">=</span> F<span class="token punctuation">.</span>pad<span class="token punctuation">(</span>image<span class="token punctuation">,</span> padding_size<span class="token punctuation">,</span> value<span class="token operator">=</span>pad_value<span class="token punctuation">)</span>        images_pad<span class="token punctuation">.</span>append<span class="token punctuation">(</span>image<span class="token punctuation">)</span>    images <span class="token operator">=</span> images_pad    <span class="token keyword">return</span> images<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意这里填零是拓展图片右边和下边，因为这样不会破坏其他参数中对于图片坐标的记录</p></blockquote><p>如果传参还有targets，则还需要固定ground_box数量。操作和上述类似也是补0</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">fix_target</span><span class="token punctuation">(</span>targets<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    固定targets    '''</span>    <span class="token comment"># 填充值</span>    pad_value <span class="token operator">=</span> <span class="token number">0</span>    <span class="token comment"># 固定ground_box数量</span>    max_boxes <span class="token operator">=</span> <span class="token number">20</span>    classes <span class="token operator">=</span> <span class="token number">91</span>    targets_pad <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> target <span class="token keyword">in</span> targets<span class="token punctuation">:</span>        boxes_num <span class="token operator">=</span> target<span class="token punctuation">[</span><span class="token string">'boxes'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> boxes_num <span class="token operator">&lt;</span> max_boxes<span class="token punctuation">:</span>            diff_num <span class="token operator">=</span> max_boxes <span class="token operator">-</span> boxes_num            <span class="token comment"># box对齐</span>            target<span class="token punctuation">[</span><span class="token string">'boxes'</span><span class="token punctuation">]</span> <span class="token operator">=</span> torch<span class="token punctuation">.</span>cat<span class="token punctuation">(</span><span class="token punctuation">[</span>target<span class="token punctuation">[</span><span class="token string">'boxes'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> torch<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">[</span>diff_num<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>            <span class="token comment"># label对齐</span>            padding_label <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>diff_num<span class="token punctuation">)</span> <span class="token operator">+</span> classes            target<span class="token punctuation">[</span><span class="token string">'labels'</span><span class="token punctuation">]</span> <span class="token operator">=</span> torch<span class="token punctuation">.</span>cat<span class="token punctuation">(</span><span class="token punctuation">[</span>target<span class="token punctuation">[</span><span class="token string">'labels'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> torch<span class="token punctuation">.</span>from_numpy<span class="token punctuation">(</span>padding_label<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">long</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>            <span class="token comment"># mask对齐</span>            <span class="token comment"># padding_mask = torch.zeros(diff_num, target['masks'].shape[1], target['masks'].shape[2])</span>            padding_mask <span class="token operator">=</span> target<span class="token punctuation">[</span><span class="token string">'masks'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>unsqueeze<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>            target<span class="token punctuation">[</span><span class="token string">'masks'</span><span class="token punctuation">]</span> <span class="token operator">=</span> torch<span class="token punctuation">.</span>cat<span class="token punctuation">(</span><span class="token punctuation">[</span>target<span class="token punctuation">[</span><span class="token string">'masks'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> padding_mask<span class="token punctuation">]</span><span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>            <span class="token comment"># area对齐</span>            padding_area <span class="token operator">=</span> torch<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>diff_num<span class="token punctuation">)</span>            target<span class="token punctuation">[</span><span class="token string">'area'</span><span class="token punctuation">]</span> <span class="token operator">=</span> torch<span class="token punctuation">.</span>cat<span class="token punctuation">(</span><span class="token punctuation">[</span>target<span class="token punctuation">[</span><span class="token string">'area'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> padding_area<span class="token punctuation">]</span><span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>            <span class="token comment"># iscrowd对齐</span>            padding_iscrowd <span class="token operator">=</span> torch<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>diff_num<span class="token punctuation">)</span>            target<span class="token punctuation">[</span><span class="token string">'iscrowd'</span><span class="token punctuation">]</span> <span class="token operator">=</span> torch<span class="token punctuation">.</span>cat<span class="token punctuation">(</span><span class="token punctuation">[</span>target<span class="token punctuation">[</span><span class="token string">'iscrowd'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> padding_iscrowd<span class="token punctuation">.</span><span class="token builtin">long</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            select_idx <span class="token operator">=</span> torch<span class="token punctuation">.</span>randperm<span class="token punctuation">(</span>boxes_num<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span>max_boxes<span class="token punctuation">]</span>            target<span class="token punctuation">[</span><span class="token string">'boxes'</span><span class="token punctuation">]</span> <span class="token operator">=</span> target<span class="token punctuation">[</span><span class="token string">'boxes'</span><span class="token punctuation">]</span><span class="token punctuation">[</span>select_idx<span class="token punctuation">]</span>            target<span class="token punctuation">[</span><span class="token string">'labels'</span><span class="token punctuation">]</span> <span class="token operator">=</span> target<span class="token punctuation">[</span><span class="token string">'labels'</span><span class="token punctuation">]</span><span class="token punctuation">[</span>select_idx<span class="token punctuation">]</span>            target<span class="token punctuation">[</span><span class="token string">'masks'</span><span class="token punctuation">]</span> <span class="token operator">=</span> target<span class="token punctuation">[</span><span class="token string">'masks'</span><span class="token punctuation">]</span><span class="token punctuation">[</span>select_idx<span class="token punctuation">]</span>            target<span class="token punctuation">[</span><span class="token string">'area'</span><span class="token punctuation">]</span> <span class="token operator">=</span> target<span class="token punctuation">[</span><span class="token string">'area'</span><span class="token punctuation">]</span><span class="token punctuation">[</span>select_idx<span class="token punctuation">]</span>            target<span class="token punctuation">[</span><span class="token string">'iscrowd'</span><span class="token punctuation">]</span> <span class="token operator">=</span> target<span class="token punctuation">[</span><span class="token string">'iscrowd'</span><span class="token punctuation">]</span><span class="token punctuation">[</span>select_idx<span class="token punctuation">]</span>        target<span class="token punctuation">[</span><span class="token string">'boxes'</span><span class="token punctuation">]</span> <span class="token operator">=</span> target<span class="token punctuation">[</span><span class="token string">'boxes'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>        target<span class="token punctuation">[</span><span class="token string">'labels'</span><span class="token punctuation">]</span> <span class="token operator">=</span> target<span class="token punctuation">[</span><span class="token string">'labels'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>        target<span class="token punctuation">[</span><span class="token string">'masks'</span><span class="token punctuation">]</span> <span class="token operator">=</span> target<span class="token punctuation">[</span><span class="token string">'masks'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>        target<span class="token punctuation">[</span><span class="token string">'image_id'</span><span class="token punctuation">]</span> <span class="token operator">=</span> target<span class="token punctuation">[</span><span class="token string">'image_id'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>        target<span class="token punctuation">[</span><span class="token string">'area'</span><span class="token punctuation">]</span> <span class="token operator">=</span> target<span class="token punctuation">[</span><span class="token string">'area'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>        target<span class="token punctuation">[</span><span class="token string">'iscrowd'</span><span class="token punctuation">]</span> <span class="token operator">=</span> target<span class="token punctuation">[</span><span class="token string">'iscrowd'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>    <span class="token keyword">return</span> images<span class="token punctuation">,</span> targets<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="c-处理loss部分的动态shape"><a class="markdownIt-Anchor" href="#c-处理loss部分的动态shape"></a> c. 处理loss部分的动态shape</h4><blockquote><p>一般情况下loss部分的动态shape产生于按需取值和赋值等操作，详见<a href="https://gitee.com/wangjiangben_hw/ascend-pytorch-crowdintelligence-doc/blob/master/pytorch-train-guide/%E5%9B%BA%E5%AE%9A%E5%8A%A8%E6%80%81shape%E8%8C%83%E4%BE%8B%E6%96%87%E6%A1%A3.md#%E8%AE%A1%E7%AE%97%E7%B1%BB%E4%BF%AE%E6%94%B9%E5%9B%BA%E5%AE%9Ashape">文档</a></p><p>主要用的的思想就是保持shape不变，将不需要的部分赋值为0或其他操作，在最后计算时抵消掉前面多余的shape值，需要注意的时不能改变原先语义，记得加上的要reduce</p></blockquote><h3 id="3-npu测试"><a class="markdownIt-Anchor" href="#3-npu测试"></a> 3、npu测试</h3><blockquote><p>处理完动态shape后记得去npu上测试，一般的话前几个step还是会很慢，需要跑几个step后才会恢复正常，所以不要看到前面很慢就以为没固定好。</p></blockquote><hr /><blockquote><p>本文章主要参考 <a href="https://gitee.com/wangjiangben_hw/ascend-pytorch-crowdintelligence-doc/blob/master/pytorch-train-guide/PyTorch%E8%AE%AD%E7%BB%83%E8%B0%83%E8%AF%95%E4%BC%98%E5%8C%96%E5%92%8C%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97.md#31-%E5%8A%A8%E6%80%81shape%E7%AE%97%E5%AD%90%E6%8F%90%E5%8F%96%E5%92%8C%E8%A7%A3%E5%86%B3%E6%80%9D%E8%B7%AF">PyTorch训练调试优化和工具使用指南</a> 和 <a href="https://gitee.com/wangjiangben_hw/ascend-pytorch-crowdintelligence-doc/blob/master/pytorch-train-guide/%E5%9B%BA%E5%AE%9A%E5%8A%A8%E6%80%81shape%E8%8C%83%E4%BE%8B%E6%96%87%E6%A1%A3.md">固定动态shape范例文档</a> 这两篇文章，主要结合自身处理流程进行讲述。如有错误，还望指正！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Summary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pytorch </tag>
            
            <tag> 动态shape </tag>
            
            <tag> 模型迁移 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pytorch训练模型时出现文件类型报错</title>
      <link href="/posts/91b0e005.html"/>
      <url>/posts/91b0e005.html</url>
      
        <content type="html"><![CDATA[<h2 id="runtimeerror-received-0-items-of-ancdata"><a class="markdownIt-Anchor" href="#runtimeerror-received-0-items-of-ancdata"></a> RuntimeError: received 0 items of ancdata</h2><h3 id="错误原因"><a class="markdownIt-Anchor" href="#错误原因"></a> 错误原因</h3><blockquote><p>在dataloader加载数据时出现的错误，原因是pytorch多线程共享tensor是通过打开文件的方式实现的，而打开文件的数量是有限制的</p></blockquote><h3 id="解决方法"><a class="markdownIt-Anchor" href="#解决方法"></a> 解决方法</h3><ol><li>增加open files的限制数量 <code>ulimit -SHn 51200</code></li><li>修改多线程的tensor方式为file_system（默认方式为file_descriptor，受限于open files数量）<code>torch.multiprocessing.set_sharing_strategy('file_system')</code></li></ol><blockquote><p><strong>注</strong>：如果方法二还报错<code>unable to open shared memory object &lt;/torch_3394728_xxxxxxx&gt; in read-write mode</code>则参考以下链接<br /><a href="https://github.com/pytorch/fairseq/issues/1560">https://github.com/pytorch/fairseq/issues/1560</a><br /><a href="https://github.com/pytorch/pytorch/issues/2706">https://github.com/pytorch/pytorch/issues/2706</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Pytorch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bug </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
